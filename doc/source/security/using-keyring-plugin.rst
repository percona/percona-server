.. _keyring_plugin:

=======================================================
Keyring Plugins and Settings
=======================================================

To enable encryption, |Percona Server| may use one of the following plugins:

*  `keyring_file` stores the keyring data locally

* `keyring_vault` provides an interface for the database with a HashiCorp Vault
  server to store key and secure encryption keys.

.. note::

    The `keyring_file` plugin should not be used for regulatory compliance.

To install the selected plugin, follow the `installing and uninstalling plugins
<https://dev.mysql.com/doc/refman/8.0/en/plugin-loading.html>`__ instructions.

The `keyring_vault` plugin can store encryption keys inside the ``HashiCorp
Vault``.

.. important::

    The ``keyring_vault`` plugin works with kv secrets engine version 1

.. seealso::

    HashiCorp Documentation:

    `Installing Vault <https://www.vaultproject.io/docs/install/index.html>`_

    `KV Secrets Engine - Version 1 <https://www.vaultproject.io/docs/secrets/kv/kv-v1.html>`_

    `Production Hardening <https://learn.hashicorp.com/vault/operations/production-hardening>`_

.. _keyring_vault_plugin:

Loading the Keyring Plugin
------------------------------------------------------------------------------

Load the plugin at server startup with the `early-plugin-load Option
<https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_early-plugin-load>`__
to enable keyrings. We recommend loading the plugin in the
configuration file to facilitate the recovery for encrypted tables. Also, the
redo log and undo log encryption cannot be used without ``--early-plugin-load``.
In the startup process, the normal plugin load happens too late.

Run the following command to load the keyring_file plugin:

.. code-block:: bash

   $ mysqld --early-plugin-load="keyring_file=keyring_file.so"

.. warning::

    Only one keyring plugin should be enabled at a time. Enabling multiple
    keyring plugins are not supported and may result in data loss.

.. note::

     To start a server with different early plugins to be loaded, the
     ``--early-plugin-load`` option can contain the plugin names in a
     double-quoted list with each plugin name separated by a semicolon. The
     use of double quotes ensures the semicolons do not create issues when
     the list is executed in a script.

Another method is to add the following options to your configuration file.
These statements load the keyring_vault plugin and the `keyring_vault_config`.
The second statement provides the location to the keyring_vault configuration file:

.. code-block:: guess

    [mysqld]
    early-plugin-load="keyring_vault=keyring_vault.so"
    loose-keyring_vault_config="/home/mysql/keyring_vault.conf"

.. note::

    The keyring_vault extension, ".so", and the file location for the vault
    configuration should be changed to match your operating system's extension
    and operating system location.

.. seealso::

    `MySQL Using the HashiCorp Vault Keyring Plugin <https://dev.mysql.com/doc/mysql-security-excerpt/8.0/en/keyring-hashicorp-plugin.html>`_

Describing the keyring_vault_config file
-----------------------------------------

The `keyring_vault_config` file has the following information:

* ``vault_url`` - the Vault server address

* ``secret_mount_point`` - where the `keyring_vault` stores the keys

* ``token`` - a token generated by the Vault server

* ``vault_ca [optional]`` - if the machine does not trust the Vault's CA
  certificate, this variable points to the CA certificate used to sign the
  Vault's certificates

The following is a configuration file example: ::

  vault_url = https://vault.public.com:8202
  secret_mount_point = secret
  token = 58a20c08-8001-fd5f-5192-7498a48eaf20
  vault_ca = /data/keyring_vault_confs/vault_ca.crt

.. warning::

    Each ``secret_mount_point`` must be used by only one server. Multiple
    servers using the same secret_mount_point may cause unpredictable behavior.

.. note::

    Create a backup of the keyring configuration file or data file immediately
    after creating the encrypted tablespace.
    If you are using Master key encryption, do this step before master key
    rotation and after master key rotation.

The first time a key is fetched from a `keyring`, the `keyring_vault`
communicates with the Vault server to retrieve the key type and data.

Verifying the Keyring Plugin is Active
---------------------------------------

To verify the keyring plugin is active, run the `SHOW PLUGINS
<https://dev.mysql.com/doc/refman/8.0/en/show-plugins.html>`__ statement or
run a query on the `INFORMATION_SCHEMA.PLUGINS` table.

Loading Keyring Encryption User-Defined Functions
--------------------------------------------------

You must also create keyring encryption UDFs.

A user-created key deletion is only possible with the use of the keyring_udf
plugin and deletes the key from the in-memory hash map and the Vault server.
You cannot delete system keys, such as the master key.

This plugin supports the SQL interface for keyring key management described in
`General-Purpose Keyring Key-Management Functions
<https://dev.mysql.com/doc/refman/8.0/en/keyring-udfs-general-purpose.html>`_
manual.

The plugin library contains keyring user-defined functions (UDFs) which allow
access to the internal keyring service functions. To enable the functions you
must enable the ``keyring_udf`` plugin:

.. code-block:: MySQL

    mysql> INSTALL PLUGIN keyring_udf SONAME 'keyring_udf.so';

.. note::

    The ``keyring_udf`` plugin must be installed. Any attempt to use a UDF
    without the ``keyring_udf`` plugin generates an error.


System Variables
--------------------

.. variable:: keyring_vault_config

    :cli: ``--keyring-vault-config``
    :dyn: Yes
    :scope: Global
    :vartype: Text
    :default:

This variable is used to define the location of the :ref:`keyring_vault_plugin`
configuration file.

.. variable:: keyring_vault_timeout

  :cli: ``--keyring-vault-timeout``
  :dyn: Yes
  :scope: Global
  :vartype: Numeric
  :default: ``15``

Set the duration in seconds for the Vault server connection timeout. The
default value is ``15``. The allowed range is from ``0`` to ``86400``. The
timeout can be also disabled to wait an infinite amount of time by setting
this variable to ``0``.


