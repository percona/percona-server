SET expand_fast_index_creation=ON;
CREATE TABLE idx (a INT PRIMARY KEY);
CREATE TABLE t (a INT PRIMARY KEY AUTO_INCREMENT, b FLOAT, c VARCHAR(15), d VARCHAR(17), z VARCHAR(2)) ENGINE=InnoDB;
INSERT INTO t (b) VALUES (RAND());
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
INSERT INTO t (b) SELECT RAND() FROM t;
ALTER TABLE t ADD KEY k1(b), ADD KEY k2(a,b), ADD KEY k3(a,b,d), ADD UNIQUE KEY k4(a,c,d);
INSERT INTO idx (a) SELECT i.INDEX_ID FROM
INFORMATION_SCHEMA.INNODB_INDEXES i,
INFORMATION_SCHEMA.INNODB_TABLES t
WHERE
t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID;
SELECT i.NAME, i.TYPE, i.N_FIELDS, f.NAME, f.POS FROM
INFORMATION_SCHEMA.INNODB_FIELDS f,
INFORMATION_SCHEMA.INNODB_INDEXES i,
INFORMATION_SCHEMA.INNODB_TABLES t
WHERE
t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID AND
f.INDEX_ID = i.INDEX_ID
ORDER BY
i.NAME, f.NAME;
NAME	TYPE	N_FIELDS	NAME	POS
k1	0	2	b	0
k2	0	2	a	0
k2	0	2	b	1
k3	0	3	a	0
k3	0	3	b	1
k3	0	3	d	2
k4	2	3	a	0
k4	2	3	c	1
k4	2	3	d	2
PRIMARY	3	7	a	0
TRUNCATE TABLE performance_schema.events_stages_history_long;
ALTER TABLE t MODIFY COLUMN z VARCHAR(1);
SELECT COUNT(*)
FROM performance_schema.events_stages_history_long e,
performance_schema.threads t
WHERE
e.EVENT_NAME = 'stage/sql/restoring secondary keys' AND
e.THREAD_ID = t.THREAD_ID AND 
t.PROCESSLIST_ID = CONNECTION_ID();
COUNT(*)
1
INSERT INTO idx (a) SELECT i.INDEX_ID FROM
INFORMATION_SCHEMA.INNODB_INDEXES i,
INFORMATION_SCHEMA.INNODB_TABLES t
WHERE
t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID;
SELECT i.NAME, i.TYPE, i.N_FIELDS, f.NAME, f.POS FROM
INFORMATION_SCHEMA.INNODB_FIELDS f,
INFORMATION_SCHEMA.INNODB_INDEXES i,
INFORMATION_SCHEMA.INNODB_TABLES t
WHERE
t.NAME = 'test/t' AND i.TABLE_ID = t.TABLE_ID AND
f.INDEX_ID = i.INDEX_ID
ORDER BY
i.NAME, f.NAME;
NAME	TYPE	N_FIELDS	NAME	POS
k1	0	2	b	0
k2	0	2	a	0
k2	0	2	b	1
k3	0	3	a	0
k3	0	3	b	1
k3	0	3	d	2
k4	2	3	a	0
k4	2	3	c	1
k4	2	3	d	2
PRIMARY	3	7	a	0
SELECT COUNT(DISTINCT a) FROM idx;
COUNT(DISTINCT a)
10
DROP TABLE idx;
DROP TABLE t;
CREATE TABLE t1(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
a CHAR(1) NOT NULL,
b CHAR(36) NOT NULL) ENGINE=InnoDB;
INSERT INTO t1(a,b) VALUES ('a','b');
INSERT INTO t1(a,b) SELECT a,b FROM t1;
INSERT INTO t1(a,b) SELECT a,b FROM t1;
INSERT INTO t1(a,b) SELECT a,b FROM t1;
INSERT INTO t1(a,b) SELECT a,b FROM t1;
ALTER TABLE t1 ADD KEY (a);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
EXPLAIN SELECT COUNT(*) FROM t1, t1 t2 WHERE t1.a = t2.a AND t1.b = t2.b;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	a	NULL	NULL	NULL	#	100.00	NULL
1	SIMPLE	t2	NULL	ALL	a	NULL	NULL	NULL	#	10.00	Using where; Using join buffer (Block Nested Loop)
Warnings:
Note	1003	/* select#1 */ select count(0) AS `COUNT(*)` from `test`.`t1` join `test`.`t1` `t2` where ((`test`.`t2`.`b` = `test`.`t1`.`b`) and (`test`.`t2`.`a` = `test`.`t1`.`a`))
ALTER TABLE t1 DROP KEY a;
SET expand_fast_index_creation = 1;
SELECT @@expand_fast_index_creation;
@@expand_fast_index_creation
1
ALTER TABLE t1 ADD KEY (a);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
EXPLAIN SELECT COUNT(*) FROM t1, t1 t2 WHERE t1.a = t2.a AND t1.b = t2.b;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	a	NULL	NULL	NULL	#	100.00	NULL
1	SIMPLE	t2	NULL	ALL	a	NULL	NULL	NULL	#	10.00	Using where; Using join buffer (Block Nested Loop)
Warnings:
Note	1003	/* select#1 */ select count(0) AS `COUNT(*)` from `test`.`t1` join `test`.`t1` `t2` where ((`test`.`t2`.`b` = `test`.`t1`.`b`) and (`test`.`t2`.`a` = `test`.`t1`.`a`))
SET expand_fast_index_creation = 0;
DROP TABLE t1;
# Check expanded fast index creation with partitions
SET SESSION expand_fast_index_creation=ON;
CREATE TABLE t1(a int,b CHAR (1),KEY (b)) PARTITION BY HASH (a) PARTITIONS 2;
ALTER TABLE t1 ADD COLUMN c BLOB, ALGORITHM=COPY;
DROP TABLE t1;
# Check expanded fast index creation with temporary tables
CREATE TEMPORARY TABLE t1(a INT, b INT, c INT, d INT, PRIMARY KEY(a), KEY k1(b), KEY k2 (c,d));
INSERT INTO t1 VALUES(1, 2, 3, 4);
INSERT INTO t1 VALUES(2, 3, 4, 5);
ALTER TABLE t1 ROW_FORMAT=COMPACT, ALGORITHM=COPY;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TEMPORARY TABLE `t1` (
  `a` int NOT NULL,
  `b` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  `d` int DEFAULT NULL,
  PRIMARY KEY (`a`),
  KEY `k1` (`b`),
  KEY `k2` (`c`,`d`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=COMPACT
DROP TABLE t1;
CREATE TEMPORARY TABLE t1(id int auto_increment key,a int,index(a));
ALTER TABLE t1 MODIFY COLUMN a ENUM('','a6','a7','a8','a9','a10');
DROP TABLE t1;
#
# PS-5043: Assertion failure: handler0alter.cc:3703:table->has_instant_cols()
#
CREATE TABLE t1(c1 CHAR (1));
ALTER TABLE t1 ADD COLUMN c2 INT;
ALTER TABLE t1 CHANGE c1 c1 BLOB;
ALTER TABLE t1 ADD INDEX(c1(1));
ALTER TABLE t1 ADD c4 BLOB AFTER c2;
ALTER TABLE t1 CHANGE c1 c1 NUMERIC;
DROP TABLE t1;
CREATE TABLE t1(c1 INT UNSIGNED);
ALTER TABLE t1 ADD c4 TIMESTAMP;
ALTER TABLE t1 CHANGE c1 c1 INT SIGNED,ADD KEY(c1);
DROP TABLE t1;
#
# PS-6903: CREATE TEMPORARY TABLE crashes with expand_fast index creation
#
CREATE TEMPORARY TABLE t1 LIKE information_schema.processlist;
#
# PS-6922: Running ALTER TABLE with with expand_fast_index_creation enabled can lead to a crash
#
# Below queries would crash the server. Check that they work OK now.
ALTER TABLE mysql.db ORDER BY db DESC;
Warnings:
Warning	1105	ORDER BY ignored as there is a user-defined clustered index in the table 'db'
1
ALTER TABLE mysql.tables_priv MODIFY User CHAR DEFAULT'',MODIFY gRANTOR CHAR DEFAULT'';
ERROR 01000: Data truncated for column 'User' at row 1
CREATE TABLE t_part
(a int,
b int,
c varchar(64),
KEY (a),
KEY (b),
KEY (c,b))
ENGINE = InnoDB
ENCRYPTION='N'
PARTITION BY HASH (a) PARTITIONS 5;
ALTER TABLE t_part ORDER BY a DESC;
CREATE TABLE t2_part
(a int,
b int,
c varchar(64),
KEY (a),
KEY (b),
KEY (c,b))
ENGINE = InnoDB
PARTITION BY HASH (a) PARTITIONS 5;
ALTER TABLE t2_part ENCRYPTION='N', ORDER BY a DESC;
DROP TABLE t_part,t2_part;
SET SESSION expand_fast_index_creation=OFF;
