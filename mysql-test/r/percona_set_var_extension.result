Creating auxiliary 'test_hint' SP which returns variable value before hint, with hint and after hint applying
#####################################
# Test SET_VAR hint myisam variables
#####################################
CALL test_hint("SET_VAR(myisam_sort_buffer_size=800000)", "myisam_sort_buffer_size");
hint_str
SET_VAR(myisam_sort_buffer_size=800000)
@before_val	@hint_val	@after_val
8388608	800000	8388608
SET myisam_sort_buffer_size=400000;
CALL test_hint("SET_VAR(myisam_sort_buffer_size=900000)", "myisam_sort_buffer_size");
hint_str
SET_VAR(myisam_sort_buffer_size=900000)
@before_val	@hint_val	@after_val
400000	900000	400000
SET myisam_sort_buffer_size=default;
###################################################
# Test SET_VAR hint optimize table for myisam table
###################################################
CREATE TABLE t1 (v1 INT, v2 INT) ENGINE=MyISAM;
INSERT INTO t1 VALUES (1,2);
INSERT INTO t1 VALUES (3,4);
OPTIMIZE /*+ SET_VAR(myisam_sort_buffer_size=700000) */  TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	status	OK
##############################################
# Test with invalid values to myisam variables
##############################################
OPTIMIZE /*+ SET_VAR(myisam_sort_buffer_size=abc) */  TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	Warning	Incorrect argument type to variable 'myisam_sort_buffer_size'
test.t1	optimize	status	Table is already up to date
DROP TABLE t1;
#################################################
# Test SET_VAR hint with InnoDB session variables
#################################################
CALL test_hint("SET_VAR(innodb_lock_wait_timeout=800)", "innodb_lock_wait_timeout");
hint_str
SET_VAR(innodb_lock_wait_timeout=800)
@before_val	@hint_val	@after_val
50	800	50
SET innodb_lock_wait_timeout=200;
CALL test_hint("SET_VAR(innodb_lock_wait_timeout=600)", "innodb_lock_wait_timeout");
hint_str
SET_VAR(innodb_lock_wait_timeout=600)
@before_val	@hint_val	@after_val
200	600	200
SET innodb_lock_wait_timeout=default;
#############################################
# Test SET_VAR hint ALTER TABLE innodb_tmpdir
#############################################
CREATE TABLE t1(a TEXT, b TEXT, FULLTEXT(a,b))ENGINE=INNODB;
INSERT INTO t1 VALUES('test1', 'test2');
INSERT INTO t1 VALUES('text1', 'text2');
ALTER /*+ SET_VAR(innodb_tmpdir="ALTER_DIR") */ TABLE t1 ADD FULLTEXT(b);;
ALTER /*+ SET_VAR(innodb_tmpdir=INVALID_DIR) */ TABLE t1 ADD INDEX(b(20));
Warnings:
Warning	1210	InnoDB: Path doesn't exist.
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` text,
  `b` text,
  KEY `b_2` (`b`(20)),
  FULLTEXT KEY `a` (`a`,`b`),
  FULLTEXT KEY `b` (`b`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
DROP TABLE t1;
#############################################
# Test SET_VAR with innodb_lock_wait_timeout
#############################################
CREATE TABLE t1(a INT PRIMARY KEY)ENGINE=INNODB;
BEGIN;
INSERT INTO t1 VALUES(1),(2),(3);
SET innodb_lock_wait_timeout=10000;
SELECT @@innodb_lock_wait_timeout;
@@innodb_lock_wait_timeout
10000
SELECT /*+ SET_VAR(innodb_lock_wait_timeout=1) */ * FROM t1 FOR UPDATE;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
COMMIT;
SELECT /*+ SET_VAR(innodb_lock_wait_timeout="abc") */ * FROM t1 FOR UPDATE;
a
1
2
3
Warnings:
Warning	1232	Incorrect argument type to variable 'innodb_lock_wait_timeout'
DROP TABLE t1;
###########################################################
# Test SET_VAR hint with stored procedure (CALL statement)
###########################################################
# check without hints
CALL p1();
@@myisam_sort_buffer_size	@@sort_buffer_size	@@max_join_size	@@innodb_lock_wait_timeout
8388608	262144	18446744073709551615	50
# check with hints
CALL /*+ SET_VAR(myisam_sort_buffer_size=16777216) SET_VAR(sort_buffer_size=524288) SET_VAR(max_join_size=461461461) SET_VAR(innodb_lock_wait_timeout=99) */ p1();
@@myisam_sort_buffer_size	@@sort_buffer_size	@@max_join_size	@@innodb_lock_wait_timeout
16777216	524288	461461461	99
# some with invalid values
CALL /*+ SET_VAR(myisam_sort_buffer_size=a216) SET_VAR(sort_buffer_size=524288b) SET_VAR(max_join_size=461461461) SET_VAR(innodb_lock_wait_timeout=99) */ p1();
@@myisam_sort_buffer_size	@@sort_buffer_size	@@max_join_size	@@innodb_lock_wait_timeout
8388608	262144	461461461	99
Warnings:
Warning	1232	Incorrect argument type to variable 'myisam_sort_buffer_size'
Warning	1232	Incorrect argument type to variable 'sort_buffer_size'
DROP PROCEDURE p1;
###########################################################
# Test SET_VAR hint with stored procedure (CALL statement)
# and with the same hint at statement in stored procedure
# The hint at statement should have higher preference to the
# hint at CALL statement
###########################################################

# test without hints to CALL statement

CALL p1();
hint_str
SET_VAR(myisam_sort_buffer_size=600000)
@before_val	@hint_val	@after_val
8388608	600000	8388608
hint_str
SET_VAR(sort_buffer_size=420000)
@before_val	@hint_val	@after_val
262144	420000	262144
hint_str
SET_VAR(max_join_size=200200200)
@before_val	@hint_val	@after_val
18446744073709551615	200200200	18446744073709551615
hint_str
SET_VAR(innodb_lock_wait_timeout=299)
@before_val	@hint_val	@after_val
50	299	50
hint_str
SET_VAR(innodb_lock_wait_timeout=299)
@before_val	@hint_val	@after_val
499	299	499

# test with hints to CALL statement

CALL /*+ SET_VAR(myisam_sort_buffer_size=16777216) SET_VAR(sort_buffer_size=524288) SET_VAR(max_join_size=461461461) SET_VAR(innodb_lock_wait_timeout=99) */ p1();
hint_str
SET_VAR(myisam_sort_buffer_size=600000)
@before_val	@hint_val	@after_val
16777216	600000	16777216
hint_str
SET_VAR(sort_buffer_size=420000)
@before_val	@hint_val	@after_val
524288	420000	524288
hint_str
SET_VAR(max_join_size=200200200)
@before_val	@hint_val	@after_val
461461461	200200200	461461461
hint_str
SET_VAR(innodb_lock_wait_timeout=299)
@before_val	@hint_val	@after_val
99	299	99
hint_str
SET_VAR(innodb_lock_wait_timeout=299)
@before_val	@hint_val	@after_val
499	299	499
DROP PROCEDURE p1;
#######################################
#Test SET_VAR with block_encryption_mode
########################################
CALL test_hint("SET_VAR(block_encryption_mode=\"aes-256-ecb\")", "block_encryption_mode");
hint_str
SET_VAR(block_encryption_mode="aes-256-ecb")
@before_val	@hint_val	@after_val
aes-128-ecb	aes-256-ecb	aes-128-ecb
CREATE TABLE aes_ecb(a VARBINARY(16), b128 CHAR(16), b192 CHAR(16), b256 CHAR(16)) charset latin1;
INSERT INTO aes_ecb (a) VALUES ('a'), ('Жоро'), (REPEAT('a', 10));
UPDATE /*+ SET_VAR(block_encryption_mode='aes-128-ecb') */ aes_ecb SET b128 = AES_ENCRYPT(a, 'a');
UPDATE /*+ SET_VAR(block_encryption_mode='aes-192-ecb') */ aes_ecb SET b192 = AES_ENCRYPT(a, 'a');
UPDATE /*+ SET_VAR(block_encryption_mode='aes-256-ecb') */ aes_ecb SET b256 = AES_ENCRYPT(a, 'a');
# must return 0
SELECT COUNT(*) FROM aes_ecb WHERE b128 = b192 OR B192 = b256 OR b128=b256;
COUNT(*)
0
# must return 3
SELECT /*+ SET_VAR(block_encryption_mode='aes-256-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b256, 'a');
COUNT(*)
3
# must return 0
SELECT /*+ SET_VAR(block_encryption_mode='aes-256-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b256, 'b');
COUNT(*)
0
# must return 3
SELECT /*+ SET_VAR(block_encryption_mode='aes-192-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b192, 'a');
COUNT(*)
3
# must return 0
SELECT /*+ SET_VAR(block_encryption_mode='aes-192-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b192, 'b');
COUNT(*)
0
# must return 3
SELECT /*+ SET_VAR(block_encryption_mode='aes-128-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b128, 'a');
COUNT(*)
3
# must return 0
SELECT /*+ SET_VAR(block_encryption_mode='aes-128-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b128, 'b');
COUNT(*)
0
DROP TABLE aes_ecb;
#####################################################
# Test SET_VAR with histogram_generation_max_mem_size
#####################################################
CALL test_hint("SET_VAR(histogram_generation_max_mem_size=1000000)", "histogram_generation_max_mem_size");
hint_str
SET_VAR(histogram_generation_max_mem_size=1000000)
@before_val	@hint_val	@after_val
20000000	1000000	20000000
CREATE TABLE t1 (col1 VARCHAR(255));
# Insert 10000 rows into the table t1 with random string data
INSERT INTO t1 (col1)
WITH RECURSIVE cte (n, val) AS
(
SELECT 1, CONCAT(MD5(RAND()), MD5(RAND()))
UNION ALL
SELECT n + 1, CONCAT(MD5(RAND()), MD5(RAND())) FROM cte WHERE n < 10000
)
SELECT /*+ SET_VAR(cte_max_recursion_depth=10000) */ val FROM cte;
# Set the amount of available memory as low as possible, so we are sure
# that sampling will be used.
ANALYZE /*+ SET_VAR(histogram_generation_max_mem_size=1000000) */ TABLE t1 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;
Table	Op	Msg_type	Msg_text
test.t1	histogram	status	Histogram statistics created for column 'col1'.
SELECT
histogram->>'$."sampling-rate"' < 1.0 AS should_be_true
FROM
INFORMATION_SCHEMA.COLUMN_STATISTICS;
should_be_true
1
DROP TABLE t1;
########################################
# Test SET_VAR with myisam_stats_method
########################################
CALL test_hint("SET_VAR(myisam_stats_method=nulls_equal)", "myisam_stats_method");
hint_str
SET_VAR(myisam_stats_method=nulls_equal)
@before_val	@hint_val	@after_val
nulls_unequal	nulls_equal	nulls_unequal
CREATE TABLE t1 (a INT, KEY(a)) ENGINE=MYISAM;
INSERT INTO t1 VALUES (0),(1),(2),(3),(4);
INSERT INTO t1 SELECT NULL FROM t1;
# default: NULLs considered inequal
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	10	NULL	NULL	YES	BTREE			YES	NULL
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;
CHECK TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	Table is already up to date
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	10	NULL	NULL	YES	BTREE			YES	NULL
# Set nulls to be equal
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_equal) */ TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	5	NULL	NULL	YES	BTREE			YES	NULL
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;
CHECK /*+ SET_VAR(myisam_stats_method=nulls_equal) */ TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_equal) */ TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	Table is already up to date
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	5	NULL	NULL	YES	BTREE			YES	NULL
# Set nulls back to be unequal
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_unequal) */ TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	10	NULL	NULL	YES	BTREE			YES	NULL
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;
CHECK TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_unequal) */ TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	Table is already up to date
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	10	NULL	NULL	YES	BTREE			YES	NULL
DROP TABLE t1;
# Set nulls to nulls_ignored
CREATE TABLE t1 (
a CHAR(3), b CHAR(4), c CHAR(5), d CHAR(6),
KEY(a,b,c,d)
) ENGINE=MyISAM;
INSERT INTO t1 VALUES ('bcd','def1', NULL, 'zz');
INSERT INTO t1 VALUES ('bcd','def2', NULL, 'zz');
INSERT INTO t1 VALUES ('bce','def1', 'yuu', NULL);
INSERT INTO t1 VALUES ('bce','def2', NULL, 'quux');
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_ignored) */ TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	2	NULL	NULL	YES	BTREE			YES	NULL
t1	1	a	2	b	A	4	NULL	NULL	YES	BTREE			YES	NULL
t1	1	a	3	c	A	4	NULL	NULL	YES	BTREE			YES	NULL
t1	1	a	4	d	A	4	NULL	NULL	YES	BTREE			YES	NULL
DELETE FROM t1;
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_ignored) */ TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	a	1	a	A	0	NULL	NULL	YES	BTREE			YES	NULL
t1	1	a	2	b	A	0	NULL	NULL	YES	BTREE			YES	NULL
t1	1	a	3	c	A	0	NULL	NULL	YES	BTREE			YES	NULL
t1	1	a	4	d	A	0	NULL	NULL	YES	BTREE			YES	NULL
DROP TABLE t1;
########################################
# Test SET_VAR with preload_buffer_size
########################################
CALL test_hint("SET_VAR(preload_buffer_size=1024)", "preload_buffer_size");
hint_str
SET_VAR(preload_buffer_size=1024)
@before_val	@hint_val	@after_val
32768	1024	32768
CREATE TABLE t1 (
a INT NOT NULL AUTO_INCREMENT,
b CHAR(16) NOT NULL,
PRIMARY KEY (a),
KEY (b)
) ENGINE=MYISAM;
CREATE TABLE t2(
a INT NOT NULL AUTO_INCREMENT,
b CHAR(16) NOT NULL,
PRIMARY KEY (a),
KEY (b)
) ENGINE=MYISAM;
INSERT INTO t1(b) VALUES
('test0'),
('test1'),
('test2'),
('test3'),
('test4'),
('test5'),
('test6'),
('test7');
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
SELECT COUNT(*) FROM t1;
COUNT(*)
33448
SELECT COUNT(*) FROM t2;
COUNT(*)
20672
FLUSH TABLES;
FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	0
Key_reads	0
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
COUNT(*)
4181
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	294
Key_reads	60
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
COUNT(*)
4181
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	588
Key_reads	60
FLUSH TABLES;
FLUSH STATUS;
select @@preload_buffer_size;
@@preload_buffer_size
32768
LOAD INDEX INTO CACHE t1;
Table	Op	Msg_type	Msg_text
test.t1	preload_keys	status	OK
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	774
Key_reads	774
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
COUNT(*)
4181
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	1068
Key_reads	774
FLUSH TABLES;
FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	0
Key_reads	0
LOAD /*+ SET_VAR(preload_buffer_size=262144) */ INDEX INTO CACHE t1 IGNORE LEAVES;
Table	Op	Msg_type	Msg_text
test.t1	preload_keys	status	OK
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	17
Key_reads	17
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
COUNT(*)
4181
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	311
Key_reads	75
FLUSH TABLES;
FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	0
Key_reads	0
LOAD /*+ SET_VAR(preload_buffer_size=1024) */ INDEX INTO CACHE t1, t2 KEY (primary,b) IGNORE LEAVES;
Table	Op	Msg_type	Msg_text
test.t1	preload_keys	status	OK
test.t2	preload_keys	status	OK
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	785
Key_reads	785
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
COUNT(*)
4181
SELECT COUNT(*) FROM t2 WHERE b = 'test1';
COUNT(*)
2584
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	1266
Key_reads	821
FLUSH TABLES;
FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	0
Key_reads	0
LOAD /*+ SET_VAR(preload_buffer_size=1024) */ INDEX INTO CACHE t3, t2 KEY (primary,b) ;
Table	Op	Msg_type	Msg_text
test.t3	preload_keys	Error	Table 'test.t3' doesn't exist
test.t3	preload_keys	status	Operation failed
test.t2	preload_keys	status	OK
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	478
Key_reads	478
FLUSH TABLES;
FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	0
Key_reads	0
LOAD /*+ SET_VAR(preload_buffer_size=1024) */ INDEX INTO CACHE t3 KEY (b), t2 KEY (c) ;
Table	Op	Msg_type	Msg_text
test.t3	preload_keys	Error	Table 'test.t3' doesn't exist
test.t3	preload_keys	status	Operation failed
test.t2	preload_keys	Error	Key 'c' doesn't exist in table 't2'
test.t2	preload_keys	status	Operation failed
SHOW STATUS LIKE "key_read%";
Variable_name	Value
Key_read_requests	0
Key_reads	0
DROP TABLE t1, t2;
#################################################
# Test SET_VAR with innodb_ft_user_stopword_table
#################################################
CREATE TABLE user_stopword_session(value VARCHAR(30)) ENGINE = INNODB;
CALL test_hint("SET_VAR(innodb_ft_user_stopword_table=\"test/user_stopword_session\")", "innodb_ft_user_stopword_table");
hint_str
SET_VAR(innodb_ft_user_stopword_table="test/user_stopword_session")
@before_val	@hint_val	@after_val
	test/user_stopword_session	
INSERT INTO user_stopword_session VALUES("session");
CREATE /*+ SET_VAR(innodb_ft_user_stopword_table="test/user_stopword_session") */ TABLE articles_4 (
id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
title VARCHAR(200),
body TEXT,
FULLTEXT (title,body)
) ENGINE=InnoDB;
INSERT INTO articles_4 (title, body)
VALUES ('test for session stopwords','this should also be excluded...');
# "session" is excluded
SELECT * FROM articles_4 WHERE MATCH (title,body)
AGAINST ('session' IN NATURAL LANGUAGE MODE);
id	title	body
# But we can find record with "this"
SELECT * FROM articles_4 WHERE MATCH (title,body)
AGAINST ('this' IN NATURAL LANGUAGE MODE);
id	title	body
1	test for session stopwords	this should also be excluded...
DROP TABLE articles_4;
#
# Now enable stopword with ALTER (first without SET_VAR, then ALTER
# with SET_VAR
#
CREATE  TABLE articles_4 (
id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
title VARCHAR(200),
body TEXT,
FULLTEXT (title,body)
) ENGINE=InnoDB;
INSERT INTO articles_4 (title, body)
VALUES ('test for session stopwords','this should also be excluded...');
# "session" is NOT excluded
SELECT * FROM articles_4 WHERE MATCH (title,body)
AGAINST ('session' IN NATURAL LANGUAGE MODE);
id	title	body
1	test for session stopwords	this should also be excluded...
# and we cannot find record with "this"
SELECT * FROM articles_4 WHERE MATCH (title,body)
AGAINST ('this' IN NATURAL LANGUAGE MODE);
id	title	body
ALTER /*+ SET_VAR(innodb_ft_user_stopword_table="test/user_stopword_session") */ TABLE articles_4 ALGORITHM=COPY;
# "session" is excluded
SELECT * FROM articles_4 WHERE MATCH (title,body)
AGAINST ('session' IN NATURAL LANGUAGE MODE);
id	title	body
# But we can find record with "this"
SELECT * FROM articles_4 WHERE MATCH (title,body)
AGAINST ('this' IN NATURAL LANGUAGE MODE);
id	title	body
1	test for session stopwords	this should also be excluded...
DROP TABLE articles_4;
DROP TABLE user_stopword_session;
DROP PROCEDURE test_hint;
