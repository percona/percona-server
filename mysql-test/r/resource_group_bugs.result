#
# Bug#28122841 - CREATE EVENT/PROCEDURE/FUNCTION CRASHES WITH ACCENT INSENSITIVE NAMES.
#                (This issue is observed with Resource groups too.)
#
SET NAMES utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
#
# Test case to verify Resource group with case and accent insensitive names.
#
CREATE RESOURCE GROUP café TYPE=USER VCPU=1-3 THREAD_PRIORITY=5;
# Resource group names are case and accent insensitive. So from the
# data-dictionary "cafe" is obtained for the following statement. Since
# MDL key comparison is case and accent sensitive, assert condition to verify
# expected lock with name "test.cafe" fails (lock is obtained on the
# test.café).
CREATE RESOURCE GROUP cafe TYPE=USER VCPU=1-3 THREAD_PRIORITY=5;
ERROR HY000: Resource Group 'cafe' exists
# Following statement is to verify operation with the upper case name.
CREATE RESOURCE GROUP CAFE TYPE=USER VCPU=1-3 THREAD_PRIORITY=5;
ERROR HY000: Resource Group 'CAFE' exists
DROP RESOURCE GROUP CaFé;
SET NAMES default;
#
# PS-8871 : RESOURCE GROUP hint fails when used within a prepared statement
#
CREATE RESOURCE GROUP r1 TYPE=USER VCPU=0,1;
CREATE RESOURCE GROUP r2 TYPE=USER VCPU=2,3;
# The below query sees itself as executed in 'r1' resource group
# in the P_S.THREADS table.
SELECT /*+ RESOURCE_GROUP(r1) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id();
processlist_info	resource_group
SELECT /*+ RESOURCE_GROUP(r1) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	r1
# Make prepared statement from the same query.
PREPARE stmt1 FROM 'SELECT /*+ RESOURCE_GROUP(r1) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()';
# Execution of prepared statement should use 'r1' resource group
# as well (it didn't before the fix).
EXECUTE stmt1;
processlist_info	resource_group
SELECT /*+ RESOURCE_GROUP(r1) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	r1
# Check that hint applies in case of re-execution.
EXECUTE stmt1;
processlist_info	resource_group
SELECT /*+ RESOURCE_GROUP(r1) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	r1
# Check that further statements in the connection are not affected.
SELECT processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id();
processlist_info	resource_group
SELECT processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	USR_default
# Now let us check that we can have several prepared statements using
# different resource groups within the same connection.
PREPARE stmt2 FROM 'SELECT /*+ RESOURCE_GROUP(r2) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()';
PREPARE stmt3 FROM 'SELECT processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()';
# The first statement should still use 'r1',
EXECUTE stmt1;
processlist_info	resource_group
SELECT /*+ RESOURCE_GROUP(r1) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	r1
# The second statement should use 'r2',
EXECUTE stmt2;
processlist_info	resource_group
SELECT /*+ RESOURCE_GROUP(r2) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	r2
# The third one should used default group.
EXECUTE stmt3;
processlist_info	resource_group
SELECT processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	USR_default
# Ditto for case of re-execution.
EXECUTE stmt1;
processlist_info	resource_group
SELECT /*+ RESOURCE_GROUP(r1) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	r1
EXECUTE stmt2;
processlist_info	resource_group
SELECT /*+ RESOURCE_GROUP(r2) */ processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	r2
EXECUTE stmt3;
processlist_info	resource_group
SELECT processlist_info, resource_group FROM performance_schema.threads WHERE processlist_id = connection_id()	USR_default
# Clean-up.
DEALLOCATE PREPARE stmt1;
DEALLOCATE PREPARE stmt2;
DEALLOCATE PREPARE stmt3;
DROP RESOURCE GROUP r1;
DROP RESOURCE GROUP r2;
