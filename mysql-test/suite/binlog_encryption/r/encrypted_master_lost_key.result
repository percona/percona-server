call mtr.add_suppression('event read from binlog did not pass crc check');
call mtr.add_suppression('Event crc check failed! Most likely there is event corruption');
call mtr.add_suppression("Error reading GTIDs from binary log");
call mtr.add_suppression('Found invalid event in binary log');
#################
# Initialization
#################
include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
call mtr.add_suppression('event read from binlog did not pass crc check');
#####################################################
# Pre-test 1: Initial key value
#####################################################
CREATE TABLE table1_to_encrypt (
pk INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP NULL,
b BLOB
);
INSERT INTO table1_to_encrypt VALUES (NULL,NOW(),'data_to_encrypt');
INSERT INTO table1_to_encrypt SELECT NULL,NOW(),b FROM table1_to_encrypt;
SET binlog_format=ROW;
INSERT INTO table1_to_encrypt SELECT NULL,NOW(),b FROM table1_to_encrypt;
INSERT INTO table1_to_encrypt SELECT NULL,NOW(),b FROM table1_to_encrypt;
NOT FOUND /table1_to_encrypt/ in master-bin.0*
################################################################
# Pre-test 2: restart master with a different keys' storage file
################################################################
UNINSTALL PLUGIN keyring_file;
include/rpl_restart_server.inc [server_number=1]
connection server_1;
connection master;
connection server_1;
connection default;
connection master;
connection master1;
connection server_1;
connection server_1_1;
connection default;
connection master;
connection master1;
connection server_1;
connection server_1_1;
connection server_1;
connection master;
connection master;
CREATE TABLE table2_to_encrypt (
pk INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP NULL,
b BLOB
);
INSERT INTO table2_to_encrypt VALUES (NULL,NOW(),'data_to_encrypt');
INSERT INTO table2_to_encrypt SELECT NULL,NOW(),b FROM table2_to_encrypt;
SET binlog_format=ROW;
INSERT INTO table2_to_encrypt SELECT NULL,NOW(),b FROM table2_to_encrypt;
INSERT INTO table2_to_encrypt SELECT NULL,NOW(),b FROM table2_to_encrypt;
# Make sure that binary logs are encrypted by making sure that plain text
# table name is not present in the binary log
NOT FOUND /table2_to_encrypt/ in master-bin.0*
UNINSTALL PLUGIN keyring_file;
#####################################################
# Pre-test 3: restart master again with the right key
#####################################################
include/rpl_restart_server.inc [server_number=1]
connection server_1;
connection master;
connection server_1;
connection default;
connection master;
connection master1;
connection server_1;
connection server_1_1;
connection default;
connection master;
connection master1;
connection server_1;
connection server_1_1;
connection server_1;
connection master;
connection master;
CREATE TABLE table3_to_encrypt (
pk INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP NULL,
b BLOB
);
INSERT INTO table3_to_encrypt VALUES (NULL,NOW(),'data_to_encrypt');
INSERT INTO table3_to_encrypt SELECT NULL,NOW(),b FROM table3_to_encrypt;
INSERT INTO table3_to_encrypt SELECT NULL,NOW(),b FROM table3_to_encrypt;
FLUSH BINARY LOGS;
INSERT INTO table3_to_encrypt SELECT NULL,NOW(),b FROM table3_to_encrypt;
include/save_master_pos.inc
connection master;
#####################################################
# Test 1: Check that if master has an encrypted
#         binary log which it cannot decrypt, it
#         still feeds events to the slave, and SQL
#         thread produces an expected error upon
#         receiving these unreadable events .
#         This behavior is confirmed in MDEV-11323
#####################################################
connection server_2;
START SLAVE SQL_THREAD;
START SLAVE IO_THREAD;
include/wait_for_slave_io_error.inc [errno=1236]
SHOW TABLES;
Tables_in_test
table1_to_encrypt
#####################################################
# Test 2: check that replication works if it starts
#         from a good binary log
#####################################################
connection server_2;
include/stop_slave.inc
RESET SLAVE ALL;
DROP DATABASE test;
CREATE DATABASE test;
USE test;
CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_PORT=<MASTER_PORT>, MASTER_USER='root', MASTER_LOG_FILE='master-bin.000003';
Warnings:
Warning	3023	CHANGE MASTER TO with a MASTER_LOG_FILE clause but no MASTER_LOG_POS clause may not be safe. The old position value may not be valid for the new binary log file.
Note	1759	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	1760	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
include/start_slave.inc
include/sync_slave_sql.inc
connection server_2;
SHOW TABLES;
Tables_in_test
table3_to_encrypt
#####################################################
# Test 3: check that replication works if we purge
#         master logs up to the good one
#####################################################
connection server_2;
connection server_1;
PURGE BINARY LOGS TO 'master-bin.000003';
connection server_2;
include/stop_slave.inc
RESET SLAVE ALL;
DROP DATABASE test;
CREATE DATABASE test;
USE test;
CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_PORT=<MASTER_PORT>, MASTER_USER='root';
Warnings:
Note	1759	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	1760	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
include/start_slave.inc
include/sync_slave_sql.inc
connection server_2;
SHOW TABLES;
Tables_in_test
table3_to_encrypt
##########
# Cleanup
##########
connection server_2;
# Recreate table_1_to_encrypt and table_2_to_encrypt on slave so the master-slave sync would
# finished OK.
CREATE TABLE table1_to_encrypt LIKE table3_to_encrypt;
CREATE TABLE table2_to_encrypt LIKE table3_to_encrypt;
connection server_1;
DROP TABLE table1_to_encrypt, table2_to_encrypt, table3_to_encrypt;
include/rpl_end.inc
