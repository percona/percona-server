--source include/have_component_audit_log.inc
--source ../inc/audit_tables_init.inc
--source ../inc/audit_comp_install.inc

CREATE TABLE t1 (c1 INT);
CREATE TABLE t2 (c2 INT);
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);

INSTALL COMPONENT "file://component_audit_api_message_emit";

CREATE USER 'user1'@'localhost' IDENTIFIED BY '111';
GRANT AUDIT_ADMIN ON *.* to 'user1'@'localhost';

CREATE USER 'user2'@'localhost' IDENTIFIED BY '222';
GRANT SYSTEM_USER ON *.* to 'user2'@'localhost';
GRANT AUDIT_ABORT_EXEMPT ON *.* to 'user2'@'localhost';

connect(conn1, localhost, user1, 111, test);
connect(conn2, localhost, user2, 222, test);

--connection conn1

--echo #
--echo # Check read-only access to a table
let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert", "update", "delete"],
        "abort": true
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('table_readonly', '$filter');
SELECT audit_log_filter_set_user('%', 'table_readonly');

--error ER_AUDIT_API_ABORT
INSERT INTO t1 VALUES (2);
--error ER_AUDIT_API_ABORT
INSERT INTO t2 VALUES (2);

--error ER_AUDIT_API_ABORT
UPDATE t1 SET c1 = 3 WHERE c1 = 2;
--error ER_AUDIT_API_ABORT
UPDATE t2 SET c2 = 3 WHERE c2 = 2;

--error ER_AUDIT_API_ABORT
DELETE FROM t1 WHERE c1 = 1;
--error ER_AUDIT_API_ABORT
DELETE FROM t2 WHERE c2 = 1;

SELECT * FROM t1;
SELECT * FROM t2;

SELECT audit_log_filter_remove_user('%');

--echo #
--echo # Abort access to a particular table
let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["read", "insert", "update", "delete"],
        "abort": {
          "and": [
            {"field": {"name": "table_database.str", "value": "test"}},
            {"field": {"name": "table_name.str", "value": "t1"}}
          ]
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('no_t1_access', '$filter');
SELECT audit_log_filter_set_user('%', 'no_t1_access');

--error ER_AUDIT_API_ABORT
INSERT INTO t1 VALUES (2);
INSERT INTO t2 VALUES (2);

--error ER_AUDIT_API_ABORT
UPDATE t1 SET c1 = 3 WHERE c1 = 2;
UPDATE t2 SET c2 = 3 WHERE c2 = 2;

--error ER_AUDIT_API_ABORT
DELETE FROM t1 WHERE c1 = 1;
DELETE FROM t2 WHERE c2 = 1;

--error ER_AUDIT_API_ABORT
SELECT * FROM t1;
SELECT * FROM t2;

--echo #
--echo # Check mysql_event_message events may be aborted
let $filter = {
  "filter": {
    "class": {
      "name": "message",
      "event": {
        "name": "user",
        "abort": true
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('abort_message', '$filter');
SELECT audit_log_filter_set_user('%', 'abort_message');
--error ER_AUDIT_API_ABORT
SELECT audit_api_message_emit_udf('component_text', 'producer_text', 'message_text', 'key', 'value') AS 'Message';

SELECT audit_log_filter_remove_user('%');

--echo #
--echo # Check user with AUDIT_ABORT_EXEMPT privilege is able to execute blocked statement
DELETE FROM t1;
DELETE FROM t2;

SELECT audit_log_filter_set_user('user2@localhost', 'no_t1_access');

--connection conn2

INSERT INTO t1 VALUES (2);
INSERT INTO t2 VALUES (2);

UPDATE t1 SET c1 = 3 WHERE c1 = 2;
UPDATE t2 SET c2 = 3 WHERE c2 = 2;

DELETE FROM t1 WHERE c1 = 1;
DELETE FROM t2 WHERE c2 = 1;

SELECT * FROM t1;
SELECT * FROM t2;

disconnect conn1;
disconnect conn2;
connection default;

--echo #
--echo # Cleanup
--source ../inc/audit_comp_uninstall.inc
--source ../inc/audit_tables_cleanup.inc

DROP TABLE t1;
DROP TABLE t2;

UNINSTALL COMPONENT "file://component_audit_api_message_emit";

DROP USER 'user1'@'localhost';
DROP USER 'user2'@'localhost';
