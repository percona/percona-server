--source include/have_component_audit_log.inc
--source include/have_debug.inc
--source ../inc/audit_tables_init.inc
--source ../inc/audit_comp_install.inc

--let $audit_filter_log_path = `SELECT @@global.datadir`
--let $audit_filter_log_name = `SELECT @@global.audit_log_filter.file`

SET GLOBAL DEBUG='+d,audit_log_filter_add_record_debug_info';
SET GLOBAL DEBUG='+d,audit_log_filter_rotate_after_audit_rules_flush';

--echo #
--echo # Filter events by one field
let $filter = {
  "filter": {
    "class": {
      "name": "general",
      "event": {
        "name": "status",
        "log": {
          "field": {"name": "general_host.str", "value": "localhost"}
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_general_query', '$filter');
SELECT audit_log_filter_set_user('%', 'log_general_query');
--source generate_audit_events.inc
--let $search_tag=<EVENT_CLASS_NAME>general</EVENT_CLASS_NAME>.*<HOST>localhost</HOST>
--source check_all_events_with_tag.inc

--echo #
--echo # Filter "connection" events by connection_type, check both by numeric value and using pseudo-constant
let $filter = {
  "filter": {
    "class": {
      "name": "connection",
      "event": {
        "name": "connect",
        "log": {
          "field": {"name": "connection_type", "value": "2"}
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_conn_type_by_numeric', '$filter');
SELECT audit_log_filter_set_user('%', 'log_conn_type_by_numeric');
--source generate_audit_events.inc
--let $search_tag=<CONNECTION_TYPE>Socket</CONNECTION_TYPE>
--source check_all_events_with_tag.inc

let $filter = {
  "filter": {
    "class": {
      "name": "connection",
      "event": {
        "name": "connect",
        "log": {
          "field": {"name": "connection_type", "value": "::socket"}
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_conn_type_by_pseudo', '$filter');
SELECT audit_log_filter_set_user('%', 'log_conn_type_by_pseudo');
--source generate_audit_events.inc
--let $search_tag=<CONNECTION_TYPE>Socket</CONNECTION_TYPE>
--source check_all_events_with_tag.inc

--echo #
--echo # Check 'or' logical operator in event field condition
let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": "insert",
        "log": {
          "or": [
            {"field": {"name": "table_name.str", "value": "t1"}},
            {"field": {"name": "table_name.str", "value": "t2"}}
          ]
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_table_access_or', '$filter');
SELECT audit_log_filter_set_user('%', 'log_table_access_or');
--source generate_audit_events.inc
--let $search_tag=[<EVENT_SUBCLASS_NAME>insert</EVENT_SUBCLASS_NAME>.*<TABLE>t1</TABLE>|<EVENT_SUBCLASS_NAME>insert</EVENT_SUBCLASS_NAME>.*<TABLE>t2</TABLE>]
--source check_all_events_with_tag.inc

--echo #
--echo # Check 'and' logical operator in event field condition
let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": "insert",
        "log": {
          "and": [
            {"field": {"name": "table_name.str", "value": "t1"}},
            {"field": {"name": "table_database.str", "value": "test"}}
          ]
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_table_access_and', '$filter');
SELECT audit_log_filter_set_user('%', 'log_table_access_and');
--source generate_audit_events.inc
--let $search_tag=<EVENT_SUBCLASS_NAME>insert</EVENT_SUBCLASS_NAME>.*<DB>test</DB>.*<TABLE>t1</TABLE>
--source check_all_events_with_tag.inc

--echo #
--echo # Check 'not' logical operator in event field condition
let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": "insert",
        "log": {
          "not": {
            "field": {"name": "table_name.str", "value": "t1"}
          }
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_table_access_not', '$filter');
SELECT audit_log_filter_set_user('%', 'log_table_access_not');
--source generate_audit_events.inc
--let $search_tag=[<EVENT_SUBCLASS_NAME>insert</EVENT_SUBCLASS_NAME>.*<TABLE>t2</TABLE>|<EVENT_SUBCLASS_NAME>insert</EVENT_SUBCLASS_NAME>.*<TABLE>t3</TABLE>]
--source check_all_events_with_tag.inc

--echo #
--echo # Check logical operatos combination in event field condition
let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": "insert",
        "log": {
          "or": [
            {
              "and": [
                {"field": {"name": "table_name.str", "value": "t1"}},
                {"field": {"name": "table_name.length", "value": "2"}}
              ]
            },
            {
              "not": {
                "and": [
                  {"field": {"name": "table_name.str", "value": "t2"}},
                  {"field": {"name": "table_name.length", "value": "2"}}
                ]
              }
            }
          ]
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_table_access_all', '$filter');
SELECT audit_log_filter_set_user('%', 'log_table_access_all');
--source generate_audit_events.inc
--let $search_tag=[<EVENT_SUBCLASS_NAME>insert</EVENT_SUBCLASS_NAME>.*<TABLE>t1</TABLE>|<EVENT_SUBCLASS_NAME>insert</EVENT_SUBCLASS_NAME>.*<TABLE>t3</TABLE>]
--source check_all_events_with_tag.inc

--echo #
--echo # Cleanup
SET GLOBAL DEBUG='-d,audit_log_filter_add_record_debug_info';
SET GLOBAL DEBUG='-d,audit_log_filter_rotate_after_audit_rules_flush';

--source ../inc/audit_comp_uninstall.inc
--source ../inc/audit_tables_cleanup.inc
