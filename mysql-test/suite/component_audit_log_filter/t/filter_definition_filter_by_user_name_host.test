--source include/have_component_audit_log.inc
--source ../inc/audit_tables_init.inc
--source ../inc/audit_comp_install.inc

--let $log_file_path = `SELECT @@global.datadir`
--let $log_file_name = `SELECT @@global.audit_log_filter.file`
--let $file_full_path = $log_file_path$log_file_name

--source clean_current_audit_log.inc

--echo #
--echo # Create filter used for testing
SELECT audit_log_filter_set_filter('log_all', '{"filter": {"log": true}}');

--let $assert_text = unexpected audit events in log
--let $assert_file = $file_full_path
--let $assert_select = AUDIT_RECORD
--let $assert_count = 0

--echo #
--echo # No filter assigned to a user, log should be empty
--source generate_audit_events.inc
--source include/assert_grep.inc

--echo #
--echo # Wrong user name, log should be empty
SELECT audit_log_filter_set_user('unknown@localhost', 'log_all');

--source generate_audit_events.inc
--source include/assert_grep.inc

--echo #
--echo # Wrong user host, log should be empty
SELECT audit_log_filter_set_user('root@unknown', 'log_all');

--source generate_audit_events.inc
--source include/assert_grep.inc

--echo #
--echo # Correct user and host name
SELECT audit_log_filter_set_user('root@localhost', 'log_all');

--source generate_audit_events.inc
--let $assert_count =
--let $assert_match = AUDIT_RECORD
--source include/assert_grep.inc

--echo #
--echo # Cleanup
--source ../inc/audit_comp_uninstall.inc
--source ../inc/audit_tables_cleanup.inc
