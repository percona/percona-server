--source include/have_component_audit_log.inc
--source include/have_debug.inc
--source ../inc/audit_tables_init.inc
--source ../inc/audit_comp_install.inc

--let $audit_filter_log_path = `SELECT @@global.datadir`
--let $audit_filter_log_name = `SELECT @@global.audit_log_filter.file`

SET GLOBAL DEBUG='+d,audit_log_filter_add_record_debug_info';
SET GLOBAL DEBUG='+d,audit_log_filter_rotate_after_audit_rules_flush';

--echo #
--echo # Filter definition in inclusive mode, logs only explicitly specified items
let $filter = {
  "filter": {
    "log": false,
    "class": [
      {
        "name": "connection",
        "event": {
          "name": "connect",
          "log": true
        }
      },
      {
        "name": "general",
        "log": true
      }
    ]
  }
};

eval SELECT audit_log_filter_set_filter('log_inclusive', '$filter');
SELECT audit_log_filter_set_user('%', 'log_inclusive');
--source generate_audit_events.inc
--let $search_tag=(?:<EVENT_CLASS_NAME>general</EVENT_CLASS_NAME>|<EVENT_SUBCLASS_NAME>connect</EVENT_SUBCLASS_NAME>)
--source check_all_events_with_tag.inc

--echo #
--echo # Exclusive logging, this filter logs everything except events in the general class
let $filter = {
  "filter": {
    "log": true,
    "class": {
      "name": "general",
      "log": false
    }
  }
};

eval SELECT audit_log_filter_set_filter('log_exclusive', '$filter');
SELECT audit_log_filter_set_user('%', 'log_exclusive');
--source generate_audit_events.inc
--let $search_tag=!<EVENT_CLASS_NAME>general</EVENT_CLASS_NAME>
--source check_all_events_with_tag.inc

--echo #
--echo # Cleanup
SET GLOBAL DEBUG='-d,audit_log_filter_add_record_debug_info';
SET GLOBAL DEBUG='-d,audit_log_filter_rotate_after_audit_rules_flush';

--source ../inc/audit_comp_uninstall.inc
--source ../inc/audit_tables_cleanup.inc
