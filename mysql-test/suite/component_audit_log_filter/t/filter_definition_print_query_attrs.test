--source include/have_component_audit_log.inc
--source ../inc/audit_tables_init.inc
--source ../inc/audit_comp_install.inc

--let $audit_filter_log_path = `SELECT @@global.datadir`
--let $audit_filter_log_name = `SELECT @@global.audit_log_filter.file`

CREATE TABLE t1 (id INT);

--echo #
--echo # Check query attributes logged for table_access events
let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert", "update", "read", "delete"],
        "print": {
          "query_attributes": {
            "tag": "query_attributes",
            "element": [
              {"name": "attr1"},
              {"name": "attr2"}
            ]
          }
        }
      }
    }
  }
};

eval SELECT audit_log_filter_set_filter('query_attrs', '$filter');
SELECT audit_log_filter_set_user('%', 'query_attrs');

--source clean_current_audit_log.inc

query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
INSERT INTO t1 VALUES (1);
query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
SELECT * FROM t1;
query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
UPDATE t1 SET id = 2 WHERE id = 1;
query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
DELETE FROM t1;

--let $audit_filter_log_format=json
--let $search_tag="query_attributes".*"attr1": "val1".*"attr2": "val2"
--source check_all_events_with_tag.inc

--let $search_tag=!"skipped_attr": "skipped_val"
--source check_all_events_with_tag.inc

--echo #
--echo # Check JSON structure correctness
let $filter = {
  "filter": {
    "class": [
      {
        "name": "table_access",
        "event": {
          "name": ["insert", "update", "read", "delete"],
          "print": {
            "query_attributes": {
              "tag": "query_attributes",
              "element": [
                {"name": "attr1"},
                {"name": "attr2"}
              ]
            }
          }
        }
      },
      {
        "name": "general",
        "event": {
          "name": ["log", "error", "result", "status"],
          "print": {
            "query_attributes": {
              "tag": "query_attributes",
              "element": [
                {"name": "attr2"}
              ]
            }
          }
        }
      }
    ]
  }
};

eval SELECT audit_log_filter_set_filter('query_attrs_access_general', '$filter');
SELECT audit_log_filter_set_user('%', 'query_attrs_access_general');

--source clean_current_audit_log.inc

query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
INSERT INTO t1 VALUES (1);
query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
SELECT * FROM t1;
query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
UPDATE t1 SET id = 2 WHERE id = 1;
query_attributes attr1 val1 attr2 val2 skipped_attr skipped_val;
DELETE FROM t1;

--replace_column 1 <file_name>
SELECT audit_log_rotate();

--let $audit_filter_log_format = json
--source validate_logs_format.inc

--echo #
--echo # Wrong format, missing "tag" or invalid format
--disable_query_log
call mtr.add_suppression("Component audit_log_filter reported: 'Wrong argument: incorrect rule definition");
call mtr.add_suppression("Component audit_log_filter reported: 'Wrong JSON filter 'query_attrs_no_tag' format");
call mtr.add_suppression("Component audit_log_filter reported: 'Wrong JSON filter 'query_attrs_bad_tag' format");
--enable_query_log

let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert"],
        "print": {
          "query_attributes": {
            "element": [
              {"name": "attr1"},
              {"name": "attr2"}
            ]
          }
        }
      }
    }
  }
};
eval SELECT audit_log_filter_set_filter('query_attrs_no_tag', '$filter');

let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert"],
        "print": {
          "query_attributes": {
            "tag": 4,
            "element": [
              {"name": "attr1"},
              {"name": "attr2"}
            ]
          }
        }
      }
    }
  }
};
eval SELECT audit_log_filter_set_filter('query_attrs_bad_tag', '$filter');

--echo #
--echo # Wrong format, missing "element" or invalid format
--disable_query_log
call mtr.add_suppression("Component audit_log_filter reported: 'Wrong JSON filter 'query_attrs_no_element' format");
call mtr.add_suppression("Component audit_log_filter reported: 'Wrong JSON filter 'query_attrs_element_empty' format");
call mtr.add_suppression("Component audit_log_filter reported: 'Wrong JSON filter 'query_attrs_element_not_arr' format");
call mtr.add_suppression("Component audit_log_filter reported: 'Wrong JSON filter 'query_attrs_element_bad_args' format");
--enable_query_log

let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert"],
        "print": {
          "query_attributes": {
            "tag": "query_attributes"
          }
        }
      }
    }
  }
};
eval SELECT audit_log_filter_set_filter('query_attrs_no_element', '$filter');

let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert"],
        "print": {
          "query_attributes": {
            "tag": "query_attributes",
            "element": {
              "name": "attr1",
              "name": "attr2"
            }
          }
        }
      }
    }
  }
};
eval SELECT audit_log_filter_set_filter('query_attrs_element_not_arr', '$filter');

let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert"],
        "print": {
          "query_attributes": {
            "tag": "query_attributes",
            "element": []
          }
        }
      }
    }
  }
};
eval SELECT audit_log_filter_set_filter('query_attrs_element_empty', '$filter');

let $filter = {
  "filter": {
    "class": {
      "name": "table_access",
      "event": {
        "name": ["insert"],
        "print": {
          "query_attributes": {
            "tag": "query_attributes",
            "element": [
              "attr1", "attr2"
            ]
          }
        }
      }
    }
  }
};
eval SELECT audit_log_filter_set_filter('query_attrs_element_bad_args', '$filter');

--echo #
--echo # Cleanup
DROP TABLE t1;

--source ../inc/audit_comp_uninstall.inc
--source ../inc/audit_tables_cleanup.inc
