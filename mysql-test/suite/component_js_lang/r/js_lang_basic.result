INSTALL COMPONENT 'file://component_js_lang';
GRANT CREATE_JS_ROUTINE ON *.* TO root@localhost;
#
# Some basic tests.
#
CREATE FUNCTION f1() RETURNS INT LANGUAGE JS AS $$ return 2*2 $$;
SELECT f1();
f1()
4
DROP FUNCTION f1;
CREATE FUNCTION fact(n INT) RETURNS INT LANGUAGE JS AS $$
let result = 1;
while (n > 1) {
result *= n;
n--;
}
return result;
$$|
SELECT fact(5);
fact(5)
120
DROP FUNCTION fact;
CREATE PROCEDURE p1(a INT, b INT, OUT r INT) LANGUAGE JS AS $$
r = a * b;
$$|
CALL p1(7, 11, @r);
SELECT @r;
@r
77
DROP PROCEDURE p1;
CREATE FUNCTION f2() RETURNS INT LANGUAGE JS AS $$ Syntax error ! $$;
ERROR HY000: SyntaxError: Unexpected identifier 'error'
CREATE PROCEDURE p2(OUT i INT, j INT, INOUT k INT) LANGUAGE JS AS $$ i = 5; k = k * j $$ |
SET @k := 7;
CALL p2(@i, 11, @k);
SELECT @i, @k;
@i	@k
5	77
DROP PROCEDURE p2;

#
# Test that creation of routine with parameter name which is
# valid in MySQL but is not valid JS identifier fails.
#
# Error messages might be cryptic at the moment.
CREATE FUNCTION f3(1param INT) RETURNS INT LANGUAGE JS AS $$ return 1 $$;
ERROR HY000: SyntaxError: Invalid or unexpected token
CREATE PROCEDURE p3(`123` INT) LANGUAGE JS AS $$ return $$;
ERROR HY000: SyntaxError: Invalid destructuring assignment target
CREATE FUNCTION f3(`for` INT) RETURNS INT LANGUAGE JS AS $$ return 1 $$;
ERROR HY000: SyntaxError: Unexpected token 'for'
CREATE PROCEDURE p3(throw INT) LANGUAGE JS AS $$ return $$;
ERROR HY000: SyntaxError: Unexpected token 'throw'

#
# Test that returning values from procedures is not allowed.
#
CREATE PROCEDURE p3(a INT) LANGUAGE JS AS $$ return 1 $$;
CALL p3(1);
ERROR HY000: Returning value from PROCEDURE is not allowed
DROP PROCEDURE p3;
# However, return without value should be fine.
CREATE PROCEDURE p3(a INT) LANGUAGE JS AS $$ return $$;
CALL p3(2);
DROP PROCEDURE p3;

#
# Test that 'strict' mode is enforced for our routines without
# it being enabled it explicitly.
#
# Assigning to undeclared variables is banned in strict mode.
CREATE FUNCTION f_strict() RETURNS INT LANGUAGE JS AS $$
no_such_var = 1;
return 1;
$$ |
SELECT f_strict();
ERROR HY000: ReferenceError: no_such_var is not defined
DROP FUNCTION f_strict;
CREATE PROCEDURE p_strict() LANGUAGE JS AS $$ no_such_var = 1 $$;
CALL p_strict();
ERROR HY000: ReferenceError: no_such_var is not defined
DROP PROCEDURE p_strict;

#
# Let us test how stored program parameters are converted to JS values.
#
#
# Let us start with numeric types.
#
CREATE FUNCTION f(arg TINYINT) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, -1, 127, -128]', '$[*]' COLUMNS(val TINYINT PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<-1> is number
<127> is number
<-128> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg TINYINT UNSIGNED) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, 255]', '$[*]' COLUMNS(val TINYINT UNSIGNED PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<255> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg SMALLINT) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, -1, 32767, -32768]', '$[*]' COLUMNS(val SMALLINT PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<-1> is number
<32767> is number
<-32768> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg SMALLINT UNSIGNED) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, 65535]', '$[*]' COLUMNS(val SMALLINT UNSIGNED PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<65535> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg MEDIUMINT) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, -1, 8388607, -8388608]', '$[*]' COLUMNS(val MEDIUMINT PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<-1> is number
<8388607> is number
<-8388608> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg MEDIUMINT UNSIGNED) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, 16777215]', '$[*]' COLUMNS(val MEDIUMINT UNSIGNED PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<16777215> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg INT) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: -2^30 and 2^30-1 are interesting because these are borders of V8 SMall Integer (SMI) optimization on 32-bit systems, on 64-bit systems these are -2^31 and 2^31-1.
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, -1, 1073741823, -1073741824, 1073741824, -1073741825, -2147483648, 2147483647]', '$[*]' COLUMNS(val INT PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<-1> is number
<1073741823> is number
<-1073741824> is number
<1073741824> is number
<-1073741825> is number
<-2147483648> is number
<2147483647> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg INT UNSIGNED) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: 2^30-1 is interesting because this is the border of V8 SMall Integer (SMI) optimization on 32-bit systems, on 64-bit systems this is 2^31-1.
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, 1073741823, 1073741824, 2147483647, 2147483648, 4294967295]', '$[*]' COLUMNS(val INT UNSIGNED PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<1073741823> is number
<1073741824> is number
<2147483647> is number
<2147483648> is number
<4294967295> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg BIGINT) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: -2^30, 2^30-1 and -2^31, 2^31-1 are interesting because these are borders of V8 SMall Integer (SMI) optimization on 32-bit and 64-bit systems. +/-2^53-1 are interesting becauses this is max/min safe integer representable as Numeric type (primitive) in JS.
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, -1, 1073741823, -1073741824, 1073741824, -1073741825, -2147483648, 2147483647, -2147483649, 2147483648, 9007199254740991, -9007199254740991, 9007199254740992,-9007199254740992, 9223372036854775806, -9223372036854775807]', '$[*]' COLUMNS(val BIGINT PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<-1> is number
<1073741823> is number
<-1073741824> is number
<1073741824> is number
<-1073741825> is number
<-2147483648> is number
<2147483647> is number
<-2147483649> is number
<2147483648> is number
<9007199254740991> is number
<-9007199254740991> is number
<9007199254740992> is bigint
<-9007199254740992> is bigint
<9223372036854775806> is bigint
<-9223372036854775807> is bigint
DROP FUNCTION f;
CREATE FUNCTION f(arg BIGINT UNSIGNED) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: 2^30-1 and 2^31-1 are interesting because these are borders of V8 SMall Integer (SMI) optimization on 32-bit and 64-bit systems. 2^53-1 is interesting becauses this is max safe integer representable as Numeric type (primitive) in JS.
SELECT f(val) FROM JSON_TABLE('[null, 0, 1, 1073741823, 1073741824, 2147483647, 2147483648, 4294967295, 4294967296, 9007199254740991, 9007199254740992, 18446744073709551615]', '$[*]' COLUMNS(val BIGINT UNSIGNED PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<1073741823> is number
<1073741824> is number
<2147483647> is number
<2147483648> is number
<4294967295> is number
<4294967296> is number
<9007199254740991> is number
<9007199254740992> is bigint
<18446744073709551615> is bigint
DROP FUNCTION f;
CREATE FUNCTION f(arg FLOAT) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: UNSIGNED attribute doesn't affect floating and fixed point type storage and is deprecated for them.
SELECT f(val) FROM JSON_TABLE('[null, 0e0, 1e0, -1e0, 1e1, 5e-1, -3.4028234e+38, -1.1754943e-38, 1.1754943e-38, 3.4028234E+38]', '$[*]' COLUMNS(val FLOAT PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<-1> is number
<10> is number
<0.5> is number
<-3.4028234663852886e+38> is number
<-1.1754943508222875e-38> is number
<1.1754943508222875e-38> is number
<3.4028234663852886e+38> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg DOUBLE) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: UNSIGNED attribute doesn't affect floating and fixed point type storage and is deprecated for them.
SELECT f(val) FROM JSON_TABLE('[null, 0e0, 1e0, -1e0, 1e1, 5e-1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308]', '$[*]' COLUMNS(val DOUBLE PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<-1> is number
<10> is number
<0.5> is number
<-1.7976931348623157e+308> is number
<-2.2250738585072014e-308> is number
<2.2250738585072014e-308> is number
<1.7976931348623157e+308> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg DECIMAL(10,5)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: JS doesn't have primitive fixed precision type. So we convert such parameters to strings to avoid precision loss.
SELECT f(val) FROM JSON_TABLE('[null, 0.0, 1.0, -1.0, 10.0, 0.1, 1.23456, -1.23456, 99999.99999, -99999.99999]', '$[*]' COLUMNS(val DECIMAL(10,5) PATH '$')) as v;
f(val)
<null> is object
<0.00000> is string
<1.00000> is string
<-1.00000> is string
<10.00000> is string
<0.10000> is string
<1.23456> is string
<-1.23456> is string
<99999.99999> is string
<-99999.99999> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg BOOLEAN) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
# Note: BOOLEAN type is an alias for TINYINT at the moment and is indistinguishable from it.
SELECT f(val) FROM JSON_TABLE('[null, false, true, 0, 1, 100]', '$[*]' COLUMNS(val BOOLEAN PATH '$')) as v;
f(val)
<null> is object
<0> is number
<1> is number
<0> is number
<1> is number
<100> is number
DROP FUNCTION f;

#
# Now let us test string types using different charsets.
#
# They are naturally mapped to JS strings (using Unicode).
CREATE FUNCTION f(arg CHAR(40) CHARACTER SET utf8mb4) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_utf8mb4 'Twas brillig, and the slithy toves') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Twas brillig, and the slithy toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg CHAR(40) CHARACTER SET latin1) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_latin1 X'496c20e974616974206772696c6865757265203b206c657320736c6963747565757820746f766573') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Il était grilheure ; les slictueux toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg CHAR(40) CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_cp1251 X'c1e520f1e3ebe0e4ede520e820f7e5f1f2ebe8edede8f2e520eaeeece1f3f0f1e8') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Бе сгладне и честлинните комбурси> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg VARCHAR(50) CHARACTER SET utf8mb4) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_utf8mb4 'Twas brillig, and the slithy toves') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Twas brillig, and the slithy toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg VARCHAR(50) CHARACTER SET latin1) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_latin1 X'496c20e974616974206772696c6865757265203b206c657320736c6963747565757820746f766573') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Il était grilheure ; les slictueux toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg VARCHAR(50) CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_cp1251 X'c1e520f1e3ebe0e4ede520e820f7e5f1f2ebe8edede8f2e520eaeeece1f3f0f1e8') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Бе сгладне и честлинните комбурси> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TINYTEXT CHARACTER SET utf8mb4) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_utf8mb4 'Twas brillig, and the slithy toves') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Twas brillig, and the slithy toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TINYTEXT CHARACTER SET latin1) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_latin1 X'496c20e974616974206772696c6865757265203b206c657320736c6963747565757820746f766573') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Il était grilheure ; les slictueux toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TINYTEXT CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_cp1251 X'c1e520f1e3ebe0e4ede520e820f7e5f1f2ebe8edede8f2e520eaeeece1f3f0f1e8') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Бе сгладне и честлинните комбурси> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TEXT CHARACTER SET utf8mb4) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_utf8mb4 'Twas brillig, and the slithy toves') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Twas brillig, and the slithy toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TEXT CHARACTER SET latin1) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_latin1 X'496c20e974616974206772696c6865757265203b206c657320736c6963747565757820746f766573') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Il était grilheure ; les slictueux toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TEXT CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_cp1251 X'c1e520f1e3ebe0e4ede520e820f7e5f1f2ebe8edede8f2e520eaeeece1f3f0f1e8') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Бе сгладне и честлинните комбурси> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg MEDIUMTEXT CHARACTER SET utf8mb4) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_utf8mb4 'Twas brillig, and the slithy toves') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Twas brillig, and the slithy toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg MEDIUMTEXT CHARACTER SET latin1) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_latin1 X'496c20e974616974206772696c6865757265203b206c657320736c6963747565757820746f766573') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Il était grilheure ; les slictueux toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg MEDIUMTEXT CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_cp1251 X'c1e520f1e3ebe0e4ede520e820f7e5f1f2ebe8edede8f2e520eaeeece1f3f0f1e8') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Бе сгладне и честлинните комбурси> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg LONGTEXT CHARACTER SET utf8mb4) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_utf8mb4 'Twas brillig, and the slithy toves') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Twas brillig, and the slithy toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg LONGTEXT CHARACTER SET latin1) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_latin1 X'496c20e974616974206772696c6865757265203b206c657320736c6963747565757820746f766573') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Il était grilheure ; les slictueux toves> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg LONGTEXT CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg; $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(_cp1251 X'c1e520f1e3ebe0e4ede520e820f7e5f1f2ebe8edede8f2e520eaeeece1f3f0f1e8') AS r;;
nil	e	a	r
<null> is object	<> is string	<A> is string	<Бе сгладне и честлинните комбурси> is string
DROP FUNCTION f;

#
# Binary/BLOB types are mapped to TypedArray objects though.
#
# Notice the padding for BINARY(10)!
# We do a bit of pretty-printing of DataView contents.
CREATE FUNCTION f(arg BINARY(10)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return (arg instanceof DataView) ? ('<' + new Uint8Array(arg.buffer) + '> is DataView') : ('<' + arg + '> is ' + typeof arg); $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(X'0001020304') AS r;
nil	e	a	r
<null> is object	<0,0,0,0,0,0,0,0,0,0> is DataView	<65,0,0,0,0,0,0,0,0,0> is DataView	<0,1,2,3,4,0,0,0,0,0> is DataView
DROP FUNCTION f;
# We do a bit of pretty-printing of DataView contents.
CREATE FUNCTION f(arg VARBINARY(15)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return (arg instanceof DataView) ? ('<' + new Uint8Array(arg.buffer) + '> is DataView') : ('<' + arg + '> is ' + typeof arg); $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(X'0001020304') AS r;
nil	e	a	r
<null> is object	<> is DataView	<65> is DataView	<0,1,2,3,4> is DataView
DROP FUNCTION f;
# We do a bit of pretty-printing of DataView contents.
CREATE FUNCTION f(arg TINYBLOB) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return (arg instanceof DataView) ? ('<' + new Uint8Array(arg.buffer) + '> is DataView') : ('<' + arg + '> is ' + typeof arg); $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(X'0001020304') AS r;
nil	e	a	r
<null> is object	<> is DataView	<65> is DataView	<0,1,2,3,4> is DataView
DROP FUNCTION f;
# We do a bit of pretty-printing of DataView contents.
CREATE FUNCTION f(arg BLOB) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return (arg instanceof DataView) ? ('<' + new Uint8Array(arg.buffer) + '> is DataView') : ('<' + arg + '> is ' + typeof arg); $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(X'0001020304') AS r;
nil	e	a	r
<null> is object	<> is DataView	<65> is DataView	<0,1,2,3,4> is DataView
DROP FUNCTION f;
# We do a bit of pretty-printing of DataView contents.
CREATE FUNCTION f(arg MEDIUMBLOB) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return (arg instanceof DataView) ? ('<' + new Uint8Array(arg.buffer) + '> is DataView') : ('<' + arg + '> is ' + typeof arg); $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(X'0001020304') AS r;
nil	e	a	r
<null> is object	<> is DataView	<65> is DataView	<0,1,2,3,4> is DataView
DROP FUNCTION f;
# We do a bit of pretty-printing of DataView contents.
CREATE FUNCTION f(arg LONGBLOB) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return (arg instanceof DataView) ? ('<' + new Uint8Array(arg.buffer) + '> is DataView') : ('<' + arg + '> is ' + typeof arg); $$;
SELECT f(NULL) AS nil, f("") AS e, f("A") AS a, f(X'0001020304') AS r;
nil	e	a	r
<null> is object	<> is DataView	<65> is DataView	<0,1,2,3,4> is DataView
DROP FUNCTION f;

#
# Test for various datetime types.
#

#
# YEAR parameters are mapped to integers.
#
CREATE FUNCTION f(arg YEAR) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f(0) AS z, f('00') AS a, f('01') AS b, f('99') AS c, f('1901') AS d, f('2155') AS e;
nil	z	a	b	c	d	e
<null> is object	<0> is number	<2000> is number	<2001> is number	<1999> is number	<1901> is number	<2155> is number
DROP FUNCTION f;

#
# TIME parameters are mapped to strings as JS doesn't have
# corresponding type.
#
CREATE FUNCTION f(arg TIME) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f('0:0:0') AS z, f('-838:59:59') AS a, f('838:59:59') AS b, f('01:02:03') AS c;
nil	z	a	b	c
<null> is object	<00:00:00> is string	<-838:59:59> is string	<838:59:59> is string	<01:02:03> is string
DROP FUNCTION f;
#
# Also test TIME with fractional part.
#
CREATE FUNCTION f(arg TIME(6)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f('0:0:0.0') AS z, f('-838:59:59.000000') AS a, f('838:59:59.000000') AS b, f('01:02:03.999999') AS c;
nil	z	a	b	c
<null> is object	<00:00:00.000000> is string	<-838:59:59.000000> is string	<838:59:59.000000> is string	<01:02:03.999999> is string
DROP FUNCTION f;

#
# DATETIME and TIMESTAMP parameters are mapped to strings as
# TZ-related and API issues make their mapping to JS Date
# not the best idea.
#
CREATE FUNCTION f(arg DATETIME) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f('1000-01-01 00:00:00') AS a, f('9999-12-31 23:59:59') AS b, f('2023-12-07 11:04:42') AS c;
nil	a	b	c
<null> is object	<1000-01-01 00:00:00> is string	<9999-12-31 23:59:59> is string	<2023-12-07 11:04:42> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg DATETIME(6)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f('1000-01-01 00:00:00.000000') AS a, f('9999-12-31 23:59:59.499999') AS b, f('2023-12-07 11:04:42.123456') AS c;
nil	a	b	c
<null> is object	<1000-01-01 00:00:00.000000> is string	<9999-12-31 23:59:59.499999> is string	<2023-12-07 11:04:42.123456> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TIMESTAMP) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f('1970-01-01 03:00:01') AS a, f('2038-01-19 06:14:07') AS b, f('2023-12-07 11:04:42') AS c;
nil	a	b	c
<null> is object	<1970-01-01 03:00:01> is string	<2038-01-19 06:14:07> is string	<2023-12-07 11:04:42> is string
DROP FUNCTION f;
CREATE FUNCTION f(arg TIMESTAMP(6)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f('1970-01-01 03:00:01.000000') AS a, f('2038-01-19 06:14:07.499999') AS b, f('2023-12-07 11:04:42.123456') AS c;
nil	a	b	c
<null> is object	<1970-01-01 03:00:01.000000> is string	<2038-01-19 06:14:07.499999> is string	<2023-12-07 11:04:42.123456> is string
DROP FUNCTION f;

#
# DATE parameters are mapped to strings for the same reasons as well.
#
CREATE FUNCTION f(arg DATE) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f('1000-01-01') AS a, f('9999-12-31') AS b, f('2023-12-07') AS c;
nil	a	b	c
<null> is object	<1000-01-01> is string	<9999-12-31> is string	<2023-12-07> is string
DROP FUNCTION f;

#
# ENUM parameters are mapped to strings as well.
#
CREATE FUNCTION f(arg ENUM('a', 'b', 'c')) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f("a") AS a, f(2) AS t;
nil	a	t
<null> is object	<a> is string	<b> is string
DROP FUNCTION f;
#
# We do charset conversions for ENUM as well.
#
CREATE FUNCTION f(arg ENUM(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f("Додо") AS Dodo, f(2) AS Tweedledum;
nil	Dodo	Tweedledum
<null> is object	<Додо> is string	<Туидълди> is string
DROP FUNCTION f;

#
# SET parameters are mapped to strings of comma-separated list of set
# elements.
#
CREATE FUNCTION f(arg SET('a', 'b', 'c')) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f("a,b") AS ab, f("c") AS c, f(6) AS bc;
nil	ab	c	bc
<null> is object	<a,b> is string	<c> is string	<b,c> is string
DROP FUNCTION f;
#
# Check SET with non-UTF8 charset as well.
#
CREATE FUNCTION f(arg SET(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f("Додо") AS D, f("Туидълдъм,Туидълди") AS TT, f(5) AS TD;
nil	D	TT	TD
<null> is object	<Додо> is string	<Туидълдъм,Туидълди> is string	<Туидълдъм,Додо> is string
DROP FUNCTION f;

#
# BIT parameters with size <= 53 bits are mapped to integer JS Number
# values.
#
# BIT parameters with size > 53 bits can't be safely represented as JS
# Number values in generic case. So we map them to BigInt values.
#
CREATE FUNCTION f(arg BIT(11)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f(0) AS z, f(b'1000000000') AS f, f(7) AS s, f(b'11111111111') AS m;
nil	z	f	s	m
<null> is object	<0> is number	<512> is number	<7> is number	<2047> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg BIT(53)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f(0) AS z, f(b'1000000000') AS f, f(7) AS s, f(b'11111111111') AS b, f(x'1FFFFFFFFFFFFF') AS m;
nil	z	f	s	b	m
<null> is object	<0> is number	<512> is number	<7> is number	<2047> is number	<9007199254740991> is number
DROP FUNCTION f;
CREATE FUNCTION f(arg BIT(54)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f(0) AS z, f(b'1000000000') AS f, f(7) AS s, f(b'11111111111') AS b, f(x'3FFFFFFFFFFFFF') AS m;
nil	z	f	s	b	m
<null> is object	<0> is bigint	<512> is bigint	<7> is bigint	<2047> is bigint	<18014398509481983> is bigint
DROP FUNCTION f;
CREATE FUNCTION f(arg BIT(64)) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil, f(0) AS z, f(b'1000000000') AS f, f(7) AS s, f(b'11111111111') AS b, f(x'FFFFFFFFFFFFFFFF') AS m;
nil	z	f	s	b	m
<null> is object	<0> is bigint	<512> is bigint	<7> is bigint	<2047> is bigint	<18446744073709551615> is bigint
DROP FUNCTION f;

#
# GEOMETRY arguments are mapped to JS DataView objects over
# MySQL internal representation of this type. This internal
# representation is documented and based on standard WKB format.
#
CREATE FUNCTION f(arg GEOMETRY) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return (arg instanceof DataView) ? ('<' + new Uint8Array(arg.buffer) + '> is DataView') : ('<' + arg + '> is ' + typeof arg) $$;
SELECT f(NULL) AS nil, f(ST_GeomFromText('POINT(15 20)')) AS g;
nil	g
<null> is object	<0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,52,64> is DataView
DROP FUNCTION f;

#
# JSON arguments are mapped to corresponding JS objects which
# are constructed using JSON.parse() method.
#
CREATE FUNCTION f(arg JSON) RETURNS VARCHAR(100) LANGUAGE JS AS $$ return '<' + arg + '> is ' + typeof arg $$;
SELECT f(NULL) AS nil1, f("null") AS nil2, f("1") AS i, f("1.01") AS n, f('"alpha"') AS s, f("[1, 2, 3]") AS arr, f('{"a": 1, "b": "alpha"}') AS obj;
nil1	nil2	i	n	s	arr	obj
<null> is object	<null> is object	<1> is number	<1.01> is number	<alpha> is string	<1,2,3> is object	<[object Object]> is object
DROP FUNCTION f;

#
# Additional test coverage for scenarios in which SQL to JS value
# conversion fails can be found in js_lang_big.test.
#

#
# Now let us test how JS values are converted to SQL types for return
# values.
#
#
# Let us start with string SQL types.
#
# Values of all JS types are converted to non-binary string SQL-types
# using JS toString() conversion.
# The exception are JS 'null' and 'undefined' values which are mapped
# to SQL NULL.
CREATE FUNCTION f_undefined() RETURNS CHAR(50) LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS CHAR(50) LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS CHAR(50) LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS CHAR(50) LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS CHAR(50) LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS CHAR(50) LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS CHAR(50) LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_0() RETURNS CHAR(50) LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS CHAR(50) CHARACTER SET utf8mb4 LANGUAGE JS AS $$ return "Far over the misty mountains cold"; $$;
CREATE FUNCTION f_str_2() RETURNS CHAR(50) CHARACTER SET latin1 LANGUAGE JS AS $$ return "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE FUNCTION f_str_3() RETURNS CHAR(50) CHARACTER SET cp1251 LANGUAGE JS AS $$ return "Там отвъд мъглявите студени планини"; $$;
CREATE FUNCTION f_str_cerr() RETURNS CHAR(50) CHARACTER SET cp1251 LANGUAGE JS AS $$ return "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE FUNCTION f_array() RETURNS CHAR(50) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS CHAR(50) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS CHAR(50) LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS CHAR(50) LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS CHAR(50) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(3), 1, 1); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS CHAR(50) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_0() AS s0, f_str_1() AS s1, f_str_2() AS s2, f_str_3() AS s3;
se	s0	s1	s2	s3
	alpha	Far over the misty mountains cold	Au-delà des montagnes glaciales et embrumées	Там отвъд мъглявите студени планини
SELECT f_str_1() = X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1,
f_str_2() = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2,
f_str_3() = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r1	r2	r3
1	1	1
SELECT f_str_cerr();
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'f_str_cerr()' at row 1
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT f_typed_arr() AS ta, f_data_view() AS dv;
ta	dv
0,1,2,3,5	[object DataView]
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_0() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS VARCHAR(60) CHARACTER SET utf8mb4 LANGUAGE JS AS $$ return "Far over the misty mountains cold"; $$;
CREATE FUNCTION f_str_2() RETURNS VARCHAR(60) CHARACTER SET latin1 LANGUAGE JS AS $$ return "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE FUNCTION f_str_3() RETURNS VARCHAR(60) CHARACTER SET cp1251 LANGUAGE JS AS $$ return "Там отвъд мъглявите студени планини"; $$;
CREATE FUNCTION f_str_cerr() RETURNS VARCHAR(60) CHARACTER SET cp1251 LANGUAGE JS AS $$ return "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE FUNCTION f_array() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS VARCHAR(60) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(3), 1, 1); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS VARCHAR(60) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_0() AS s0, f_str_1() AS s1, f_str_2() AS s2, f_str_3() AS s3;
se	s0	s1	s2	s3
	alpha	Far over the misty mountains cold	Au-delà des montagnes glaciales et embrumées	Там отвъд мъглявите студени планини
SELECT f_str_1() = X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1,
f_str_2() = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2,
f_str_3() = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r1	r2	r3
1	1	1
SELECT f_str_cerr();
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'f_str_cerr()' at row 1
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT f_typed_arr() AS ta, f_data_view() AS dv;
ta	dv
0,1,2,3,5	[object DataView]
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS TINYTEXT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TINYTEXT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS TINYTEXT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS TINYTEXT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS TINYTEXT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS TINYTEXT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TINYTEXT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_0() RETURNS TINYTEXT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS TINYTEXT CHARACTER SET utf8mb4 LANGUAGE JS AS $$ return "Far over the misty mountains cold"; $$;
CREATE FUNCTION f_str_2() RETURNS TINYTEXT CHARACTER SET latin1 LANGUAGE JS AS $$ return "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE FUNCTION f_str_3() RETURNS TINYTEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "Там отвъд мъглявите студени планини"; $$;
CREATE FUNCTION f_str_cerr() RETURNS TINYTEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE FUNCTION f_array() RETURNS TINYTEXT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TINYTEXT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TINYTEXT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TINYTEXT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TINYTEXT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(3), 1, 1); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS TINYTEXT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_0() AS s0, f_str_1() AS s1, f_str_2() AS s2, f_str_3() AS s3;
se	s0	s1	s2	s3
	alpha	Far over the misty mountains cold	Au-delà des montagnes glaciales et embrumées	Там отвъд мъглявите студени планини
SELECT f_str_1() = X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1,
f_str_2() = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2,
f_str_3() = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r1	r2	r3
1	1	1
SELECT f_str_cerr();
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'f_str_cerr()' at row 1
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT f_typed_arr() AS ta, f_data_view() AS dv;
ta	dv
0,1,2,3,5	[object DataView]
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS TEXT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TEXT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS TEXT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS TEXT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS TEXT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS TEXT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TEXT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_0() RETURNS TEXT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS TEXT CHARACTER SET utf8mb4 LANGUAGE JS AS $$ return "Far over the misty mountains cold"; $$;
CREATE FUNCTION f_str_2() RETURNS TEXT CHARACTER SET latin1 LANGUAGE JS AS $$ return "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE FUNCTION f_str_3() RETURNS TEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "Там отвъд мъглявите студени планини"; $$;
CREATE FUNCTION f_str_cerr() RETURNS TEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE FUNCTION f_array() RETURNS TEXT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TEXT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TEXT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TEXT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TEXT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(3), 1, 1); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS TEXT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_0() AS s0, f_str_1() AS s1, f_str_2() AS s2, f_str_3() AS s3;
se	s0	s1	s2	s3
	alpha	Far over the misty mountains cold	Au-delà des montagnes glaciales et embrumées	Там отвъд мъглявите студени планини
SELECT f_str_1() = X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1,
f_str_2() = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2,
f_str_3() = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r1	r2	r3
1	1	1
SELECT f_str_cerr();
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'f_str_cerr()' at row 1
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT f_typed_arr() AS ta, f_data_view() AS dv;
ta	dv
0,1,2,3,5	[object DataView]
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_0() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS MEDIUMTEXT CHARACTER SET utf8mb4 LANGUAGE JS AS $$ return "Far over the misty mountains cold"; $$;
CREATE FUNCTION f_str_2() RETURNS MEDIUMTEXT CHARACTER SET latin1 LANGUAGE JS AS $$ return "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE FUNCTION f_str_3() RETURNS MEDIUMTEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "Там отвъд мъглявите студени планини"; $$;
CREATE FUNCTION f_str_cerr() RETURNS MEDIUMTEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE FUNCTION f_array() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(3), 1, 1); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS MEDIUMTEXT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_0() AS s0, f_str_1() AS s1, f_str_2() AS s2, f_str_3() AS s3;
se	s0	s1	s2	s3
	alpha	Far over the misty mountains cold	Au-delà des montagnes glaciales et embrumées	Там отвъд мъглявите студени планини
SELECT f_str_1() = X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1,
f_str_2() = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2,
f_str_3() = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r1	r2	r3
1	1	1
SELECT f_str_cerr();
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'f_str_cerr()' at row 1
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT f_typed_arr() AS ta, f_data_view() AS dv;
ta	dv
0,1,2,3,5	[object DataView]
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS LONGTEXT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS LONGTEXT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS LONGTEXT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS LONGTEXT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS LONGTEXT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS LONGTEXT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS LONGTEXT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_0() RETURNS LONGTEXT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS LONGTEXT CHARACTER SET utf8mb4 LANGUAGE JS AS $$ return "Far over the misty mountains cold"; $$;
CREATE FUNCTION f_str_2() RETURNS LONGTEXT CHARACTER SET latin1 LANGUAGE JS AS $$ return "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE FUNCTION f_str_3() RETURNS LONGTEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "Там отвъд мъглявите студени планини"; $$;
CREATE FUNCTION f_str_cerr() RETURNS LONGTEXT CHARACTER SET cp1251 LANGUAGE JS AS $$ return "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE FUNCTION f_array() RETURNS LONGTEXT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS LONGTEXT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS LONGTEXT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS LONGTEXT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS LONGTEXT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(3), 1, 1); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS LONGTEXT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_0() AS s0, f_str_1() AS s1, f_str_2() AS s2, f_str_3() AS s3;
se	s0	s1	s2	s3
	alpha	Far over the misty mountains cold	Au-delà des montagnes glaciales et embrumées	Там отвъд мъглявите студени планини
SELECT f_str_1() = X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1,
f_str_2() = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2,
f_str_3() = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r1	r2	r3
1	1	1
SELECT f_str_cerr();
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'f_str_cerr()' at row 1
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT f_typed_arr() AS ta, f_data_view() AS dv;
ta	dv
0,1,2,3,5	[object DataView]
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;

#
# For binary string/BLOB SQL-types in addition to 'null' and 'undefined'
# values, ArrayBuffer-based objects are also getting special treatment.
# All other JS values are converted using the same toString() approach
# as for non-binary strings.
CREATE FUNCTION f_undefined() RETURNS BINARY(50) LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS BINARY(50) LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS BINARY(50) LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS BINARY(50) LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS BINARY(50) LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS BINARY(50) LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS BINARY(50) LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS BINARY(50) LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_array() RETURNS BINARY(50) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS BINARY(50) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS BINARY(50) LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS BINARY(50) LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS BINARY(50) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return dv $$;
CREATE FUNCTION f_arr_buff() RETURNS BINARY(50) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return ab $$;
CREATE FUNCTION f_object_serr() RETURNS BINARY(50) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
# BINARY type does 0-padding so we use HEX to correctly print returned value.
SELECT HEX(f_int()) AS i, HEX(f_num()) AS num, HEX(f_bigint()) AS bi, HEX(f_bool()) AS bo;
i	num	bi	bo
3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000	312E323500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000	3130300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000	7472756500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT HEX(f_str_e()) AS se, HEX(f_str_a()) AS sa;
se	sa
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000	616C706861000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT HEX(f_array()) AS a, HEX(f_object()) AS o, HEX(f_func()) AS f;
a	o	f
312C322C33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000	5B6F626A656374204F626A6563745D0000000000000000000000000000000000000000000000000000000000000000000000	66756E6374696F6E20286129207B2072657475726E20313B7D00000000000000000000000000000000000000000000000000
SELECT HEX(f_typed_arr()) AS ta, HEX(f_data_view()) AS dv, HEX(f_arr_buff()) AS ab;
ta	dv	ab
0001020305000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000	0000000103000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000	0000000001030007000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_arr_buff;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_array() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS VARBINARY(60) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return dv $$;
CREATE FUNCTION f_arr_buff() RETURNS VARBINARY(60) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return ab $$;
CREATE FUNCTION f_object_serr() RETURNS VARBINARY(60) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_a() AS sa;
se	sa
	alpha
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT HEX(f_typed_arr()) AS ta, HEX(f_data_view()) AS dv, HEX(f_arr_buff()) AS ab;
ta	dv	ab
0001020305	00000001030007	000000000103000700
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_arr_buff;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS TINYBLOB LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TINYBLOB LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS TINYBLOB LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS TINYBLOB LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS TINYBLOB LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS TINYBLOB LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TINYBLOB LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS TINYBLOB LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_array() RETURNS TINYBLOB LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TINYBLOB LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TINYBLOB LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TINYBLOB LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TINYBLOB LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return dv $$;
CREATE FUNCTION f_arr_buff() RETURNS TINYBLOB LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return ab $$;
CREATE FUNCTION f_object_serr() RETURNS TINYBLOB LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_a() AS sa;
se	sa
	alpha
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT HEX(f_typed_arr()) AS ta, HEX(f_data_view()) AS dv, HEX(f_arr_buff()) AS ab;
ta	dv	ab
0001020305	00000001030007	000000000103000700
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_arr_buff;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS BLOB LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS BLOB LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS BLOB LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS BLOB LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS BLOB LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS BLOB LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS BLOB LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS BLOB LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_array() RETURNS BLOB LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS BLOB LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS BLOB LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS BLOB LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS BLOB LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return dv $$;
CREATE FUNCTION f_arr_buff() RETURNS BLOB LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return ab $$;
CREATE FUNCTION f_object_serr() RETURNS BLOB LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_a() AS sa;
se	sa
	alpha
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT HEX(f_typed_arr()) AS ta, HEX(f_data_view()) AS dv, HEX(f_arr_buff()) AS ab;
ta	dv	ab
0001020305	00000001030007	000000000103000700
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_arr_buff;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_array() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return dv $$;
CREATE FUNCTION f_arr_buff() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return ab $$;
CREATE FUNCTION f_object_serr() RETURNS MEDIUMBLOB LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_a() AS sa;
se	sa
	alpha
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT HEX(f_typed_arr()) AS ta, HEX(f_data_view()) AS dv, HEX(f_arr_buff()) AS ab;
ta	dv	ab
0001020305	00000001030007	000000000103000700
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_arr_buff;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS LONGBLOB LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS LONGBLOB LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int() RETURNS LONGBLOB LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_num() RETURNS LONGBLOB LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_bigint() RETURNS LONGBLOB LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bool() RETURNS LONGBLOB LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS LONGBLOB LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS LONGBLOB LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_array() RETURNS LONGBLOB LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS LONGBLOB LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS LONGBLOB LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS LONGBLOB LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS LONGBLOB LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return dv $$;
CREATE FUNCTION f_arr_buff() RETURNS LONGBLOB LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); return ab $$;
CREATE FUNCTION f_object_serr() RETURNS LONGBLOB LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS num, f_bigint() AS bi, f_bool() AS bo;
i	num	bi	bo
1	1.25	100	true
SELECT f_str_e() AS se, f_str_a() AS sa;
se	sa
	alpha
SELECT f_array() AS a, f_object() AS o, f_func() AS f;
a	o	f
1,2,3	[object Object]	function (a) { return 1;}
SELECT HEX(f_typed_arr()) AS ta, HEX(f_data_view()) AS dv, HEX(f_arr_buff()) AS ab;
ta	dv	ab
0001020305	00000001030007	000000000103000700
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_arr_buff;
DROP FUNCTION f_object_serr;
#
# For integer SQL-types conversion works in the following way:
# - JS 'null' and 'undefined' values which are mapped to SQL NULL.
# - If JS numeric or BigInt value can be safely converted to SQL-type
#   we use direct conversion (for performance reasons).
# - Otherwise, as well as for all other types of JS values conversion
#   is done through strings (i.e. by doing JS toString() conversion
#   and trying to store resulting string as SQL integer value).

# Maximum BIGINT value can't be represented as exact numeric in JS,
# so we resort to using 2^53-1 (max safe in JS) instead and reduce
# testing for it.
CREATE FUNCTION f_undefined() RETURNS TINYINT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TINYINT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS TINYINT LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS TINYINT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_int_n() RETURNS TINYINT LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_m() RETURNS TINYINT LANGUAGE JS AS $$ return 127; $$;
CREATE FUNCTION f_int_m1() RETURNS TINYINT LANGUAGE JS AS $$ return 127 + 1; $$;
CREATE FUNCTION f_int_nm() RETURNS TINYINT LANGUAGE JS AS $$ return -127 - 1; $$;
CREATE FUNCTION f_int_nm1() RETURNS TINYINT LANGUAGE JS AS $$ return -127 - 2; $$;
CREATE FUNCTION f_uint_m() RETURNS TINYINT UNSIGNED LANGUAGE JS AS  $$ return 2*127 + 1; $$;
CREATE FUNCTION f_uint_m1() RETURNS TINYINT UNSIGNED LANGUAGE JS AS $$ return 2*127 + 2; $$;
CREATE FUNCTION f_uint_n() RETURNS TINYINT UNSIGNED LANGUAGE JS AS  $$ return - 1; $$;
CREATE FUNCTION f_num_1() RETURNS TINYINT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_num_2() RETURNS TINYINT LANGUAGE JS AS $$ return 5e-1; $$;
CREATE FUNCTION f_num_3() RETURNS TINYINT LANGUAGE JS AS $$ return 5e-2; $$;
CREATE FUNCTION f_num_4() RETURNS TINYINT LANGUAGE JS AS $$ return 1.2345e+2; $$;
CREATE FUNCTION f_num_5() RETURNS TINYINT LANGUAGE JS AS $$ return -1.2345e+1; $$;
CREATE FUNCTION f_num_r1() RETURNS TINYINT LANGUAGE JS AS $$ return 4.5; $$;
CREATE FUNCTION f_num_r2() RETURNS TINYINT LANGUAGE JS AS $$ return 4.5e+0; $$;
CREATE FUNCTION f_num_un() RETURNS TINYINT UNSIGNED LANGUAGE JS AS $$ return -1.5; $$;
CREATE FUNCTION f_num_tb() RETURNS TINYINT UNSIGNED LANGUAGE JS AS $$ return 1e+70; $$;
CREATE FUNCTION f_bigint() RETURNS TINYINT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bigint_n() RETURNS TINYINT LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_u() RETURNS TINYINT UNSIGNED LANGUAGE JS AS $$ return BigInt(9007199254740991); $$;
CREATE FUNCTION f_bigint_un() RETURNS TINYINT UNSIGNED LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_tb() RETURNS TINYINT LANGUAGE JS AS $$ return BigInt(1e+25); $$;
CREATE FUNCTION f_bool() RETURNS TINYINT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TINYINT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS TINYINT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_n1() RETURNS TINYINT LANGUAGE JS AS $$ return "123"; $$;
CREATE FUNCTION f_str_n2() RETURNS TINYINT LANGUAGE JS AS $$ return "-2"; $$;
CREATE FUNCTION f_str_n3() RETURNS TINYINT LANGUAGE JS AS $$ return "12.65"; $$;
CREATE FUNCTION f_str_nu() RETURNS TINYINT UNSIGNED LANGUAGE JS AS $$ return "-1"; $$;
CREATE FUNCTION f_str_nr1() RETURNS TINYINT LANGUAGE JS AS $$ return "4.5"; $$;
CREATE FUNCTION f_str_nr2() RETURNS TINYINT LANGUAGE JS AS $$ return "4.5e+0"; $$;
CREATE FUNCTION f_str_tb1() RETURNS TINYINT LANGUAGE JS AS $$ return "1e+25"; $$;
CREATE FUNCTION f_str_tb2() RETURNS TINYINT LANGUAGE JS AS $$ return "18446744073709551616"; $$;
CREATE FUNCTION f_array() RETURNS TINYINT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TINYINT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TINYINT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TINYINT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TINYINT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS TINYINT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
CREATE FUNCTION f_object_userr() RETURNS TINYINT UNSIGNED LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n, f_int_m() AS im, f_int_nm() AS nm, f_uint_m() AS um;
i0	i1	n	im	nm	um
0	1	-1	127	-128	255
SELECT f_int_m1();
ERROR 22003: Out of range value for column 'f_int_m1()' at row 1
SELECT f_int_nm1();
ERROR 22003: Out of range value for column 'f_int_nm1()' at row 1
SELECT f_uint_m1();
ERROR 22003: Out of range value for column 'f_uint_m1()' at row 1
SELECT f_uint_n();
ERROR 22003: Out of range value for column 'f_uint_n()' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
SELECT f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_4() AS n4, f_num_5();
n1	n2	n3	n4	f_num_5()
1	1	0	123	-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
SELECT f_num_r1() AS r1, f_num_r2() AS r2;
r1	r2
5	5
SELECT f_num_un();
ERROR 22003: Out of range value for column 'f_num_un()' at row 1
SELECT f_num_tb();
ERROR 22003: Out of range value for column 'f_num_tb()' at row 1
SELECT f_bigint() AS bi, f_bigint_n() AS bn;
bi	bn
100	-42
SELECT f_bigint_un();
ERROR 22003: Out of range value for column 'f_bigint_un()' at row 1
SELECT f_bigint_tb();
ERROR 22003: Out of range value for column 'f_bigint_tb()' at row 1
SELECT f_bool() AS bo;
ERROR HY000: Incorrect integer value: 'true' for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR HY000: Incorrect integer value: '' for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR HY000: Incorrect integer value: 'alpha' for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2, f_str_n3() AS n3;
n1	n2	n3
123	-2	13
SELECT f_str_nr1() AS nr1, f_str_nr2() AS nr2;
nr1	nr2
5	5
SELECT f_str_nu();
ERROR 22003: Out of range value for column 'f_str_nu()' at row 1
SELECT f_str_tb1();
ERROR 22003: Out of range value for column 'f_str_tb1()' at row 1
SELECT f_str_tb2();
ERROR 22003: Out of range value for column 'f_str_tb2()' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR HY000: Incorrect integer value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR HY000: Incorrect integer value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_typed_arr() AS ta;
ERROR 01000: Data truncated for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
SELECT f_object_userr() AS userr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_m;
DROP FUNCTION f_int_m1;
DROP FUNCTION f_int_nm;
DROP FUNCTION f_int_nm1;
DROP FUNCTION f_uint_m;
DROP FUNCTION f_uint_m1;
DROP FUNCTION f_uint_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_4;
DROP FUNCTION f_num_5;
DROP FUNCTION f_num_r1;
DROP FUNCTION f_num_r2;
DROP FUNCTION f_num_un;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_n;
DROP FUNCTION f_bigint_u;
DROP FUNCTION f_bigint_un;
DROP FUNCTION f_bigint_tb;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n3;
DROP FUNCTION f_str_nu;
DROP FUNCTION f_str_nr1;
DROP FUNCTION f_str_nr2;
DROP FUNCTION f_str_tb1;
DROP FUNCTION f_str_tb2;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
DROP FUNCTION f_object_userr;
CREATE FUNCTION f_undefined() RETURNS SMALLINT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS SMALLINT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS SMALLINT LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS SMALLINT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_int_n() RETURNS SMALLINT LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_m() RETURNS SMALLINT LANGUAGE JS AS $$ return 32767; $$;
CREATE FUNCTION f_int_m1() RETURNS SMALLINT LANGUAGE JS AS $$ return 32767 + 1; $$;
CREATE FUNCTION f_int_nm() RETURNS SMALLINT LANGUAGE JS AS $$ return -32767 - 1; $$;
CREATE FUNCTION f_int_nm1() RETURNS SMALLINT LANGUAGE JS AS $$ return -32767 - 2; $$;
CREATE FUNCTION f_uint_m() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS  $$ return 2*32767 + 1; $$;
CREATE FUNCTION f_uint_m1() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS $$ return 2*32767 + 2; $$;
CREATE FUNCTION f_uint_n() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS  $$ return - 1; $$;
CREATE FUNCTION f_num_1() RETURNS SMALLINT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_num_2() RETURNS SMALLINT LANGUAGE JS AS $$ return 5e-1; $$;
CREATE FUNCTION f_num_3() RETURNS SMALLINT LANGUAGE JS AS $$ return 5e-2; $$;
CREATE FUNCTION f_num_4() RETURNS SMALLINT LANGUAGE JS AS $$ return 1.2345e+2; $$;
CREATE FUNCTION f_num_5() RETURNS SMALLINT LANGUAGE JS AS $$ return -1.2345e+1; $$;
CREATE FUNCTION f_num_r1() RETURNS SMALLINT LANGUAGE JS AS $$ return 4.5; $$;
CREATE FUNCTION f_num_r2() RETURNS SMALLINT LANGUAGE JS AS $$ return 4.5e+0; $$;
CREATE FUNCTION f_num_un() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS $$ return -1.5; $$;
CREATE FUNCTION f_num_tb() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS $$ return 1e+70; $$;
CREATE FUNCTION f_bigint() RETURNS SMALLINT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bigint_n() RETURNS SMALLINT LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_u() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS $$ return BigInt(9007199254740991); $$;
CREATE FUNCTION f_bigint_un() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_tb() RETURNS SMALLINT LANGUAGE JS AS $$ return BigInt(1e+25); $$;
CREATE FUNCTION f_bool() RETURNS SMALLINT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS SMALLINT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS SMALLINT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_n1() RETURNS SMALLINT LANGUAGE JS AS $$ return "123"; $$;
CREATE FUNCTION f_str_n2() RETURNS SMALLINT LANGUAGE JS AS $$ return "-2"; $$;
CREATE FUNCTION f_str_n3() RETURNS SMALLINT LANGUAGE JS AS $$ return "12.65"; $$;
CREATE FUNCTION f_str_nu() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS $$ return "-1"; $$;
CREATE FUNCTION f_str_nr1() RETURNS SMALLINT LANGUAGE JS AS $$ return "4.5"; $$;
CREATE FUNCTION f_str_nr2() RETURNS SMALLINT LANGUAGE JS AS $$ return "4.5e+0"; $$;
CREATE FUNCTION f_str_tb1() RETURNS SMALLINT LANGUAGE JS AS $$ return "1e+25"; $$;
CREATE FUNCTION f_str_tb2() RETURNS SMALLINT LANGUAGE JS AS $$ return "18446744073709551616"; $$;
CREATE FUNCTION f_array() RETURNS SMALLINT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS SMALLINT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS SMALLINT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS SMALLINT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS SMALLINT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS SMALLINT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
CREATE FUNCTION f_object_userr() RETURNS SMALLINT UNSIGNED LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n, f_int_m() AS im, f_int_nm() AS nm, f_uint_m() AS um;
i0	i1	n	im	nm	um
0	1	-1	32767	-32768	65535
SELECT f_int_m1();
ERROR 22003: Out of range value for column 'f_int_m1()' at row 1
SELECT f_int_nm1();
ERROR 22003: Out of range value for column 'f_int_nm1()' at row 1
SELECT f_uint_m1();
ERROR 22003: Out of range value for column 'f_uint_m1()' at row 1
SELECT f_uint_n();
ERROR 22003: Out of range value for column 'f_uint_n()' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
SELECT f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_4() AS n4, f_num_5();
n1	n2	n3	n4	f_num_5()
1	1	0	123	-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
SELECT f_num_r1() AS r1, f_num_r2() AS r2;
r1	r2
5	5
SELECT f_num_un();
ERROR 22003: Out of range value for column 'f_num_un()' at row 1
SELECT f_num_tb();
ERROR 22003: Out of range value for column 'f_num_tb()' at row 1
SELECT f_bigint() AS bi, f_bigint_n() AS bn;
bi	bn
100	-42
SELECT f_bigint_un();
ERROR 22003: Out of range value for column 'f_bigint_un()' at row 1
SELECT f_bigint_tb();
ERROR 22003: Out of range value for column 'f_bigint_tb()' at row 1
SELECT f_bool() AS bo;
ERROR HY000: Incorrect integer value: 'true' for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR HY000: Incorrect integer value: '' for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR HY000: Incorrect integer value: 'alpha' for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2, f_str_n3() AS n3;
n1	n2	n3
123	-2	13
SELECT f_str_nr1() AS nr1, f_str_nr2() AS nr2;
nr1	nr2
5	5
SELECT f_str_nu();
ERROR 22003: Out of range value for column 'f_str_nu()' at row 1
SELECT f_str_tb1();
ERROR 22003: Out of range value for column 'f_str_tb1()' at row 1
SELECT f_str_tb2();
ERROR 22003: Out of range value for column 'f_str_tb2()' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR HY000: Incorrect integer value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR HY000: Incorrect integer value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_typed_arr() AS ta;
ERROR 01000: Data truncated for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
SELECT f_object_userr() AS userr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_m;
DROP FUNCTION f_int_m1;
DROP FUNCTION f_int_nm;
DROP FUNCTION f_int_nm1;
DROP FUNCTION f_uint_m;
DROP FUNCTION f_uint_m1;
DROP FUNCTION f_uint_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_4;
DROP FUNCTION f_num_5;
DROP FUNCTION f_num_r1;
DROP FUNCTION f_num_r2;
DROP FUNCTION f_num_un;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_n;
DROP FUNCTION f_bigint_u;
DROP FUNCTION f_bigint_un;
DROP FUNCTION f_bigint_tb;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n3;
DROP FUNCTION f_str_nu;
DROP FUNCTION f_str_nr1;
DROP FUNCTION f_str_nr2;
DROP FUNCTION f_str_tb1;
DROP FUNCTION f_str_tb2;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
DROP FUNCTION f_object_userr;
CREATE FUNCTION f_undefined() RETURNS MEDIUMINT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS MEDIUMINT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_int_n() RETURNS MEDIUMINT LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_m() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 8388607; $$;
CREATE FUNCTION f_int_m1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 8388607 + 1; $$;
CREATE FUNCTION f_int_nm() RETURNS MEDIUMINT LANGUAGE JS AS $$ return -8388607 - 1; $$;
CREATE FUNCTION f_int_nm1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return -8388607 - 2; $$;
CREATE FUNCTION f_uint_m() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS  $$ return 2*8388607 + 1; $$;
CREATE FUNCTION f_uint_m1() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS $$ return 2*8388607 + 2; $$;
CREATE FUNCTION f_uint_n() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS  $$ return - 1; $$;
CREATE FUNCTION f_num_1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_num_2() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 5e-1; $$;
CREATE FUNCTION f_num_3() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 5e-2; $$;
CREATE FUNCTION f_num_4() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 1.2345e+2; $$;
CREATE FUNCTION f_num_5() RETURNS MEDIUMINT LANGUAGE JS AS $$ return -1.2345e+1; $$;
CREATE FUNCTION f_num_r1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 4.5; $$;
CREATE FUNCTION f_num_r2() RETURNS MEDIUMINT LANGUAGE JS AS $$ return 4.5e+0; $$;
CREATE FUNCTION f_num_un() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS $$ return -1.5; $$;
CREATE FUNCTION f_num_tb() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS $$ return 1e+70; $$;
CREATE FUNCTION f_bigint() RETURNS MEDIUMINT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bigint_n() RETURNS MEDIUMINT LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_u() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS $$ return BigInt(9007199254740991); $$;
CREATE FUNCTION f_bigint_un() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_tb() RETURNS MEDIUMINT LANGUAGE JS AS $$ return BigInt(1e+25); $$;
CREATE FUNCTION f_bool() RETURNS MEDIUMINT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS MEDIUMINT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_n1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "123"; $$;
CREATE FUNCTION f_str_n2() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "-2"; $$;
CREATE FUNCTION f_str_n3() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "12.65"; $$;
CREATE FUNCTION f_str_nu() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS $$ return "-1"; $$;
CREATE FUNCTION f_str_nr1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "4.5"; $$;
CREATE FUNCTION f_str_nr2() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "4.5e+0"; $$;
CREATE FUNCTION f_str_tb1() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "1e+25"; $$;
CREATE FUNCTION f_str_tb2() RETURNS MEDIUMINT LANGUAGE JS AS $$ return "18446744073709551616"; $$;
CREATE FUNCTION f_array() RETURNS MEDIUMINT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS MEDIUMINT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS MEDIUMINT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS MEDIUMINT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS MEDIUMINT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS MEDIUMINT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
CREATE FUNCTION f_object_userr() RETURNS MEDIUMINT UNSIGNED LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n, f_int_m() AS im, f_int_nm() AS nm, f_uint_m() AS um;
i0	i1	n	im	nm	um
0	1	-1	8388607	-8388608	16777215
SELECT f_int_m1();
ERROR 22003: Out of range value for column 'f_int_m1()' at row 1
SELECT f_int_nm1();
ERROR 22003: Out of range value for column 'f_int_nm1()' at row 1
SELECT f_uint_m1();
ERROR 22003: Out of range value for column 'f_uint_m1()' at row 1
SELECT f_uint_n();
ERROR 22003: Out of range value for column 'f_uint_n()' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
SELECT f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_4() AS n4, f_num_5();
n1	n2	n3	n4	f_num_5()
1	1	0	123	-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
SELECT f_num_r1() AS r1, f_num_r2() AS r2;
r1	r2
5	5
SELECT f_num_un();
ERROR 22003: Out of range value for column 'f_num_un()' at row 1
SELECT f_num_tb();
ERROR 22003: Out of range value for column 'f_num_tb()' at row 1
SELECT f_bigint() AS bi, f_bigint_n() AS bn;
bi	bn
100	-42
SELECT f_bigint_un();
ERROR 22003: Out of range value for column 'f_bigint_un()' at row 1
SELECT f_bigint_tb();
ERROR 22003: Out of range value for column 'f_bigint_tb()' at row 1
SELECT f_bool() AS bo;
ERROR HY000: Incorrect integer value: 'true' for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR HY000: Incorrect integer value: '' for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR HY000: Incorrect integer value: 'alpha' for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2, f_str_n3() AS n3;
n1	n2	n3
123	-2	13
SELECT f_str_nr1() AS nr1, f_str_nr2() AS nr2;
nr1	nr2
5	5
SELECT f_str_nu();
ERROR 22003: Out of range value for column 'f_str_nu()' at row 1
SELECT f_str_tb1();
ERROR 22003: Out of range value for column 'f_str_tb1()' at row 1
SELECT f_str_tb2();
ERROR 22003: Out of range value for column 'f_str_tb2()' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR HY000: Incorrect integer value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR HY000: Incorrect integer value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_typed_arr() AS ta;
ERROR 01000: Data truncated for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
SELECT f_object_userr() AS userr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_m;
DROP FUNCTION f_int_m1;
DROP FUNCTION f_int_nm;
DROP FUNCTION f_int_nm1;
DROP FUNCTION f_uint_m;
DROP FUNCTION f_uint_m1;
DROP FUNCTION f_uint_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_4;
DROP FUNCTION f_num_5;
DROP FUNCTION f_num_r1;
DROP FUNCTION f_num_r2;
DROP FUNCTION f_num_un;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_n;
DROP FUNCTION f_bigint_u;
DROP FUNCTION f_bigint_un;
DROP FUNCTION f_bigint_tb;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n3;
DROP FUNCTION f_str_nu;
DROP FUNCTION f_str_nr1;
DROP FUNCTION f_str_nr2;
DROP FUNCTION f_str_tb1;
DROP FUNCTION f_str_tb2;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
DROP FUNCTION f_object_userr;
CREATE FUNCTION f_undefined() RETURNS INT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS INT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS INT LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS INT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_int_n() RETURNS INT LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_m() RETURNS INT LANGUAGE JS AS $$ return 2147483647; $$;
CREATE FUNCTION f_int_m1() RETURNS INT LANGUAGE JS AS $$ return 2147483647 + 1; $$;
CREATE FUNCTION f_int_nm() RETURNS INT LANGUAGE JS AS $$ return -2147483647 - 1; $$;
CREATE FUNCTION f_int_nm1() RETURNS INT LANGUAGE JS AS $$ return -2147483647 - 2; $$;
CREATE FUNCTION f_uint_m() RETURNS INT UNSIGNED LANGUAGE JS AS  $$ return 2*2147483647 + 1; $$;
CREATE FUNCTION f_uint_m1() RETURNS INT UNSIGNED LANGUAGE JS AS $$ return 2*2147483647 + 2; $$;
CREATE FUNCTION f_uint_n() RETURNS INT UNSIGNED LANGUAGE JS AS  $$ return - 1; $$;
CREATE FUNCTION f_num_1() RETURNS INT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_num_2() RETURNS INT LANGUAGE JS AS $$ return 5e-1; $$;
CREATE FUNCTION f_num_3() RETURNS INT LANGUAGE JS AS $$ return 5e-2; $$;
CREATE FUNCTION f_num_4() RETURNS INT LANGUAGE JS AS $$ return 1.2345e+2; $$;
CREATE FUNCTION f_num_5() RETURNS INT LANGUAGE JS AS $$ return -1.2345e+1; $$;
CREATE FUNCTION f_num_r1() RETURNS INT LANGUAGE JS AS $$ return 4.5; $$;
CREATE FUNCTION f_num_r2() RETURNS INT LANGUAGE JS AS $$ return 4.5e+0; $$;
CREATE FUNCTION f_num_un() RETURNS INT UNSIGNED LANGUAGE JS AS $$ return -1.5; $$;
CREATE FUNCTION f_num_tb() RETURNS INT UNSIGNED LANGUAGE JS AS $$ return 1e+70; $$;
CREATE FUNCTION f_bigint() RETURNS INT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bigint_n() RETURNS INT LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_u() RETURNS INT UNSIGNED LANGUAGE JS AS $$ return BigInt(9007199254740991); $$;
CREATE FUNCTION f_bigint_un() RETURNS INT UNSIGNED LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_tb() RETURNS INT LANGUAGE JS AS $$ return BigInt(1e+25); $$;
CREATE FUNCTION f_bool() RETURNS INT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS INT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS INT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_n1() RETURNS INT LANGUAGE JS AS $$ return "123"; $$;
CREATE FUNCTION f_str_n2() RETURNS INT LANGUAGE JS AS $$ return "-2"; $$;
CREATE FUNCTION f_str_n3() RETURNS INT LANGUAGE JS AS $$ return "12.65"; $$;
CREATE FUNCTION f_str_nu() RETURNS INT UNSIGNED LANGUAGE JS AS $$ return "-1"; $$;
CREATE FUNCTION f_str_nr1() RETURNS INT LANGUAGE JS AS $$ return "4.5"; $$;
CREATE FUNCTION f_str_nr2() RETURNS INT LANGUAGE JS AS $$ return "4.5e+0"; $$;
CREATE FUNCTION f_str_tb1() RETURNS INT LANGUAGE JS AS $$ return "1e+25"; $$;
CREATE FUNCTION f_str_tb2() RETURNS INT LANGUAGE JS AS $$ return "18446744073709551616"; $$;
CREATE FUNCTION f_array() RETURNS INT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS INT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS INT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS INT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS INT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS INT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
CREATE FUNCTION f_object_userr() RETURNS INT UNSIGNED LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n, f_int_m() AS im, f_int_nm() AS nm, f_uint_m() AS um;
i0	i1	n	im	nm	um
0	1	-1	2147483647	-2147483648	4294967295
SELECT f_int_m1();
ERROR 22003: Out of range value for column 'f_int_m1()' at row 1
SELECT f_int_nm1();
ERROR 22003: Out of range value for column 'f_int_nm1()' at row 1
SELECT f_uint_m1();
ERROR 22003: Out of range value for column 'f_uint_m1()' at row 1
SELECT f_uint_n();
ERROR 22003: Out of range value for column 'f_uint_n()' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
SELECT f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_4() AS n4, f_num_5();
n1	n2	n3	n4	f_num_5()
1	1	0	123	-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
SELECT f_num_r1() AS r1, f_num_r2() AS r2;
r1	r2
5	5
SELECT f_num_un();
ERROR 22003: Out of range value for column 'f_num_un()' at row 1
SELECT f_num_tb();
ERROR 22003: Out of range value for column 'f_num_tb()' at row 1
SELECT f_bigint() AS bi, f_bigint_n() AS bn;
bi	bn
100	-42
SELECT f_bigint_un();
ERROR 22003: Out of range value for column 'f_bigint_un()' at row 1
SELECT f_bigint_tb();
ERROR 22003: Out of range value for column 'f_bigint_tb()' at row 1
SELECT f_bool() AS bo;
ERROR HY000: Incorrect integer value: 'true' for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR HY000: Incorrect integer value: '' for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR HY000: Incorrect integer value: 'alpha' for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2, f_str_n3() AS n3;
n1	n2	n3
123	-2	13
SELECT f_str_nr1() AS nr1, f_str_nr2() AS nr2;
nr1	nr2
5	5
SELECT f_str_nu();
ERROR 22003: Out of range value for column 'f_str_nu()' at row 1
SELECT f_str_tb1();
ERROR 22003: Out of range value for column 'f_str_tb1()' at row 1
SELECT f_str_tb2();
ERROR 22003: Out of range value for column 'f_str_tb2()' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR HY000: Incorrect integer value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR HY000: Incorrect integer value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_typed_arr() AS ta;
ERROR 01000: Data truncated for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
SELECT f_object_userr() AS userr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_m;
DROP FUNCTION f_int_m1;
DROP FUNCTION f_int_nm;
DROP FUNCTION f_int_nm1;
DROP FUNCTION f_uint_m;
DROP FUNCTION f_uint_m1;
DROP FUNCTION f_uint_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_4;
DROP FUNCTION f_num_5;
DROP FUNCTION f_num_r1;
DROP FUNCTION f_num_r2;
DROP FUNCTION f_num_un;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_n;
DROP FUNCTION f_bigint_u;
DROP FUNCTION f_bigint_un;
DROP FUNCTION f_bigint_tb;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n3;
DROP FUNCTION f_str_nu;
DROP FUNCTION f_str_nr1;
DROP FUNCTION f_str_nr2;
DROP FUNCTION f_str_tb1;
DROP FUNCTION f_str_tb2;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
DROP FUNCTION f_object_userr;
CREATE FUNCTION f_undefined() RETURNS BIGINT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS BIGINT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS BIGINT LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS BIGINT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_int_n() RETURNS BIGINT LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_m() RETURNS BIGINT LANGUAGE JS AS $$ return 9007199254740991; $$;
CREATE FUNCTION f_int_m1() RETURNS BIGINT LANGUAGE JS AS $$ return 9007199254740991 + 1; $$;
CREATE FUNCTION f_int_nm() RETURNS BIGINT LANGUAGE JS AS $$ return -9007199254740991 - 1; $$;
CREATE FUNCTION f_int_nm1() RETURNS BIGINT LANGUAGE JS AS $$ return -9007199254740991 - 2; $$;
CREATE FUNCTION f_uint_m() RETURNS BIGINT UNSIGNED LANGUAGE JS AS  $$ return 2*9007199254740991 + 1; $$;
CREATE FUNCTION f_uint_m1() RETURNS BIGINT UNSIGNED LANGUAGE JS AS $$ return 2*9007199254740991 + 2; $$;
CREATE FUNCTION f_uint_n() RETURNS BIGINT UNSIGNED LANGUAGE JS AS  $$ return - 1; $$;
CREATE FUNCTION f_num_1() RETURNS BIGINT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_num_2() RETURNS BIGINT LANGUAGE JS AS $$ return 5e-1; $$;
CREATE FUNCTION f_num_3() RETURNS BIGINT LANGUAGE JS AS $$ return 5e-2; $$;
CREATE FUNCTION f_num_4() RETURNS BIGINT LANGUAGE JS AS $$ return 1.2345e+2; $$;
CREATE FUNCTION f_num_5() RETURNS BIGINT LANGUAGE JS AS $$ return -1.2345e+1; $$;
CREATE FUNCTION f_num_r1() RETURNS BIGINT LANGUAGE JS AS $$ return 4.5; $$;
CREATE FUNCTION f_num_r2() RETURNS BIGINT LANGUAGE JS AS $$ return 4.5e+0; $$;
CREATE FUNCTION f_num_un() RETURNS BIGINT UNSIGNED LANGUAGE JS AS $$ return -1.5; $$;
CREATE FUNCTION f_num_tb() RETURNS BIGINT UNSIGNED LANGUAGE JS AS $$ return 1e+70; $$;
CREATE FUNCTION f_bigint() RETURNS BIGINT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bigint_n() RETURNS BIGINT LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_u() RETURNS BIGINT UNSIGNED LANGUAGE JS AS $$ return BigInt(9007199254740991); $$;
CREATE FUNCTION f_bigint_un() RETURNS BIGINT UNSIGNED LANGUAGE JS AS $$ return BigInt(-42); $$;
CREATE FUNCTION f_bigint_tb() RETURNS BIGINT LANGUAGE JS AS $$ return BigInt(1e+25); $$;
CREATE FUNCTION f_bool() RETURNS BIGINT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS BIGINT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS BIGINT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_n1() RETURNS BIGINT LANGUAGE JS AS $$ return "123"; $$;
CREATE FUNCTION f_str_n2() RETURNS BIGINT LANGUAGE JS AS $$ return "-2"; $$;
CREATE FUNCTION f_str_n3() RETURNS BIGINT LANGUAGE JS AS $$ return "12.65"; $$;
CREATE FUNCTION f_str_nu() RETURNS BIGINT UNSIGNED LANGUAGE JS AS $$ return "-1"; $$;
CREATE FUNCTION f_str_nr1() RETURNS BIGINT LANGUAGE JS AS $$ return "4.5"; $$;
CREATE FUNCTION f_str_nr2() RETURNS BIGINT LANGUAGE JS AS $$ return "4.5e+0"; $$;
CREATE FUNCTION f_str_tb1() RETURNS BIGINT LANGUAGE JS AS $$ return "1e+25"; $$;
CREATE FUNCTION f_str_tb2() RETURNS BIGINT LANGUAGE JS AS $$ return "18446744073709551616"; $$;
CREATE FUNCTION f_array() RETURNS BIGINT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS BIGINT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS BIGINT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS BIGINT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS BIGINT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS BIGINT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
CREATE FUNCTION f_object_userr() RETURNS BIGINT UNSIGNED LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n, f_int_m() AS im, f_int_nm() AS nm, f_uint_m() AS um;
i0	i1	n	im	nm	um
0	1	-1	9007199254740991	-9007199254740992	18014398509481984
SELECT f_uint_n();
ERROR 22003: Out of range value for column 'f_uint_n()' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
SELECT f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_4() AS n4, f_num_5();
n1	n2	n3	n4	f_num_5()
1	1	0	123	-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
SELECT f_num_r1() AS r1, f_num_r2() AS r2;
r1	r2
5	5
SELECT f_num_un();
ERROR 22003: Out of range value for column 'f_num_un()' at row 1
SELECT f_num_tb();
ERROR 22003: Out of range value for column 'f_num_tb()' at row 1
SELECT f_bigint() AS bi, f_bigint_n() AS bn;
bi	bn
100	-42
SELECT f_bigint_u() AS bu;
bu
9007199254740991
SELECT f_bigint_un();
ERROR 22003: Out of range value for column 'f_bigint_un()' at row 1
SELECT f_bigint_tb();
ERROR 22003: Out of range value for column 'f_bigint_tb()' at row 1
SELECT f_bool() AS bo;
ERROR HY000: Incorrect integer value: 'true' for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR HY000: Incorrect integer value: '' for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR HY000: Incorrect integer value: 'alpha' for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2, f_str_n3() AS n3;
n1	n2	n3
123	-2	13
SELECT f_str_nr1() AS nr1, f_str_nr2() AS nr2;
nr1	nr2
5	5
SELECT f_str_nu();
ERROR 22003: Out of range value for column 'f_str_nu()' at row 1
SELECT f_str_tb1();
ERROR 22003: Out of range value for column 'f_str_tb1()' at row 1
SELECT f_str_tb2();
ERROR 22003: Out of range value for column 'f_str_tb2()' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR HY000: Incorrect integer value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR HY000: Incorrect integer value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_typed_arr() AS ta;
ERROR 01000: Data truncated for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
SELECT f_object_userr() AS userr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_m;
DROP FUNCTION f_int_m1;
DROP FUNCTION f_int_nm;
DROP FUNCTION f_int_nm1;
DROP FUNCTION f_uint_m;
DROP FUNCTION f_uint_m1;
DROP FUNCTION f_uint_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_4;
DROP FUNCTION f_num_5;
DROP FUNCTION f_num_r1;
DROP FUNCTION f_num_r2;
DROP FUNCTION f_num_un;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_n;
DROP FUNCTION f_bigint_u;
DROP FUNCTION f_bigint_un;
DROP FUNCTION f_bigint_tb;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n3;
DROP FUNCTION f_str_nu;
DROP FUNCTION f_str_nr1;
DROP FUNCTION f_str_nr2;
DROP FUNCTION f_str_tb1;
DROP FUNCTION f_str_tb2;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
DROP FUNCTION f_object_userr;
#
# For floating point SQL-types conversion works in similar way:
# - JS 'null' and 'undefined' values which are mapped to SQL NULL.
# - If JS numeric value can be safely converted to SQL-type we use
#   direct conversion (for performance reasons).
# - Otherwise, as well as for all other types of JS values conversion
#   is done through strings (i.e. by doing JS toString() conversion
#   and trying to store resulting string as SQL floating-point value).
CREATE FUNCTION f_undefined() RETURNS FLOAT LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS FLOAT LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS FLOAT LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS FLOAT LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_int_n() RETURNS FLOAT LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_num_1() RETURNS FLOAT LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_num_2() RETURNS FLOAT LANGUAGE JS AS $$ return 5e-1; $$;
CREATE FUNCTION f_num_3() RETURNS FLOAT LANGUAGE JS AS $$ return -5e-2; $$;
CREATE FUNCTION f_num_m() RETURNS FLOAT LANGUAGE JS AS $$ return 3.4028234e+38; $$;
CREATE FUNCTION f_bigint() RETURNS FLOAT LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bigint_pl() RETURNS FLOAT LANGUAGE JS AS $$ return BigInt("36028797018963967"); $$;
CREATE FUNCTION f_bool() RETURNS FLOAT LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS FLOAT LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS FLOAT LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_n1() RETURNS FLOAT LANGUAGE JS AS $$ return "123"; $$;
CREATE FUNCTION f_str_n2() RETURNS FLOAT LANGUAGE JS AS $$ return "12.65"; $$;
CREATE FUNCTION f_str_n_pl() RETURNS FLOAT LANGUAGE JS AS $$ return "36028797018963967"; $$;
CREATE FUNCTION f_str_n_tb() RETURNS FLOAT LANGUAGE JS AS $$ return "1.1e+400"; $$;
CREATE FUNCTION f_array() RETURNS FLOAT LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS FLOAT LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS FLOAT LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS FLOAT LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS FLOAT LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS FLOAT LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n, f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_m() AS nm;
i0	i1	n	n1	n2	n3	nm
0	1	-1	1.25	0.5	-0.05	3.40282e38
SELECT f_bigint() AS bi;
bi
100
SELECT f_bigint_pl() AS bipl;
bipl
3.60288e16
SELECT f_bool() AS bo;
ERROR 01000: Data truncated for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR 01000: Data truncated for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR 01000: Data truncated for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2;
n1	n2
123	12.65
SELECT f_str_n_pl() AS spl;
spl
3.60288e16
SELECT f_str_n_tb() AS stb;
ERROR 22003: Out of range value for column 'stb' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR 01000: Data truncated for column 'o' at row 1
SELECT f_func() AS f;
ERROR 01000: Data truncated for column 'f' at row 1
SELECT f_typed_arr() AS ta;
ERROR 01000: Data truncated for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR 01000: Data truncated for column 'dv' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_m;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_pl;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n_pl;
DROP FUNCTION f_str_n_tb;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS DOUBLE LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS DOUBLE LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS DOUBLE LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS DOUBLE LANGUAGE JS AS $$ return 1; $$;
CREATE FUNCTION f_int_n() RETURNS DOUBLE LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_num_1() RETURNS DOUBLE LANGUAGE JS AS $$ return 1.25; $$;
CREATE FUNCTION f_num_2() RETURNS DOUBLE LANGUAGE JS AS $$ return 5e-1; $$;
CREATE FUNCTION f_num_3() RETURNS DOUBLE LANGUAGE JS AS $$ return -5e-2; $$;
CREATE FUNCTION f_num_m() RETURNS DOUBLE LANGUAGE JS AS $$ return 1.7976931348623157e+308; $$;
CREATE FUNCTION f_bigint() RETURNS DOUBLE LANGUAGE JS AS $$ return BigInt(100); $$;
CREATE FUNCTION f_bigint_pl() RETURNS DOUBLE LANGUAGE JS AS $$ return BigInt("36028797018963967"); $$;
CREATE FUNCTION f_bool() RETURNS DOUBLE LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS DOUBLE LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS DOUBLE LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_n1() RETURNS DOUBLE LANGUAGE JS AS $$ return "123"; $$;
CREATE FUNCTION f_str_n2() RETURNS DOUBLE LANGUAGE JS AS $$ return "12.65"; $$;
CREATE FUNCTION f_str_n_pl() RETURNS DOUBLE LANGUAGE JS AS $$ return "36028797018963967"; $$;
CREATE FUNCTION f_str_n_tb() RETURNS DOUBLE LANGUAGE JS AS $$ return "1.1e+400"; $$;
CREATE FUNCTION f_array() RETURNS DOUBLE LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS DOUBLE LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS DOUBLE LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS DOUBLE LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS DOUBLE LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS DOUBLE LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n, f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_m() AS nm;
i0	i1	n	n1	n2	n3	nm
0	1	-1	1.25	0.5	-0.05	1.7976931348623157e308
SELECT f_bigint() AS bi;
bi
100
SELECT f_bigint_pl() AS bipl;
bipl
3.602879701896397e16
SELECT f_bool() AS bo;
ERROR 01000: Data truncated for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR 01000: Data truncated for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR 01000: Data truncated for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2;
n1	n2
123	12.65
SELECT f_str_n_pl() AS spl;
spl
3.602879701896397e16
SELECT f_str_n_tb() AS stb;
ERROR 22003: Out of range value for column 'stb' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR 01000: Data truncated for column 'o' at row 1
SELECT f_func() AS f;
ERROR 01000: Data truncated for column 'f' at row 1
SELECT f_typed_arr() AS ta;
ERROR 01000: Data truncated for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR 01000: Data truncated for column 'dv' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_m;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_pl;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n_pl;
DROP FUNCTION f_str_n_tb;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
#
# For DECIMAL SQL-type conversion is done through strings (by doing JS
# toString() conversion and trying to store resulting string as SQL
# type value). There is no point in optimizing conversion from Number
# type, like it is done for floating point SQL-types, as SQL core does
# double -> DECIMAL conversions through strings. As usual JS 'null'
# and 'undefined' values are mapped to SQL NULL.
#
CREATE FUNCTION f_undefined() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return $$;
CREATE FUNCTION f_null() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return null $$;
CREATE FUNCTION f_int_0() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 0 $$;
CREATE FUNCTION f_int_1() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 1 $$;
CREATE FUNCTION f_int_n() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return -1 $$;
CREATE FUNCTION f_int_tb() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 100 $$;
CREATE FUNCTION f_num_1() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 1.25 $$;
CREATE FUNCTION f_num_2() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 5e-1 $$;
CREATE FUNCTION f_num_3() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return -5e-2 $$;
CREATE FUNCTION f_num_m() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 99.99 $$;
CREATE FUNCTION f_num_tb() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 100.01 $$;
CREATE FUNCTION f_num_tl() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return 0.0125 $$;
CREATE FUNCTION f_bigint_1() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return BigInt(10) $$;
CREATE FUNCTION f_bigint_2() RETURNS DECIMAL(20,2) LANGUAGE JS AS $$ return BigInt("10000000000000000") $$;
CREATE FUNCTION f_bigint_tb() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return BigInt(1000) $$;
CREATE FUNCTION f_bool() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return true $$;
CREATE FUNCTION f_str_e() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return "" $$;
CREATE FUNCTION f_str_a() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return "alpha" $$;
CREATE FUNCTION f_str_n1() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return "12" $$;
CREATE FUNCTION f_str_n2() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return "12.65" $$;
CREATE FUNCTION f_str_n3() RETURNS DECIMAL(20,2) LANGUAGE JS AS $$ return "10000000000000000.12" $$;
CREATE FUNCTION f_str_tb() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return "123" $$;
CREATE FUNCTION f_str_tl() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return "12.324" $$;
CREATE FUNCTION f_str_api() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return "π" $$;
CREATE FUNCTION f_array() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return function (a) { return 1} $$;
CREATE FUNCTION f_object_serr() RETURNS DECIMAL(4,2) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_n() AS n;
i0	i1	n
0.00	1.00	-1.00
SELECT f_int_tb() AS itb;
ERROR 22003: Out of range value for column 'itb' at row 1
SELECT f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_m() AS nm;
n1	n2	n3	nm
1.25	0.50	-0.05	99.99
SELECT f_num_tb() AS ntb;
ERROR 22003: Out of range value for column 'ntb' at row 1
SELECT f_num_tl() AS ntl;
ntl
0.01
Warnings:
Note	1265	Data truncated for column 'ntl' at row 1
SELECT f_bigint_1() AS bi1, f_bigint_2() AS bi2;
bi1	bi2
10.00	10000000000000000.00
SELECT f_bigint_tb() AS bitb;
ERROR 22003: Out of range value for column 'bitb' at row 1
SELECT f_bool() AS bo;
ERROR HY000: Incorrect decimal value: 'true' for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR HY000: Incorrect decimal value: '' for column 'se' at row 1
SELECT f_str_a() AS sa;
ERROR HY000: Incorrect decimal value: 'alpha' for column 'sa' at row 1
SELECT f_str_n1() AS n1, f_str_n2() AS n2, f_str_n3() AS n3;
n1	n2	n3
12.00	12.65	10000000000000000.12
SELECT f_str_tb() AS stb;
ERROR 22003: Out of range value for column 'stb' at row 1
SELECT f_str_tl() AS stl;
stl
12.32
Warnings:
Note	1265	Data truncated for column 'stl' at row 1
SELECT f_str_api() AS sapi;
ERROR HY000: Incorrect decimal value: 'π' for column 'sapi' at row 1
SELECT f_array() AS a;
ERROR HY000: Incorrect decimal value: '1,2,3' for column 'a' at row 1
SELECT f_object() AS o;
ERROR HY000: Incorrect decimal value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR HY000: Incorrect decimal value: 'function (a) { return 1}' for column 'f' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_tb;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_m;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_num_tl;
DROP FUNCTION f_bigint_1;
DROP FUNCTION f_bigint_2;
DROP FUNCTION f_bigint_tb;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_n1;
DROP FUNCTION f_str_n2;
DROP FUNCTION f_str_n3;
DROP FUNCTION f_str_tb;
DROP FUNCTION f_str_tl;
DROP FUNCTION f_str_api;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_object_serr;
#
# YEAR return type is handled similarly to integer types.
#
CREATE FUNCTION f_undefined() RETURNS YEAR LANGUAGE JS AS $$ return $$;
CREATE FUNCTION f_null() RETURNS YEAR LANGUAGE JS AS $$ return null $$;
CREATE FUNCTION f_int_0() RETURNS YEAR LANGUAGE JS AS $$ return 0 $$;
CREATE FUNCTION f_int_1() RETURNS YEAR LANGUAGE JS AS $$ return 7 $$;
CREATE FUNCTION f_int_2() RETURNS YEAR LANGUAGE JS AS $$ return 69 $$;
CREATE FUNCTION f_int_3() RETURNS YEAR LANGUAGE JS AS $$ return 70 $$;
CREATE FUNCTION f_int_o() RETURNS YEAR LANGUAGE JS AS $$ return 123 $$;
CREATE FUNCTION f_int_mi() RETURNS YEAR LANGUAGE JS AS $$ return 1901 $$;
CREATE FUNCTION f_int_mx() RETURNS YEAR LANGUAGE JS AS $$ return 2155 $$;
CREATE FUNCTION f_int_mi1() RETURNS YEAR LANGUAGE JS AS $$ return 1900 $$;
CREATE FUNCTION f_int_mx1() RETURNS YEAR LANGUAGE JS AS $$ return 2156 $$;
CREATE FUNCTION f_int_n() RETURNS YEAR LANGUAGE JS AS $$ return -1 $$;
CREATE FUNCTION f_num_1() RETURNS YEAR LANGUAGE JS AS $$ return 1.25 $$;
CREATE FUNCTION f_num_2() RETURNS YEAR LANGUAGE JS AS $$ return 5e-1 $$;
CREATE FUNCTION f_num_3() RETURNS YEAR LANGUAGE JS AS $$ return 5e+1 $$;
CREATE FUNCTION f_num_4() RETURNS YEAR LANGUAGE JS AS $$ return 1.901e+3 $$;
CREATE FUNCTION f_num_tb() RETURNS YEAR LANGUAGE JS AS $$ return 2.2e+3 $$;
CREATE FUNCTION f_bigint() RETURNS YEAR LANGUAGE JS AS $$ return BigInt(70) $$;
CREATE FUNCTION f_bool() RETURNS YEAR LANGUAGE JS AS $$ return true $$;
CREATE FUNCTION f_str_e() RETURNS YEAR LANGUAGE JS AS $$ return "" $$;
CREATE FUNCTION f_str_a() RETURNS YEAR LANGUAGE JS AS $$ return "alpha" $$;
CREATE FUNCTION f_str_1() RETURNS YEAR LANGUAGE JS AS $$ return "12" $$;
CREATE FUNCTION f_str_2() RETURNS YEAR LANGUAGE JS AS $$ return "75" $$;
CREATE FUNCTION f_str_3() RETURNS YEAR LANGUAGE JS AS $$ return "7.5" $$;
CREATE FUNCTION f_str_o() RETURNS YEAR LANGUAGE JS AS $$ return "100" $$;
CREATE FUNCTION f_str_mi() RETURNS YEAR LANGUAGE JS AS $$ return"1901" $$;
CREATE FUNCTION f_str_mx() RETURNS YEAR LANGUAGE JS AS $$ return"2155" $$;
CREATE FUNCTION f_str_n() RETURNS YEAR LANGUAGE JS AS $$ return "-1" $$;
CREATE FUNCTION f_str_mi1() RETURNS YEAR LANGUAGE JS AS $$ return"1900" $$;
CREATE FUNCTION f_str_mx1() RETURNS YEAR LANGUAGE JS AS $$ return"2156" $$;
CREATE FUNCTION f_array() RETURNS YEAR LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS YEAR LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS YEAR LANGUAGE JS AS $$ return function (a) { return 1} $$;
CREATE FUNCTION f_object_serr() RETURNS YEAR LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0() AS i0, f_int_1() AS i1, f_int_2() AS i2, f_int_3() AS i3;
i0	i1	i2	i3
0	2007	2069	1970
SELECT f_int_o() AS o;
ERROR 22003: Out of range value for column 'o' at row 1
SELECT f_int_mi() AS mi, f_int_mx() AS mx;
mi	mx
1901	2155
SELECT f_int_mi1();
ERROR 22003: Out of range value for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22003: Out of range value for column 'f_int_mx1()' at row 1
SELECT f_int_n();
ERROR 22003: Out of range value for column 'f_int_n()' at row 1
SELECT f_num_1() AS n1, f_num_2() AS n2, f_num_3() AS n3, f_num_4() AS n4;
n1	n2	n3	n4
2001	2001	2050	1901
SELECT f_num_tb();
ERROR 22003: Out of range value for column 'f_num_tb()' at row 1
SELECT f_bigint() AS bi;
bi
1970
SELECT f_bool();
ERROR HY000: Incorrect integer value: 'true' for column 'f_bool()' at row 1
SELECT f_str_e();
ERROR HY000: Incorrect integer value: '' for column 'f_str_e()' at row 1
SELECT f_str_a();
ERROR HY000: Incorrect integer value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1, f_str_2() AS s2, f_str_3() AS s3;
s1	s2	s3
2012	1975	2008
SELECT f_str_o();
ERROR 22003: Out of range value for column 'f_str_o()' at row 1
SELECT f_str_mi() AS mi, f_str_mx() AS mx;
mi	mx
1901	2155
SELECT f_str_n();
ERROR 22003: Out of range value for column 'f_str_n()' at row 1
SELECT f_str_mi1();
ERROR 22003: Out of range value for column 'f_str_mi1()' at row 1
SELECT f_str_mx1();
ERROR 22003: Out of range value for column 'f_str_mx1()' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR HY000: Incorrect integer value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR HY000: Incorrect integer value: 'function (a) { return 1}' for column 'f' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_2;
DROP FUNCTION f_int_3;
DROP FUNCTION f_int_o;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_int_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_3;
DROP FUNCTION f_num_4;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_o;
DROP FUNCTION f_str_mi;
DROP FUNCTION f_str_mx;
DROP FUNCTION f_str_n;
DROP FUNCTION f_str_mi1;
DROP FUNCTION f_str_mx1;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_object_serr;
#
# For other datetime SQL-types conversion is done through strings
# (by doing JS toString() conversion and trying to store resulting
# string as SQL type value). As usual JS 'null' and 'undefined'
# values which are mapped to SQL NULL.
#
CREATE FUNCTION f_undefined() RETURNS DATE LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS DATE LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS DATE LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS DATE LANGUAGE JS AS $$ return 20200101; $$;
CREATE FUNCTION f_int_mi() RETURNS DATE LANGUAGE JS AS $$ return 10000101; $$;
CREATE FUNCTION f_int_mx() RETURNS DATE LANGUAGE JS AS $$ return 99991231; $$;
CREATE FUNCTION f_int_n() RETURNS DATE LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_mi1() RETURNS DATE LANGUAGE JS AS $$ return 10000101 - 1; $$;
CREATE FUNCTION f_int_mx1() RETURNS DATE LANGUAGE JS AS $$ return 99991231 + 1; $$;
CREATE FUNCTION f_num() RETURNS DATE LANGUAGE JS AS $$ return 2.0200101e+7; $$;
CREATE FUNCTION f_bigint() RETURNS DATE LANGUAGE JS AS $$ return BigInt(20200101); $$;
CREATE FUNCTION f_bool() RETURNS DATE LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS DATE LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS DATE LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS DATE LANGUAGE JS AS $$ return "2020-01-01"; $$;
CREATE FUNCTION f_str_b() RETURNS DATE LANGUAGE JS AS $$ return "2020-13-01"; $$;
CREATE FUNCTION f_str_ax() RETURNS DATE LANGUAGE JS AS $$ return "\u{1F384}"; $$;
CREATE FUNCTION f_date() RETURNS DATE LANGUAGE JS AS $$ return new Date(2023,11,22,13,0,0,123) $$;
CREATE FUNCTION f_array() RETURNS DATE LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS DATE LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS DATE LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS DATE LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS DATE LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS DATE LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0();
ERROR 22007: Incorrect date value: '0' for column 'f_int_0()' at row 1
SELECT f_int_1() AS i1, f_int_mi() AS imi, f_int_mx() AS imx;
i1	imi	imx
2020-01-01	1000-01-01	9999-12-31
SELECT f_int_n();
ERROR 22007: Incorrect date value: '-1' for column 'f_int_n()' at row 1
SELECT f_int_mi1();
ERROR 22007: Incorrect date value: '10000100' for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22007: Incorrect date value: '99991232' for column 'f_int_mx1()' at row 1
SELECT f_num() AS n;
n
2020-01-01
SELECT f_bigint() AS bi;
bi
2020-01-01
SELECT f_bool();
ERROR 22007: Incorrect date value: 'true' for column 'f_bool()' at row 1
SELECT f_str_e() AS se;
ERROR 22007: Incorrect date value: '' for column 'se' at row 1
SELECT f_str_a();
ERROR 22007: Incorrect date value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1;
s1
2020-01-01
SELECT f_str_b();
ERROR 22007: Incorrect date value: '2020-13-01' for column 'f_str_b()' at row 1
SELECT f_str_ax();
ERROR 22007: Incorrect date value: '?' for column 'f_str_ax()' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
SELECT f_date() AS d;
ERROR 22007: Incorrect date value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'd' at row 1
SELECT f_object() AS o;
ERROR 22007: Incorrect date value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR 22007: Incorrect date value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_data_view() AS dv;
ERROR 22007: Incorrect date value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_b;
DROP FUNCTION f_str_ax;
DROP FUNCTION f_date;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS TIME LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TIME LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS TIME LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS TIME LANGUAGE JS AS $$ return 11; $$;
CREATE FUNCTION f_int_mi() RETURNS TIME LANGUAGE JS AS $$ return -8385959; $$;
CREATE FUNCTION f_int_mx() RETURNS TIME LANGUAGE JS AS $$ return 8385959; $$;
CREATE FUNCTION f_int_n() RETURNS TIME LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_mi1() RETURNS TIME LANGUAGE JS AS $$ return -8385959 - 1; $$;
CREATE FUNCTION f_int_mx1() RETURNS TIME LANGUAGE JS AS $$ return 8385959 + 1; $$;
CREATE FUNCTION f_num() RETURNS TIME LANGUAGE JS AS $$ return 11.1; $$;
CREATE FUNCTION f_bigint() RETURNS TIME LANGUAGE JS AS $$ return BigInt(11); $$;
CREATE FUNCTION f_bool() RETURNS TIME LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TIME LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS TIME LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS TIME LANGUAGE JS AS $$ return "00:11"; $$;
CREATE FUNCTION f_str_b() RETURNS TIME LANGUAGE JS AS $$ return "00:65"; $$;
CREATE FUNCTION f_str_ax() RETURNS TIME LANGUAGE JS AS $$ return "\u{1F384}"; $$;
CREATE FUNCTION f_date() RETURNS TIME LANGUAGE JS AS $$ return new Date(2023,11,22,13,0,0,123) $$;
CREATE FUNCTION f_array() RETURNS TIME LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TIME LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TIME LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TIME LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TIME LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS TIME LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
# 0 is valid value for TIME type.
SELECT f_int_0();
f_int_0()
00:00:00
SELECT f_int_1() AS i1, f_int_mi() AS imi, f_int_mx() AS imx;
i1	imi	imx
00:00:11	-838:59:59	838:59:59
SELECT f_int_mi1();
ERROR 22007: Incorrect time value: '-8385960' for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22007: Incorrect time value: '8385960' for column 'f_int_mx1()' at row 1
SELECT f_num() AS n;
n
00:00:11
SELECT f_bigint() AS bi;
bi
00:00:11
SELECT f_bool();
ERROR 22007: Incorrect time value: 'true' for column 'f_bool()' at row 1
# Empty string is converted to 0 for TIME type.
SELECT f_str_e() AS se;
se
00:00:00
SELECT f_str_a();
ERROR 22007: Incorrect time value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1;
s1
00:11:00
SELECT f_str_b();
ERROR 22007: Incorrect time value: '00:65' for column 'f_str_b()' at row 1
SELECT f_str_ax();
ERROR 22007: Incorrect time value: '?' for column 'f_str_ax()' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
SELECT f_date() AS d;
ERROR 22007: Incorrect time value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'd' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_array() AS a;
ERROR 22007: Incorrect time value: '1,2,3' for column 'a' at row 1
SELECT f_object() AS o;
ERROR 22007: Incorrect time value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR 22007: Incorrect time value: 'function (a) { return 1;}' for column 'f' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_typed_arr() AS ta;
ERROR 22007: Incorrect time value: '0,1,2,3,5' for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR 22007: Incorrect time value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_b;
DROP FUNCTION f_str_ax;
DROP FUNCTION f_date;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS TIME(1) LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TIME(1) LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS TIME(1) LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS TIME(1) LANGUAGE JS AS $$ return 11; $$;
CREATE FUNCTION f_int_mi() RETURNS TIME(1) LANGUAGE JS AS $$ return -8385959; $$;
CREATE FUNCTION f_int_mx() RETURNS TIME(1) LANGUAGE JS AS $$ return 8385959; $$;
CREATE FUNCTION f_int_n() RETURNS TIME(1) LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_mi1() RETURNS TIME(1) LANGUAGE JS AS $$ return -8385959 - 1; $$;
CREATE FUNCTION f_int_mx1() RETURNS TIME(1) LANGUAGE JS AS $$ return 8385959 + 1; $$;
CREATE FUNCTION f_num() RETURNS TIME(1) LANGUAGE JS AS $$ return 11.1; $$;
CREATE FUNCTION f_bigint() RETURNS TIME(1) LANGUAGE JS AS $$ return BigInt(11); $$;
CREATE FUNCTION f_bool() RETURNS TIME(1) LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TIME(1) LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS TIME(1) LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS TIME(1) LANGUAGE JS AS $$ return "00:11.1"; $$;
CREATE FUNCTION f_str_b() RETURNS TIME(1) LANGUAGE JS AS $$ return "01:71.1"; $$;
CREATE FUNCTION f_str_ax() RETURNS TIME(1) LANGUAGE JS AS $$ return "\u{1F384}"; $$;
CREATE FUNCTION f_date() RETURNS TIME(1) LANGUAGE JS AS $$ return new Date(2023,11,22,13,0,0,123) $$;
CREATE FUNCTION f_array() RETURNS TIME(1) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TIME(1) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TIME(1) LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TIME(1) LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TIME(1) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS TIME(1) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
# 0 is valid value for TIME type.
SELECT f_int_0();
f_int_0()
00:00:00.0
SELECT f_int_1() AS i1, f_int_mi() AS imi, f_int_mx() AS imx;
i1	imi	imx
00:00:11.0	-838:59:59.0	838:59:59.0
SELECT f_int_mi1();
ERROR 22007: Incorrect time value: '-8385960' for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22007: Incorrect time value: '8385960' for column 'f_int_mx1()' at row 1
SELECT f_num() AS n;
n
00:00:11.1
SELECT f_bigint() AS bi;
bi
00:00:11.0
SELECT f_bool();
ERROR 22007: Incorrect time value: 'true' for column 'f_bool()' at row 1
# Empty string is converted to 0 for TIME type.
SELECT f_str_e() AS se;
se
00:00:00.0
SELECT f_str_a();
ERROR 22007: Incorrect time value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1;
s1
00:11:00.1
SELECT f_str_b();
ERROR 22007: Incorrect time value: '01:71.1' for column 'f_str_b()' at row 1
SELECT f_str_ax();
ERROR 22007: Incorrect time value: '?' for column 'f_str_ax()' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
SELECT f_date() AS d;
ERROR 22007: Incorrect time value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'd' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_array() AS a;
ERROR 22007: Incorrect time value: '1,2,3' for column 'a' at row 1
SELECT f_object() AS o;
ERROR 22007: Incorrect time value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR 22007: Incorrect time value: 'function (a) { return 1;}' for column 'f' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_typed_arr() AS ta;
ERROR 22007: Incorrect time value: '0,1,2,3,5' for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR 22007: Incorrect time value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_b;
DROP FUNCTION f_str_ax;
DROP FUNCTION f_date;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS DATETIME LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS DATETIME LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS DATETIME LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS DATETIME LANGUAGE JS AS $$ return 20200102030405; $$;
CREATE FUNCTION f_int_mi() RETURNS DATETIME LANGUAGE JS AS $$ return 10000101000000; $$;
CREATE FUNCTION f_int_mx() RETURNS DATETIME LANGUAGE JS AS $$ return 99991231235959; $$;
CREATE FUNCTION f_int_n() RETURNS DATETIME LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_mi1() RETURNS DATETIME LANGUAGE JS AS $$ return 10000101000000 - 1; $$;
CREATE FUNCTION f_int_mx1() RETURNS DATETIME LANGUAGE JS AS $$ return 99991231235959 + 1; $$;
CREATE FUNCTION f_num() RETURNS DATETIME LANGUAGE JS AS $$ return 20200102030405.06; $$;
CREATE FUNCTION f_bigint() RETURNS DATETIME LANGUAGE JS AS $$ return BigInt(20200102030405); $$;
CREATE FUNCTION f_bool() RETURNS DATETIME LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS DATETIME LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS DATETIME LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS DATETIME LANGUAGE JS AS $$ return "2020-01-02 03:04:05"; $$;
CREATE FUNCTION f_str_b() RETURNS DATETIME LANGUAGE JS AS $$ return "2020-01-32 03:04:05"; $$;
CREATE FUNCTION f_str_ax() RETURNS DATETIME LANGUAGE JS AS $$ return "\u{1F384}"; $$;
CREATE FUNCTION f_date() RETURNS DATETIME LANGUAGE JS AS $$ return new Date(2023,11,22,13,0,0,123) $$;
CREATE FUNCTION f_array() RETURNS DATETIME LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS DATETIME LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS DATETIME LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS DATETIME LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS DATETIME LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS DATETIME LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0();
ERROR 22007: Incorrect datetime value: '0' for column 'f_int_0()' at row 1
SELECT f_int_1() AS i1, f_int_mi() AS imi, f_int_mx() AS imx;
i1	imi	imx
2020-01-02 03:04:05	1000-01-01 00:00:00	9999-12-31 23:59:59
SELECT f_int_n();
ERROR 22007: Incorrect datetime value: '-1' for column 'f_int_n()' at row 1
SELECT f_int_mi1();
ERROR 22007: Incorrect datetime value: '10000100999999' for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22007: Incorrect datetime value: '99991231235960' for column 'f_int_mx1()' at row 1
SELECT f_num() AS n;
n
2020-01-02 03:04:05
SELECT f_bigint() AS bi;
bi
2020-01-02 03:04:05
SELECT f_bool();
ERROR 22007: Incorrect datetime value: 'true' for column 'f_bool()' at row 1
SELECT f_str_e() AS se;
ERROR 22007: Incorrect datetime value: '' for column 'se' at row 1
SELECT f_str_a();
ERROR 22007: Incorrect datetime value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1;
s1
2020-01-02 03:04:05
SELECT f_str_b();
ERROR 22007: Incorrect datetime value: '2020-01-32 03:04:05' for column 'f_str_b()' at row 1
SELECT f_str_ax();
ERROR 22007: Incorrect datetime value: '?' for column 'f_str_ax()' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
SELECT f_date() AS d;
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'd' at row 1
SELECT f_object() AS o;
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR 22007: Incorrect datetime value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_data_view() AS dv;
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_b;
DROP FUNCTION f_str_ax;
DROP FUNCTION f_date;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS DATETIME(2) LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS DATETIME(2) LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS DATETIME(2) LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS DATETIME(2) LANGUAGE JS AS $$ return 20200102030405; $$;
CREATE FUNCTION f_int_mi() RETURNS DATETIME(2) LANGUAGE JS AS $$ return 10000101000000; $$;
CREATE FUNCTION f_int_mx() RETURNS DATETIME(2) LANGUAGE JS AS $$ return 99991231235959; $$;
CREATE FUNCTION f_int_n() RETURNS DATETIME(2) LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_mi1() RETURNS DATETIME(2) LANGUAGE JS AS $$ return 10000101000000 - 1; $$;
CREATE FUNCTION f_int_mx1() RETURNS DATETIME(2) LANGUAGE JS AS $$ return 99991231235959 + 1; $$;
CREATE FUNCTION f_num() RETURNS DATETIME(2) LANGUAGE JS AS $$ return 20200102030405.06; $$;
CREATE FUNCTION f_bigint() RETURNS DATETIME(2) LANGUAGE JS AS $$ return BigInt(20200102030405); $$;
CREATE FUNCTION f_bool() RETURNS DATETIME(2) LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS DATETIME(2) LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS DATETIME(2) LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS DATETIME(2) LANGUAGE JS AS $$ return "2020-01-02 03:04:05.06"; $$;
CREATE FUNCTION f_str_b() RETURNS DATETIME(2) LANGUAGE JS AS $$ return "2020-01-02 25:04:05.06"; $$;
CREATE FUNCTION f_str_ax() RETURNS DATETIME(2) LANGUAGE JS AS $$ return "\u{1F384}"; $$;
CREATE FUNCTION f_date() RETURNS DATETIME(2) LANGUAGE JS AS $$ return new Date(2023,11,22,13,0,0,123) $$;
CREATE FUNCTION f_array() RETURNS DATETIME(2) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS DATETIME(2) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS DATETIME(2) LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS DATETIME(2) LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS DATETIME(2) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS DATETIME(2) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0();
ERROR 22007: Incorrect datetime value: '0' for column 'f_int_0()' at row 1
SELECT f_int_1() AS i1, f_int_mi() AS imi, f_int_mx() AS imx;
i1	imi	imx
2020-01-02 03:04:05.00	1000-01-01 00:00:00.00	9999-12-31 23:59:59.00
SELECT f_int_n();
ERROR 22007: Incorrect datetime value: '-1' for column 'f_int_n()' at row 1
SELECT f_int_mi1();
ERROR 22007: Incorrect datetime value: '10000100999999' for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22007: Incorrect datetime value: '99991231235960' for column 'f_int_mx1()' at row 1
SELECT f_num() AS n;
n
2020-01-02 03:04:05.06
SELECT f_bigint() AS bi;
bi
2020-01-02 03:04:05.00
SELECT f_bool();
ERROR 22007: Incorrect datetime value: 'true' for column 'f_bool()' at row 1
SELECT f_str_e() AS se;
ERROR 22007: Incorrect datetime value: '' for column 'se' at row 1
SELECT f_str_a();
ERROR 22007: Incorrect datetime value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1;
s1
2020-01-02 03:04:05.06
SELECT f_str_b();
ERROR 22007: Incorrect datetime value: '2020-01-02 25:04:05.06' for column 'f_str_b()' at row 1
SELECT f_str_ax();
ERROR 22007: Incorrect datetime value: '?' for column 'f_str_ax()' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
SELECT f_date() AS d;
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'd' at row 1
SELECT f_object() AS o;
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR 22007: Incorrect datetime value: 'function (a) { return 1;}' for column 'f' at row 1
SELECT f_data_view() AS dv;
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_b;
DROP FUNCTION f_str_ax;
DROP FUNCTION f_date;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS TIMESTAMP LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TIMESTAMP LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS TIMESTAMP LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS TIMESTAMP LANGUAGE JS AS $$ return 20231222102000; $$;
CREATE FUNCTION f_int_mi() RETURNS TIMESTAMP LANGUAGE JS AS $$ return 19700101030001; $$;
CREATE FUNCTION f_int_mx() RETURNS TIMESTAMP LANGUAGE JS AS $$ return 20380119061407; $$;
CREATE FUNCTION f_int_n() RETURNS TIMESTAMP LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_mi1() RETURNS TIMESTAMP LANGUAGE JS AS $$ return 19700101030001 - 1; $$;
CREATE FUNCTION f_int_mx1() RETURNS TIMESTAMP LANGUAGE JS AS $$ return 20380119061407 + 1; $$;
CREATE FUNCTION f_num() RETURNS TIMESTAMP LANGUAGE JS AS $$ return 20231222102000.0123; $$;
CREATE FUNCTION f_bigint() RETURNS TIMESTAMP LANGUAGE JS AS $$ return BigInt(20231222102000); $$;
CREATE FUNCTION f_bool() RETURNS TIMESTAMP LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TIMESTAMP LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS TIMESTAMP LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS TIMESTAMP LANGUAGE JS AS $$ return "2023-12-22 10:20:00"; $$;
CREATE FUNCTION f_str_b() RETURNS TIMESTAMP LANGUAGE JS AS $$ return "2023-12-22 10:71:00"; $$;
CREATE FUNCTION f_str_ax() RETURNS TIMESTAMP LANGUAGE JS AS $$ return "\u{1F384}"; $$;
CREATE FUNCTION f_date() RETURNS TIMESTAMP LANGUAGE JS AS $$ return new Date(2023,11,22,13,0,0,123) $$;
CREATE FUNCTION f_array() RETURNS TIMESTAMP LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TIMESTAMP LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TIMESTAMP LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TIMESTAMP LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TIMESTAMP LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS TIMESTAMP LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0();
ERROR 22007: Incorrect datetime value: '0' for column 'f_int_0()' at row 1
SELECT f_int_1() AS i1, f_int_mi() AS imi, f_int_mx() AS imx;
i1	imi	imx
2023-12-22 10:20:00	1970-01-01 03:00:01	2038-01-19 06:14:07
SELECT f_int_n();
ERROR 22007: Incorrect datetime value: '-1' for column 'f_int_n()' at row 1
SELECT f_int_mi1();
ERROR 22007: Incorrect datetime value: '19700101030000' for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22007: Incorrect datetime value: '20380119061408' for column 'f_int_mx1()' at row 1
SELECT f_num() AS n;
n
2023-12-22 10:20:00
SELECT f_bigint() AS bi;
bi
2023-12-22 10:20:00
SELECT f_bool();
ERROR 22007: Incorrect datetime value: 'true' for column 'f_bool()' at row 1
SELECT f_str_e() AS se;
ERROR 22007: Incorrect datetime value: '' for column 'se' at row 1
SELECT f_str_a();
ERROR 22007: Incorrect datetime value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1;
s1
2023-12-22 10:20:00
SELECT f_str_b();
ERROR 22007: Incorrect datetime value: '2023-12-22 10:71:00' for column 'f_str_b()' at row 1
SELECT f_str_ax();
ERROR 22007: Incorrect datetime value: '?' for column 'f_str_ax()' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
SELECT f_date() AS d;
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'd' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_array() AS a;
ERROR 22007: Incorrect datetime value: '1,2,3' for column 'a' at row 1
SELECT f_object() AS o;
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR 22007: Incorrect datetime value: 'function (a) { return 1;}' for column 'f' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_typed_arr() AS ta;
ERROR 22007: Incorrect datetime value: '0,1,2,3,5' for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_b;
DROP FUNCTION f_str_ax;
DROP FUNCTION f_date;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
CREATE FUNCTION f_undefined() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return; $$;
CREATE FUNCTION f_null() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return null; $$;
CREATE FUNCTION f_int_0() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return 0; $$;
CREATE FUNCTION f_int_1() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return 20231222102000; $$;
CREATE FUNCTION f_int_mi() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return 19700101030001; $$;
CREATE FUNCTION f_int_mx() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return 20380119061407; $$;
CREATE FUNCTION f_int_n() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return -1; $$;
CREATE FUNCTION f_int_mi1() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return 19700101030001 - 1; $$;
CREATE FUNCTION f_int_mx1() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return 20380119061407 + 1; $$;
CREATE FUNCTION f_num() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return 20231222102000.0123; $$;
CREATE FUNCTION f_bigint() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return BigInt(20231222102000); $$;
CREATE FUNCTION f_bool() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return true; $$;
CREATE FUNCTION f_str_e() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return ""; $$;
CREATE FUNCTION f_str_a() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return "alpha"; $$;
CREATE FUNCTION f_str_1() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return "2023-12-22 10:20:00.1234"; $$;
CREATE FUNCTION f_str_b() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return "2023-12-22 10:20:63.1234"; $$;
CREATE FUNCTION f_str_ax() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return "\u{1F384}"; $$;
CREATE FUNCTION f_date() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return new Date(2023,11,22,13,0,0,123) $$;
CREATE FUNCTION f_array() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return function (a) { return 1;} $$;
CREATE FUNCTION f_typed_arr() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE FUNCTION f_data_view() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); return dv $$;
CREATE FUNCTION f_object_serr() RETURNS TIMESTAMP(4) LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int_0();
ERROR 22007: Incorrect datetime value: '0' for column 'f_int_0()' at row 1
SELECT f_int_1() AS i1, f_int_mi() AS imi, f_int_mx() AS imx;
i1	imi	imx
2023-12-22 10:20:00.0000	1970-01-01 03:00:01.0000	2038-01-19 06:14:07.0000
SELECT f_int_n();
ERROR 22007: Incorrect datetime value: '-1' for column 'f_int_n()' at row 1
SELECT f_int_mi1();
ERROR 22007: Incorrect datetime value: '19700101030000' for column 'f_int_mi1()' at row 1
SELECT f_int_mx1();
ERROR 22007: Incorrect datetime value: '20380119061408' for column 'f_int_mx1()' at row 1
SELECT f_num() AS n;
n
2023-12-22 10:20:00.0100
SELECT f_bigint() AS bi;
bi
2023-12-22 10:20:00.0000
SELECT f_bool();
ERROR 22007: Incorrect datetime value: 'true' for column 'f_bool()' at row 1
SELECT f_str_e() AS se;
ERROR 22007: Incorrect datetime value: '' for column 'se' at row 1
SELECT f_str_a();
ERROR 22007: Incorrect datetime value: 'alpha' for column 'f_str_a()' at row 1
SELECT f_str_1() AS s1;
s1
2023-12-22 10:20:00.1234
SELECT f_str_b();
ERROR 22007: Incorrect datetime value: '2023-12-22 10:20:63.1234' for column 'f_str_b()' at row 1
SELECT f_str_ax();
ERROR 22007: Incorrect datetime value: '?' for column 'f_str_ax()' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
SELECT f_date() AS d;
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'd' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_array() AS a;
ERROR 22007: Incorrect datetime value: '1,2,3' for column 'a' at row 1
SELECT f_object() AS o;
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'o' at row 1
SELECT f_func() AS f;
ERROR 22007: Incorrect datetime value: 'function (a) { return 1;}' for column 'f' at row 1
# DATE and DATETIME types accept weird literals.
SELECT f_typed_arr() AS ta;
ERROR 22007: Incorrect datetime value: '0,1,2,3,5' for column 'ta' at row 1
SELECT f_data_view() AS dv;
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'dv' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_mi;
DROP FUNCTION f_int_mx;
DROP FUNCTION f_int_n;
DROP FUNCTION f_int_mi1;
DROP FUNCTION f_int_mx1;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_b;
DROP FUNCTION f_str_ax;
DROP FUNCTION f_date;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
DROP FUNCTION f_object_serr;
#
# ENUM return type is handled similarly to string types.
#
CREATE FUNCTION f_undefined() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return $$;
CREATE FUNCTION f_null() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return null $$;
CREATE FUNCTION f_int() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return 1 $$;
CREATE FUNCTION f_num() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return 1.25 $$;
CREATE FUNCTION f_bigint() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return BigInt(100) $$;
CREATE FUNCTION f_bool() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return true $$;
CREATE FUNCTION f_str_e() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return "" $$;
CREATE FUNCTION f_str_0() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return "a" $$;
CREATE FUNCTION f_str_1() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return "alpha" $$;
CREATE FUNCTION f_str_2() RETURNS ENUM(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251
LANGUAGE JS AS $$ return "Додо" $$;
CREATE FUNCTION f_str_cerr() RETURNS ENUM(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251
LANGUAGE JS AS $$ return "\u{1F9A4}" $$;
CREATE FUNCTION f_array() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return function (a) { return 1 } $$;
CREATE FUNCTION f_object_serr() RETURNS ENUM('a','b') LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i;
i
a
SELECT f_num() AS num;
ERROR 01000: Data truncated for column 'num' at row 1
SELECT f_bigint() AS bi;
ERROR 01000: Data truncated for column 'bi' at row 1
SELECT f_bool() AS bo;
ERROR 01000: Data truncated for column 'bo' at row 1
SELECT f_str_e() AS se;
ERROR 01000: Data truncated for column 'se' at row 1
SELECT f_str_0() AS s0;
s0
a
SELECT f_str_2() = X'c4eee4ee' AS s2;
s2
1
SELECT f_str_1() AS s1;
ERROR 01000: Data truncated for column 's1' at row 1
SELECT f_str_cerr();
ERROR 01000: Data truncated for column 'f_str_cerr()' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR 01000: Data truncated for column 'o' at row 1
SELECT f_func() AS f;
ERROR 01000: Data truncated for column 'f' at row 1
SELECT f_object_serr();
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_object_serr;
#
# SET return type is handled similarly to how SQL core interprets
# integer/floating-point values and strings which are stored in
# SET columns.
#
# Numeric values are converted to integers and treated as bitmaps
# representing sets. Strings are expected to contain comma-separated
# lists of SET elements. Additionally strings containing integer
# values are interpreted as bitmaps.
CREATE FUNCTION f_undefined() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return $$;
CREATE FUNCTION f_null() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return null $$;
CREATE FUNCTION f_int() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return 1 $$;
CREATE FUNCTION f_int_tb() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return 10 $$;
CREATE FUNCTION f_int_n() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return -1 $$;
CREATE FUNCTION f_num() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return 1.6 $$;
CREATE FUNCTION f_bigint() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return BigInt(4) $$;
CREATE FUNCTION f_bool() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return true $$;
CREATE FUNCTION f_str_e() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return "" $$;
CREATE FUNCTION f_str_0() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return "a" $$;
CREATE FUNCTION f_str_1() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return "b,c" $$;
CREATE FUNCTION f_str_2() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return "3" $$;
CREATE FUNCTION f_str_3() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return "1.5" $$;
CREATE FUNCTION f_str_n() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return "-3" $$;
CREATE FUNCTION f_str_w() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return "alpha" $$;
CREATE FUNCTION f_str_4() RETURNS SET(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251
LANGUAGE JS AS $$ return "Додо" $$;
CREATE FUNCTION f_str_cerr() RETURNS SET(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251
LANGUAGE JS AS $$ return "\u{1F9A4}" $$;
CREATE FUNCTION f_array() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return function (a) { return 1 } $$;
CREATE FUNCTION f_object_serr() RETURNS SET('a','b','c') LANGUAGE JS AS $$ return { toString() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i;
i
a
SELECT f_int_tb();
ERROR 01000: Data truncated for column 'f_int_tb()' at row 1
SELECT f_int_n();
ERROR 01000: Data truncated for column 'f_int_n()' at row 1
SELECT f_num() AS n;
n
a
SELECT f_bigint() AS bi;
bi
c
SELECT f_bool();
ERROR 01000: Data truncated for column 'f_bool()' at row 1
SELECT f_str_e() AS se;
se

SELECT f_str_0() AS s0;
s0
a
SELECT f_str_1() AS s1;
s1
b,c
SELECT f_str_2() AS s2;
s2
a,b
# SQL core doesn't handle non-integer numbers represented as strings
# and doubles stored in SET columns consistently either.
SELECT f_str_3();
ERROR 01000: Data truncated for column 'f_str_3()' at row 1
SELECT f_str_n();
ERROR 01000: Data truncated for column 'f_str_n()' at row 1
SELECT f_str_w();
ERROR 01000: Data truncated for column 'f_str_w()' at row 1
SELECT f_str_4() = X'c4eee4ee' AS s;
s
1
SELECT f_str_cerr() AS cerr;
ERROR 01000: Data truncated for column 'cerr' at row 1
SELECT f_array() AS a;
ERROR 01000: Data truncated for column 'a' at row 1
SELECT f_object() AS o;
ERROR 01000: Data truncated for column 'o' at row 1
SELECT f_func() AS f;
ERROR 01000: Data truncated for column 'f' at row 1
SELECT f_object_serr() AS serr;
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_int_tb;
DROP FUNCTION f_int_n;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_0;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_3;
DROP FUNCTION f_str_n;
DROP FUNCTION f_str_w;
DROP FUNCTION f_str_4;
DROP FUNCTION f_str_cerr;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_object_serr;
#
# BIT return type is handled in a special way.
#
# JS values are converted to numbers (ultimately integers) and then
# their binary representation is interpreted as array of bits.
#
# We do not support JS values which are not convertible to numbers to
# avoid confusion caused by different interpretation of 1, "1" and "a".
#
CREATE FUNCTION f_undefined() RETURNS BIT(5) LANGUAGE JS AS $$ return $$;
CREATE FUNCTION f_null() RETURNS BIT(5) LANGUAGE JS AS $$ return null $$;
CREATE FUNCTION f_int_0() RETURNS BIT(5) LANGUAGE JS AS $$ return 0 $$;
CREATE FUNCTION f_int_1() RETURNS BIT(5) LANGUAGE JS AS $$ return 7 $$;
CREATE FUNCTION f_int_tb() RETURNS BIT(5) LANGUAGE JS AS $$ return 33 $$;
CREATE FUNCTION f_int_n() RETURNS BIT(5) LANGUAGE JS AS $$ return -1 $$;
CREATE FUNCTION f_num_1() RETURNS BIT(5) LANGUAGE JS AS $$ return 1.25 $$;
CREATE FUNCTION f_num_2() RETURNS BIT(5) LANGUAGE JS AS $$ return 7.8 $$;
CREATE FUNCTION f_num_tb() RETURNS BIT(5) LANGUAGE JS AS $$ return 32.5 $$;
CREATE FUNCTION f_num_n() RETURNS BIT(5) LANGUAGE JS AS $$ return -1.2 $$;
CREATE FUNCTION f_bigint() RETURNS BIT(5) LANGUAGE JS AS $$ return BigInt(5) $$;
CREATE FUNCTION f_bigint_n() RETURNS BIT(5) LANGUAGE JS AS $$ return BigInt(-1) $$;
CREATE FUNCTION f_bool() RETURNS BIT(5) LANGUAGE JS AS $$ return true $$;
CREATE FUNCTION f_str_e() RETURNS BIT(5) LANGUAGE JS AS $$ return "" $$;
CREATE FUNCTION f_str_a() RETURNS BIT(5) LANGUAGE JS AS $$ return "alpha" $$;
CREATE FUNCTION f_str_1() RETURNS BIT(7) LANGUAGE JS AS $$ return "0" $$;
CREATE FUNCTION f_str_2() RETURNS BIT(7) LANGUAGE JS AS $$ return "16" $$;
CREATE FUNCTION f_str_tb() RETURNS BIT(5) LANGUAGE JS AS $$ return "33" $$;
CREATE FUNCTION f_array() RETURNS BIT(5) LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS BIT(5) LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS BIT(5) LANGUAGE JS AS $$ return function (a) { return 1} $$;
CREATE FUNCTION f_object_nerr() RETURNS BIT(5) LANGUAGE JS AS $$ return { valueOf() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT HEX(f_int_0()) AS i0, HEX(f_int_1()) AS i1;
i0	i1
0	7
SELECT f_int_tb();
ERROR 22001: Data too long for column 'f_int_tb()' at row 1
SELECT f_int_n();
ERROR 22001: Data too long for column 'f_int_n()' at row 1
SELECT HEX(f_num_1()) AS n1, HEX(f_num_2()) AS n2;
n1	n2
1	7
SELECT f_num_tb();
ERROR 22001: Data too long for column 'f_num_tb()' at row 1
SELECT f_num_n();
ERROR 22001: Data too long for column 'f_num_n()' at row 1
SELECT HEX(f_bigint()) AS bi;
bi
5
SELECT f_bigint_n();
ERROR HY000: Can't convert BigInt value to BIT type (value out of range)
SELECT HEX(f_bool()) AS b;
b
1
SELECT HEX(f_str_e());
HEX(f_str_e())
0
SELECT f_str_a();
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
SELECT HEX(f_str_1()) AS s1;
s1
0
SELECT HEX(f_str_2()) AS s1;
s1
10
SELECT f_str_tb();
ERROR 22001: Data too long for column 'f_str_tb()' at row 1
SELECT f_array() AS a;
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
SELECT f_object() AS o;
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
SELECT f_func() AS f;
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
SELECT f_object_nerr() AS nerr;
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int_0;
DROP FUNCTION f_int_1;
DROP FUNCTION f_int_tb;
DROP FUNCTION f_int_n;
DROP FUNCTION f_num_1;
DROP FUNCTION f_num_2;
DROP FUNCTION f_num_tb;
DROP FUNCTION f_num_n;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bigint_n;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_str_1;
DROP FUNCTION f_str_2;
DROP FUNCTION f_str_tb;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_object_nerr;
#
# For GEOMETRY return type we only support conversion from
# ArrayBuffer-based JS values.
#
CREATE FUNCTION f_undefined() RETURNS GEOMETRY LANGUAGE JS AS $$ return $$;
CREATE FUNCTION f_null() RETURNS GEOMETRY LANGUAGE JS AS $$ return null $$;
CREATE FUNCTION f_int() RETURNS GEOMETRY LANGUAGE JS AS $$ return 1 $$;
CREATE FUNCTION f_num() RETURNS GEOMETRY LANGUAGE JS AS $$ return 1.25 $$;
CREATE FUNCTION f_bigint() RETURNS GEOMETRY LANGUAGE JS AS $$ return BigInt(100) $$;
CREATE FUNCTION f_bool() RETURNS GEOMETRY LANGUAGE JS AS $$ return true $$;
CREATE FUNCTION f_str_e() RETURNS GEOMETRY LANGUAGE JS AS $$ return "" $$;
CREATE FUNCTION f_str_a() RETURNS GEOMETRY LANGUAGE JS AS $$ return "alpha" $$;
CREATE FUNCTION f_array() RETURNS GEOMETRY LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS GEOMETRY LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS GEOMETRY LANGUAGE JS AS $$ return function (a) { return 1 } $$;
CREATE FUNCTION f_typed_arr() RETURNS GEOMETRY LANGUAGE JS AS $$ return new Uint8Array([0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 64, 0, 0, 0, 0, 0, 0, 52, 64]) $$;
CREATE FUNCTION f_data_view() RETURNS GEOMETRY LANGUAGE JS AS $$
let dv = new DataView(new ArrayBuffer(25));
dv.setUint32(0, 0, true);     // SRID 0
dv.setUint8(4, 1);            // little-endian
dv.setUint32(5, 1, true);     // POINT
dv.setFloat64(9, 15, true);   // X
dv.setFloat64(17, 20, true);  // Y
return dv;
$$|
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_num();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_bigint();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_bool();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_str_e();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_str_a();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_array();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_object();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT f_func();
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
SELECT ST_AsText(f_typed_arr()) AS g;
g
POINT(15 20)
SELECT ST_AsText(f_data_view()) AS g;
g
POINT(15 20)
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_typed_arr;
DROP FUNCTION f_data_view;
#
# For JSON return type we apply JSON.stringify() to JS value and
# then try to store resulting string as return value (of JSON SQL
# type).
#
CREATE FUNCTION f_undefined() RETURNS JSON LANGUAGE JS AS $$ return $$;
CREATE FUNCTION f_null() RETURNS JSON LANGUAGE JS AS $$ return null $$;
CREATE FUNCTION f_int() RETURNS JSON LANGUAGE JS AS $$ return 1 $$;
CREATE FUNCTION f_num() RETURNS JSON LANGUAGE JS AS $$ return 1.25 $$;
CREATE FUNCTION f_bigint() RETURNS JSON LANGUAGE JS AS $$ return BigInt(100) $$;
CREATE FUNCTION f_bool() RETURNS JSON LANGUAGE JS AS $$ return true $$;
CREATE FUNCTION f_str_e() RETURNS JSON LANGUAGE JS AS $$ return "" $$;
CREATE FUNCTION f_str_a() RETURNS JSON LANGUAGE JS AS $$ return "alpha" $$;
CREATE FUNCTION f_array() RETURNS JSON LANGUAGE JS AS $$ return [1, 2, 3] $$;
CREATE FUNCTION f_object() RETURNS JSON LANGUAGE JS AS $$ return { x: 1, y: "alpha" } $$;
CREATE FUNCTION f_func() RETURNS JSON LANGUAGE JS AS $$ return function (a) { return 1 } $$;
CREATE FUNCTION f_object_jerr() RETURNS JSON LANGUAGE JS AS $$ return { toJSON() { throw "Kaboom!" } } $$;
SELECT f_undefined() AS u, f_null() AS nil;
u	nil
NULL	NULL
SELECT f_int() AS i, f_num() AS n;
i	n
1	1.25
# JSON.stringify() doesn't support BigInt by default.
SELECT f_bigint() AS bi;
ERROR HY000: For JSON return type only values supported by JSON.stringify() are allowed.
SELECT f_bool() AS b;
b
true
SELECT f_str_e() AS se, f_str_a() AS sa;
se	sa
""	"alpha"
SELECT f_array() AS arr, f_object() AS obj;
arr	obj
[1, 2, 3]	{"x": 1, "y": "alpha"}
# SQL JSON type doesn't accept all JSON values produced by V8.
SELECT f_func() AS func;
ERROR 22032: Invalid JSON text: "Invalid value." at position 0 in value for column '.func' at row 1.
SELECT f_object_jerr();
ERROR HY000: For JSON return type only values supported by JSON.stringify() are allowed.
DROP FUNCTION f_undefined;
DROP FUNCTION f_null;
DROP FUNCTION f_int;
DROP FUNCTION f_num;
DROP FUNCTION f_bigint;
DROP FUNCTION f_bool;
DROP FUNCTION f_str_e;
DROP FUNCTION f_str_a;
DROP FUNCTION f_array;
DROP FUNCTION f_object;
DROP FUNCTION f_func;
DROP FUNCTION f_object_jerr;

#
# Finally let us test how JS values are converted to SQL types
# for OUT parameters.
#
# These conversion uses the same mechanism as for return values.
#
# OUT parameters with string SQL types.
#
CREATE PROCEDURE p_undefined(OUT r CHAR(50)) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r CHAR(50)) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r CHAR(50)) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r CHAR(50)) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r CHAR(50)) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r CHAR(50)) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r CHAR(50)) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_0(OUT r CHAR(50)) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r CHAR(50) CHARACTER SET utf8mb4) LANGUAGE JS AS $$ r = "Far over the misty mountains cold"; $$;
CREATE PROCEDURE p_str_2(OUT r CHAR(50) CHARACTER SET latin1) LANGUAGE JS AS $$ r = "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE PROCEDURE p_str_3(OUT r CHAR(50) CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "Там отвъд мъглявите студени планини"; $$;
CREATE PROCEDURE p_str_cerr(OUT r CHAR(50) CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE PROCEDURE p_array(OUT r CHAR(50)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r CHAR(50)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r CHAR(50)) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r CHAR(50)) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r CHAR(50)) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r CHAR(50)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_0(@r);
SELECT @r AS s0;
s0
alpha
CALL p_str_1(@r);
SELECT @r AS s1;
s1
Far over the misty mountains cold
CALL p_str_2(@r);
SELECT @r AS s2;
s2
Au-delà des montagnes glaciales et embrumées
CALL p_str_3(@r);
SELECT @r AS s3;
s3
Там отвъд мъглявите студени планини
CALL p_str_1(@r);
SELECT @r =  X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1;
r1
1
CALL p_str_2(@r);
SELECT @r = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2;
r2
1
CALL p_str_3(@r);
SELECT @r = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r3
1
CALL p_str_cerr(@r);
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'r' at row 1
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT @r AS ta;
ta
0,1,2,3,5
CALL p_data_view(@r);
SELECT @r AS dv;
dv
[object DataView]
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_0(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r VARCHAR(60) CHARACTER SET utf8mb4) LANGUAGE JS AS $$ r = "Far over the misty mountains cold"; $$;
CREATE PROCEDURE p_str_2(OUT r VARCHAR(60) CHARACTER SET latin1) LANGUAGE JS AS $$ r = "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE PROCEDURE p_str_3(OUT r VARCHAR(60) CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "Там отвъд мъглявите студени планини"; $$;
CREATE PROCEDURE p_str_cerr(OUT r VARCHAR(60) CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE PROCEDURE p_array(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r VARCHAR(60)) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r VARCHAR(60)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_0(@r);
SELECT @r AS s0;
s0
alpha
CALL p_str_1(@r);
SELECT @r AS s1;
s1
Far over the misty mountains cold
CALL p_str_2(@r);
SELECT @r AS s2;
s2
Au-delà des montagnes glaciales et embrumées
CALL p_str_3(@r);
SELECT @r AS s3;
s3
Там отвъд мъглявите студени планини
CALL p_str_1(@r);
SELECT @r =  X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1;
r1
1
CALL p_str_2(@r);
SELECT @r = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2;
r2
1
CALL p_str_3(@r);
SELECT @r = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r3
1
CALL p_str_cerr(@r);
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'r' at row 1
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT @r AS ta;
ta
0,1,2,3,5
CALL p_data_view(@r);
SELECT @r AS dv;
dv
[object DataView]
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r TINYTEXT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TINYTEXT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r TINYTEXT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r TINYTEXT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r TINYTEXT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r TINYTEXT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TINYTEXT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_0(OUT r TINYTEXT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r TINYTEXT CHARACTER SET utf8mb4) LANGUAGE JS AS $$ r = "Far over the misty mountains cold"; $$;
CREATE PROCEDURE p_str_2(OUT r TINYTEXT CHARACTER SET latin1) LANGUAGE JS AS $$ r = "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE PROCEDURE p_str_3(OUT r TINYTEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "Там отвъд мъглявите студени планини"; $$;
CREATE PROCEDURE p_str_cerr(OUT r TINYTEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE PROCEDURE p_array(OUT r TINYTEXT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TINYTEXT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TINYTEXT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TINYTEXT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TINYTEXT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r TINYTEXT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_0(@r);
SELECT @r AS s0;
s0
alpha
CALL p_str_1(@r);
SELECT @r AS s1;
s1
Far over the misty mountains cold
CALL p_str_2(@r);
SELECT @r AS s2;
s2
Au-delà des montagnes glaciales et embrumées
CALL p_str_3(@r);
SELECT @r AS s3;
s3
Там отвъд мъглявите студени планини
CALL p_str_1(@r);
SELECT @r =  X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1;
r1
1
CALL p_str_2(@r);
SELECT @r = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2;
r2
1
CALL p_str_3(@r);
SELECT @r = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r3
1
CALL p_str_cerr(@r);
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'r' at row 1
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT @r AS ta;
ta
0,1,2,3,5
CALL p_data_view(@r);
SELECT @r AS dv;
dv
[object DataView]
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r TEXT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TEXT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r TEXT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r TEXT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r TEXT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r TEXT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TEXT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_0(OUT r TEXT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r TEXT CHARACTER SET utf8mb4) LANGUAGE JS AS $$ r = "Far over the misty mountains cold"; $$;
CREATE PROCEDURE p_str_2(OUT r TEXT CHARACTER SET latin1) LANGUAGE JS AS $$ r = "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE PROCEDURE p_str_3(OUT r TEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "Там отвъд мъглявите студени планини"; $$;
CREATE PROCEDURE p_str_cerr(OUT r TEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE PROCEDURE p_array(OUT r TEXT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TEXT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TEXT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TEXT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TEXT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r TEXT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_0(@r);
SELECT @r AS s0;
s0
alpha
CALL p_str_1(@r);
SELECT @r AS s1;
s1
Far over the misty mountains cold
CALL p_str_2(@r);
SELECT @r AS s2;
s2
Au-delà des montagnes glaciales et embrumées
CALL p_str_3(@r);
SELECT @r AS s3;
s3
Там отвъд мъглявите студени планини
CALL p_str_1(@r);
SELECT @r =  X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1;
r1
1
CALL p_str_2(@r);
SELECT @r = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2;
r2
1
CALL p_str_3(@r);
SELECT @r = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r3
1
CALL p_str_cerr(@r);
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'r' at row 1
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT @r AS ta;
ta
0,1,2,3,5
CALL p_data_view(@r);
SELECT @r AS dv;
dv
[object DataView]
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_0(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r MEDIUMTEXT CHARACTER SET utf8mb4) LANGUAGE JS AS $$ r = "Far over the misty mountains cold"; $$;
CREATE PROCEDURE p_str_2(OUT r MEDIUMTEXT CHARACTER SET latin1) LANGUAGE JS AS $$ r = "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE PROCEDURE p_str_3(OUT r MEDIUMTEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "Там отвъд мъглявите студени планини"; $$;
CREATE PROCEDURE p_str_cerr(OUT r MEDIUMTEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE PROCEDURE p_array(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r MEDIUMTEXT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_0(@r);
SELECT @r AS s0;
s0
alpha
CALL p_str_1(@r);
SELECT @r AS s1;
s1
Far over the misty mountains cold
CALL p_str_2(@r);
SELECT @r AS s2;
s2
Au-delà des montagnes glaciales et embrumées
CALL p_str_3(@r);
SELECT @r AS s3;
s3
Там отвъд мъглявите студени планини
CALL p_str_1(@r);
SELECT @r =  X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1;
r1
1
CALL p_str_2(@r);
SELECT @r = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2;
r2
1
CALL p_str_3(@r);
SELECT @r = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r3
1
CALL p_str_cerr(@r);
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'r' at row 1
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT @r AS ta;
ta
0,1,2,3,5
CALL p_data_view(@r);
SELECT @r AS dv;
dv
[object DataView]
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r LONGTEXT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r LONGTEXT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r LONGTEXT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r LONGTEXT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r LONGTEXT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r LONGTEXT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r LONGTEXT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_0(OUT r LONGTEXT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r LONGTEXT CHARACTER SET utf8mb4) LANGUAGE JS AS $$ r = "Far over the misty mountains cold"; $$;
CREATE PROCEDURE p_str_2(OUT r LONGTEXT CHARACTER SET latin1) LANGUAGE JS AS $$ r = "Au-delà des montagnes glaciales et embrumées"; $$;
CREATE PROCEDURE p_str_3(OUT r LONGTEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "Там отвъд мъглявите студени планини"; $$;
CREATE PROCEDURE p_str_cerr(OUT r LONGTEXT CHARACTER SET cp1251) LANGUAGE JS AS $$ r = "\u{1F434}\u{1F9D9}\u{26F0}\u{FE0F}"; $$;
CREATE PROCEDURE p_array(OUT r LONGTEXT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r LONGTEXT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r LONGTEXT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r LONGTEXT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r LONGTEXT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r LONGTEXT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_0(@r);
SELECT @r AS s0;
s0
alpha
CALL p_str_1(@r);
SELECT @r AS s1;
s1
Far over the misty mountains cold
CALL p_str_2(@r);
SELECT @r AS s2;
s2
Au-delà des montagnes glaciales et embrumées
CALL p_str_3(@r);
SELECT @r AS s3;
s3
Там отвъд мъглявите студени планини
CALL p_str_1(@r);
SELECT @r =  X'466172206F76657220746865206D69737479206D6F756E7461696E7320636F6C64' AS r1;
r1
1
CALL p_str_2(@r);
SELECT @r = X'41752D64656CE020646573206D6F6E7461676E657320676C616369616C657320657420656D6272756DE96573' AS r2;
r2
1
CALL p_str_3(@r);
SELECT @r = X'D2E0EC20EEF2E2FAE420ECFAE3EBFFE2E8F2E520F1F2F3E4E5EDE820EFEBE0EDE8EDE8' AS r3;
r3
1
CALL p_str_cerr(@r);
ERROR HY000: Incorrect string value: '\xF0\x9F\x90\xB4\xF0\x9F...' for column 'r' at row 1
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT @r AS ta;
ta
0,1,2,3,5
CALL p_data_view(@r);
SELECT @r AS dv;
dv
[object DataView]
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;

#
# OUT parameters of binary string/BLOB SQL-types.
#
CREATE PROCEDURE p_undefined(OUT r BINARY(50)) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r BINARY(50)) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r BINARY(50)) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r BINARY(50)) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r BINARY(50)) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r BINARY(50)) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r BINARY(50)) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r BINARY(50)) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_array(OUT r BINARY(50)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r BINARY(50)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r BINARY(50)) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r BINARY(50)) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r BINARY(50)) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = dv $$;
CREATE PROCEDURE p_arr_buff(OUT r BINARY(50)) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = ab $$;
CREATE PROCEDURE p_object_serr(OUT r BINARY(50)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
# BINARY type does 0-padding so we use HEX to correctly print value.
CALL p_int(@r);
SELECT HEX(@r) AS i;
i
3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_num(@r);
SELECT HEX(@r) AS num;
num
312E323500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_bigint(@r);
SELECT HEX(@r) AS bi;
bi
3130300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_bool(@r);
SELECT HEX(@r) AS bo;
bo
7472756500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_str_e(@r);
SELECT HEX(@r) AS se;
se
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_str_a(@r);
SELECT HEX(@r) AS sa;
sa
616C706861000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_array(@r);
SELECT HEX(@r) AS a;
a
312C322C33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_object(@r);
SELECT HEX(@r) AS o;
o
5B6F626A656374204F626A6563745D0000000000000000000000000000000000000000000000000000000000000000000000
CALL p_func(@r);
SELECT HEX(@r) AS f;
f
66756E6374696F6E20286129207B2072203D20313B7D00000000000000000000000000000000000000000000000000000000
CALL p_typed_arr(@r);
SELECT HEX(@r) AS ta;
ta
0001020305000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_data_view(@r);
SELECT HEX(@r) AS dv;
dv
0000000103000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_arr_buff(@r);
SELECT HEX(@r) AS ab;
ab
0000000001030007000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_arr_buff;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_array(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r VARBINARY(60)) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = dv $$;
CREATE PROCEDURE p_arr_buff(OUT r VARBINARY(60)) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = ab $$;
CREATE PROCEDURE p_object_serr(OUT r VARBINARY(60)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_a(@r);
SELECT @r AS sa;
sa
alpha
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT HEX(@r) AS ta;
ta
0001020305
CALL p_data_view(@r);
SELECT HEX(@r) AS dv;
dv
00000001030007
CALL p_arr_buff(@r);
SELECT HEX(@r) AS ab;
ab
000000000103000700
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_arr_buff;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r TINYBLOB) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TINYBLOB) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r TINYBLOB) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r TINYBLOB) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r TINYBLOB) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r TINYBLOB) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TINYBLOB) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r TINYBLOB) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_array(OUT r TINYBLOB) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TINYBLOB) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TINYBLOB) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TINYBLOB) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TINYBLOB) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = dv $$;
CREATE PROCEDURE p_arr_buff(OUT r TINYBLOB) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = ab $$;
CREATE PROCEDURE p_object_serr(OUT r TINYBLOB) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_a(@r);
SELECT @r AS sa;
sa
alpha
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT HEX(@r) AS ta;
ta
0001020305
CALL p_data_view(@r);
SELECT HEX(@r) AS dv;
dv
00000001030007
CALL p_arr_buff(@r);
SELECT HEX(@r) AS ab;
ab
000000000103000700
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_arr_buff;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r BLOB) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r BLOB) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r BLOB) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r BLOB) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r BLOB) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r BLOB) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r BLOB) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r BLOB) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_array(OUT r BLOB) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r BLOB) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r BLOB) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r BLOB) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r BLOB) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = dv $$;
CREATE PROCEDURE p_arr_buff(OUT r BLOB) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = ab $$;
CREATE PROCEDURE p_object_serr(OUT r BLOB) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_a(@r);
SELECT @r AS sa;
sa
alpha
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT HEX(@r) AS ta;
ta
0001020305
CALL p_data_view(@r);
SELECT HEX(@r) AS dv;
dv
00000001030007
CALL p_arr_buff(@r);
SELECT HEX(@r) AS ab;
ab
000000000103000700
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_arr_buff;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_array(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = dv $$;
CREATE PROCEDURE p_arr_buff(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = ab $$;
CREATE PROCEDURE p_object_serr(OUT r MEDIUMBLOB) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_a(@r);
SELECT @r AS sa;
sa
alpha
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT HEX(@r) AS ta;
ta
0001020305
CALL p_data_view(@r);
SELECT HEX(@r) AS dv;
dv
00000001030007
CALL p_arr_buff(@r);
SELECT HEX(@r) AS ab;
ab
000000000103000700
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_arr_buff;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r LONGBLOB) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r LONGBLOB) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int(OUT r LONGBLOB) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_num(OUT r LONGBLOB) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_bigint(OUT r LONGBLOB) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bool(OUT r LONGBLOB) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r LONGBLOB) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r LONGBLOB) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_array(OUT r LONGBLOB) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r LONGBLOB) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r LONGBLOB) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r LONGBLOB) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r LONGBLOB) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(9), 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = dv $$;
CREATE PROCEDURE p_arr_buff(OUT r LONGBLOB) LANGUAGE JS AS $$ let ab = new ArrayBuffer(9); let dv = new DataView(ab, 1, 7); dv.setUint32(0, 1); dv.setUint8(4, 3); dv.setUint16(5, 7); r = ab $$;
CREATE PROCEDURE p_object_serr(OUT r LONGBLOB) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS num;
num
1.25
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bool(@r);
SELECT @r AS bo;
bo
true
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_a(@r);
SELECT @r AS sa;
sa
alpha
CALL p_array(@r);
SELECT @r AS a;
a
1,2,3
CALL p_object(@r);
SELECT @r AS o;
o
[object Object]
CALL p_func(@r);
SELECT @r AS f;
f
function (a) { r = 1;}
CALL p_typed_arr(@r);
SELECT HEX(@r) AS ta;
ta
0001020305
CALL p_data_view(@r);
SELECT HEX(@r) AS dv;
dv
00000001030007
CALL p_arr_buff(@r);
SELECT HEX(@r) AS ab;
ab
000000000103000700
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_arr_buff;
DROP PROCEDURE p_object_serr;
#
# Test conversions for OUT parameters of integer SQL-types.
#
# See comments for test coverage for return values.
CREATE PROCEDURE p_undefined(OUT r TINYINT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TINYINT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r TINYINT) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r TINYINT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_int_n(OUT r TINYINT) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_m(OUT r TINYINT) LANGUAGE JS AS $$ r = 127; $$;
CREATE PROCEDURE p_int_m1(OUT r TINYINT) LANGUAGE JS AS $$ r = 127 + 1; $$;
CREATE PROCEDURE p_int_nm(OUT r TINYINT) LANGUAGE JS AS $$ r = -127 - 1; $$;
CREATE PROCEDURE p_int_nm1(OUT r TINYINT) LANGUAGE JS AS $$ r = -127 - 2; $$;
CREATE PROCEDURE p_uint_m(OUT r TINYINT UNSIGNED) LANGUAGE JS AS  $$ r = 2*127 + 1; $$;
CREATE PROCEDURE p_uint_m1(OUT r TINYINT UNSIGNED) LANGUAGE JS AS $$ r = 2*127 + 2; $$;
CREATE PROCEDURE p_uint_n(OUT r TINYINT UNSIGNED) LANGUAGE JS AS  $$ r = - 1; $$;
CREATE PROCEDURE p_num_1(OUT r TINYINT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_num_2(OUT r TINYINT) LANGUAGE JS AS $$ r = 5e-1; $$;
CREATE PROCEDURE p_num_3(OUT r TINYINT) LANGUAGE JS AS $$ r = 5e-2; $$;
CREATE PROCEDURE p_num_4(OUT r TINYINT) LANGUAGE JS AS $$ r = 1.2345e+2; $$;
CREATE PROCEDURE p_num_5(OUT r TINYINT) LANGUAGE JS AS $$ r = -1.2345e+1; $$;
CREATE PROCEDURE p_num_r1(OUT r TINYINT) LANGUAGE JS AS $$ r = 4.5; $$;
CREATE PROCEDURE p_num_r2(OUT r TINYINT) LANGUAGE JS AS $$ r = 4.5e+0; $$;
CREATE PROCEDURE p_num_un(OUT r TINYINT UNSIGNED) LANGUAGE JS AS $$ r = -1.5; $$;
CREATE PROCEDURE p_num_tb(OUT r TINYINT UNSIGNED) LANGUAGE JS AS $$ r = 1e+70; $$;
CREATE PROCEDURE p_bigint(OUT r TINYINT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bigint_n(OUT r TINYINT) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_u(OUT r TINYINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(9007199254740991); $$;
CREATE PROCEDURE p_bigint_un(OUT r TINYINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_tb(OUT r TINYINT) LANGUAGE JS AS $$ r = BigInt(1e+25); $$;
CREATE PROCEDURE p_bool(OUT r TINYINT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TINYINT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r TINYINT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_n1(OUT r TINYINT) LANGUAGE JS AS $$ r = "123"; $$;
CREATE PROCEDURE p_str_n2(OUT r TINYINT) LANGUAGE JS AS $$ r = "-2"; $$;
CREATE PROCEDURE p_str_n3(OUT r TINYINT) LANGUAGE JS AS $$ r = "12.65"; $$;
CREATE PROCEDURE p_str_nr1(OUT r TINYINT) LANGUAGE JS AS $$ r = "4.5"; $$;
CREATE PROCEDURE p_str_nr2(OUT r TINYINT) LANGUAGE JS AS $$ r = "4.5e+0"; $$;
CREATE PROCEDURE p_str_nu(OUT r TINYINT UNSIGNED) LANGUAGE JS AS $$ r = "-1"; $$;
CREATE PROCEDURE p_str_tb1(OUT r TINYINT) LANGUAGE JS AS $$ r = "1e+25"; $$;
CREATE PROCEDURE p_str_tb2(OUT r TINYINT) LANGUAGE JS AS $$ r = "18446744073709551616"; $$;
CREATE PROCEDURE p_array(OUT r TINYINT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TINYINT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TINYINT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TINYINT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TINYINT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r TINYINT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CREATE PROCEDURE p_object_userr(OUT r TINYINT UNSIGNED) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1
CALL p_int_n(@r);
SELECT @r AS n;
n
-1
CALL p_int_m(@r);
SELECT @r AS im;
im
127
CALL p_int_nm(@r);
SELECT @r AS nm;
nm
-128
CALL p_uint_m(@r);
SELECT @r AS um;
um
255
CALL p_int_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_int_nm1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_n(@r);
ERROR 22003: Out of range value for column 'r' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1
CALL p_num_2(@r);
SELECT @r AS n2;
n2
1
CALL p_num_3(@r);
SELECT @r AS n3;
n3
0
CALL p_num_4(@r);
SELECT @r AS n4;
n4
123
CALL p_num_5(@r);
SELECT @r AS n4;
n4
-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
CALL p_num_r1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_num_r2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_num_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bigint_n(@r);
SELECT @r AS bn;
bn
-42
CALL p_bigint_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bool(@r);
ERROR HY000: Incorrect integer value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR HY000: Incorrect integer value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR HY000: Incorrect integer value: 'alpha' for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
123
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
-2
CALL p_str_n3(@r);
SELECT @r AS n3;
n3
13
CALL p_str_nr1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_str_nr2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_str_nu(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb2(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR HY000: Incorrect integer value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR HY000: Incorrect integer value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_typed_arr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_data_view(@r);
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
CALL p_object_userr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_m;
DROP PROCEDURE p_int_m1;
DROP PROCEDURE p_int_nm;
DROP PROCEDURE p_int_nm1;
DROP PROCEDURE p_uint_m;
DROP PROCEDURE p_uint_m1;
DROP PROCEDURE p_uint_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_4;
DROP PROCEDURE p_num_5;
DROP PROCEDURE p_num_r1;
DROP PROCEDURE p_num_r2;
DROP PROCEDURE p_num_un;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_n;
DROP PROCEDURE p_bigint_u;
DROP PROCEDURE p_bigint_un;
DROP PROCEDURE p_bigint_tb;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n3;
DROP PROCEDURE p_str_nr1;
DROP PROCEDURE p_str_nr2;
DROP PROCEDURE p_str_nu;
DROP PROCEDURE p_str_tb1;
DROP PROCEDURE p_str_tb2;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
DROP PROCEDURE p_object_userr;
CREATE PROCEDURE p_undefined(OUT r SMALLINT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r SMALLINT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r SMALLINT) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r SMALLINT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_int_n(OUT r SMALLINT) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_m(OUT r SMALLINT) LANGUAGE JS AS $$ r = 32767; $$;
CREATE PROCEDURE p_int_m1(OUT r SMALLINT) LANGUAGE JS AS $$ r = 32767 + 1; $$;
CREATE PROCEDURE p_int_nm(OUT r SMALLINT) LANGUAGE JS AS $$ r = -32767 - 1; $$;
CREATE PROCEDURE p_int_nm1(OUT r SMALLINT) LANGUAGE JS AS $$ r = -32767 - 2; $$;
CREATE PROCEDURE p_uint_m(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS  $$ r = 2*32767 + 1; $$;
CREATE PROCEDURE p_uint_m1(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS $$ r = 2*32767 + 2; $$;
CREATE PROCEDURE p_uint_n(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS  $$ r = - 1; $$;
CREATE PROCEDURE p_num_1(OUT r SMALLINT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_num_2(OUT r SMALLINT) LANGUAGE JS AS $$ r = 5e-1; $$;
CREATE PROCEDURE p_num_3(OUT r SMALLINT) LANGUAGE JS AS $$ r = 5e-2; $$;
CREATE PROCEDURE p_num_4(OUT r SMALLINT) LANGUAGE JS AS $$ r = 1.2345e+2; $$;
CREATE PROCEDURE p_num_5(OUT r SMALLINT) LANGUAGE JS AS $$ r = -1.2345e+1; $$;
CREATE PROCEDURE p_num_r1(OUT r SMALLINT) LANGUAGE JS AS $$ r = 4.5; $$;
CREATE PROCEDURE p_num_r2(OUT r SMALLINT) LANGUAGE JS AS $$ r = 4.5e+0; $$;
CREATE PROCEDURE p_num_un(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS $$ r = -1.5; $$;
CREATE PROCEDURE p_num_tb(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS $$ r = 1e+70; $$;
CREATE PROCEDURE p_bigint(OUT r SMALLINT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bigint_n(OUT r SMALLINT) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_u(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(9007199254740991); $$;
CREATE PROCEDURE p_bigint_un(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_tb(OUT r SMALLINT) LANGUAGE JS AS $$ r = BigInt(1e+25); $$;
CREATE PROCEDURE p_bool(OUT r SMALLINT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r SMALLINT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r SMALLINT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_n1(OUT r SMALLINT) LANGUAGE JS AS $$ r = "123"; $$;
CREATE PROCEDURE p_str_n2(OUT r SMALLINT) LANGUAGE JS AS $$ r = "-2"; $$;
CREATE PROCEDURE p_str_n3(OUT r SMALLINT) LANGUAGE JS AS $$ r = "12.65"; $$;
CREATE PROCEDURE p_str_nr1(OUT r SMALLINT) LANGUAGE JS AS $$ r = "4.5"; $$;
CREATE PROCEDURE p_str_nr2(OUT r SMALLINT) LANGUAGE JS AS $$ r = "4.5e+0"; $$;
CREATE PROCEDURE p_str_nu(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS $$ r = "-1"; $$;
CREATE PROCEDURE p_str_tb1(OUT r SMALLINT) LANGUAGE JS AS $$ r = "1e+25"; $$;
CREATE PROCEDURE p_str_tb2(OUT r SMALLINT) LANGUAGE JS AS $$ r = "18446744073709551616"; $$;
CREATE PROCEDURE p_array(OUT r SMALLINT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r SMALLINT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r SMALLINT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r SMALLINT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r SMALLINT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r SMALLINT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CREATE PROCEDURE p_object_userr(OUT r SMALLINT UNSIGNED) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1
CALL p_int_n(@r);
SELECT @r AS n;
n
-1
CALL p_int_m(@r);
SELECT @r AS im;
im
32767
CALL p_int_nm(@r);
SELECT @r AS nm;
nm
-32768
CALL p_uint_m(@r);
SELECT @r AS um;
um
65535
CALL p_int_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_int_nm1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_n(@r);
ERROR 22003: Out of range value for column 'r' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1
CALL p_num_2(@r);
SELECT @r AS n2;
n2
1
CALL p_num_3(@r);
SELECT @r AS n3;
n3
0
CALL p_num_4(@r);
SELECT @r AS n4;
n4
123
CALL p_num_5(@r);
SELECT @r AS n4;
n4
-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
CALL p_num_r1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_num_r2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_num_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bigint_n(@r);
SELECT @r AS bn;
bn
-42
CALL p_bigint_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bool(@r);
ERROR HY000: Incorrect integer value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR HY000: Incorrect integer value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR HY000: Incorrect integer value: 'alpha' for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
123
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
-2
CALL p_str_n3(@r);
SELECT @r AS n3;
n3
13
CALL p_str_nr1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_str_nr2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_str_nu(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb2(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR HY000: Incorrect integer value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR HY000: Incorrect integer value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_typed_arr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_data_view(@r);
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
CALL p_object_userr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_m;
DROP PROCEDURE p_int_m1;
DROP PROCEDURE p_int_nm;
DROP PROCEDURE p_int_nm1;
DROP PROCEDURE p_uint_m;
DROP PROCEDURE p_uint_m1;
DROP PROCEDURE p_uint_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_4;
DROP PROCEDURE p_num_5;
DROP PROCEDURE p_num_r1;
DROP PROCEDURE p_num_r2;
DROP PROCEDURE p_num_un;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_n;
DROP PROCEDURE p_bigint_u;
DROP PROCEDURE p_bigint_un;
DROP PROCEDURE p_bigint_tb;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n3;
DROP PROCEDURE p_str_nr1;
DROP PROCEDURE p_str_nr2;
DROP PROCEDURE p_str_nu;
DROP PROCEDURE p_str_tb1;
DROP PROCEDURE p_str_tb2;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
DROP PROCEDURE p_object_userr;
CREATE PROCEDURE p_undefined(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_int_n(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_m(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 8388607; $$;
CREATE PROCEDURE p_int_m1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 8388607 + 1; $$;
CREATE PROCEDURE p_int_nm(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = -8388607 - 1; $$;
CREATE PROCEDURE p_int_nm1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = -8388607 - 2; $$;
CREATE PROCEDURE p_uint_m(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS  $$ r = 2*8388607 + 1; $$;
CREATE PROCEDURE p_uint_m1(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS $$ r = 2*8388607 + 2; $$;
CREATE PROCEDURE p_uint_n(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS  $$ r = - 1; $$;
CREATE PROCEDURE p_num_1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_num_2(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 5e-1; $$;
CREATE PROCEDURE p_num_3(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 5e-2; $$;
CREATE PROCEDURE p_num_4(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 1.2345e+2; $$;
CREATE PROCEDURE p_num_5(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = -1.2345e+1; $$;
CREATE PROCEDURE p_num_r1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 4.5; $$;
CREATE PROCEDURE p_num_r2(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = 4.5e+0; $$;
CREATE PROCEDURE p_num_un(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS $$ r = -1.5; $$;
CREATE PROCEDURE p_num_tb(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS $$ r = 1e+70; $$;
CREATE PROCEDURE p_bigint(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bigint_n(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_u(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(9007199254740991); $$;
CREATE PROCEDURE p_bigint_un(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_tb(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = BigInt(1e+25); $$;
CREATE PROCEDURE p_bool(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_n1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "123"; $$;
CREATE PROCEDURE p_str_n2(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "-2"; $$;
CREATE PROCEDURE p_str_n3(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "12.65"; $$;
CREATE PROCEDURE p_str_nr1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "4.5"; $$;
CREATE PROCEDURE p_str_nr2(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "4.5e+0"; $$;
CREATE PROCEDURE p_str_nu(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS $$ r = "-1"; $$;
CREATE PROCEDURE p_str_tb1(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "1e+25"; $$;
CREATE PROCEDURE p_str_tb2(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = "18446744073709551616"; $$;
CREATE PROCEDURE p_array(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r MEDIUMINT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r MEDIUMINT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CREATE PROCEDURE p_object_userr(OUT r MEDIUMINT UNSIGNED) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1
CALL p_int_n(@r);
SELECT @r AS n;
n
-1
CALL p_int_m(@r);
SELECT @r AS im;
im
8388607
CALL p_int_nm(@r);
SELECT @r AS nm;
nm
-8388608
CALL p_uint_m(@r);
SELECT @r AS um;
um
16777215
CALL p_int_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_int_nm1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_n(@r);
ERROR 22003: Out of range value for column 'r' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1
CALL p_num_2(@r);
SELECT @r AS n2;
n2
1
CALL p_num_3(@r);
SELECT @r AS n3;
n3
0
CALL p_num_4(@r);
SELECT @r AS n4;
n4
123
CALL p_num_5(@r);
SELECT @r AS n4;
n4
-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
CALL p_num_r1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_num_r2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_num_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bigint_n(@r);
SELECT @r AS bn;
bn
-42
CALL p_bigint_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bool(@r);
ERROR HY000: Incorrect integer value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR HY000: Incorrect integer value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR HY000: Incorrect integer value: 'alpha' for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
123
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
-2
CALL p_str_n3(@r);
SELECT @r AS n3;
n3
13
CALL p_str_nr1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_str_nr2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_str_nu(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb2(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR HY000: Incorrect integer value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR HY000: Incorrect integer value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_typed_arr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_data_view(@r);
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
CALL p_object_userr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_m;
DROP PROCEDURE p_int_m1;
DROP PROCEDURE p_int_nm;
DROP PROCEDURE p_int_nm1;
DROP PROCEDURE p_uint_m;
DROP PROCEDURE p_uint_m1;
DROP PROCEDURE p_uint_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_4;
DROP PROCEDURE p_num_5;
DROP PROCEDURE p_num_r1;
DROP PROCEDURE p_num_r2;
DROP PROCEDURE p_num_un;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_n;
DROP PROCEDURE p_bigint_u;
DROP PROCEDURE p_bigint_un;
DROP PROCEDURE p_bigint_tb;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n3;
DROP PROCEDURE p_str_nr1;
DROP PROCEDURE p_str_nr2;
DROP PROCEDURE p_str_nu;
DROP PROCEDURE p_str_tb1;
DROP PROCEDURE p_str_tb2;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
DROP PROCEDURE p_object_userr;
CREATE PROCEDURE p_undefined(OUT r INT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r INT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r INT) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r INT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_int_n(OUT r INT) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_m(OUT r INT) LANGUAGE JS AS $$ r = 2147483647; $$;
CREATE PROCEDURE p_int_m1(OUT r INT) LANGUAGE JS AS $$ r = 2147483647 + 1; $$;
CREATE PROCEDURE p_int_nm(OUT r INT) LANGUAGE JS AS $$ r = -2147483647 - 1; $$;
CREATE PROCEDURE p_int_nm1(OUT r INT) LANGUAGE JS AS $$ r = -2147483647 - 2; $$;
CREATE PROCEDURE p_uint_m(OUT r INT UNSIGNED) LANGUAGE JS AS  $$ r = 2*2147483647 + 1; $$;
CREATE PROCEDURE p_uint_m1(OUT r INT UNSIGNED) LANGUAGE JS AS $$ r = 2*2147483647 + 2; $$;
CREATE PROCEDURE p_uint_n(OUT r INT UNSIGNED) LANGUAGE JS AS  $$ r = - 1; $$;
CREATE PROCEDURE p_num_1(OUT r INT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_num_2(OUT r INT) LANGUAGE JS AS $$ r = 5e-1; $$;
CREATE PROCEDURE p_num_3(OUT r INT) LANGUAGE JS AS $$ r = 5e-2; $$;
CREATE PROCEDURE p_num_4(OUT r INT) LANGUAGE JS AS $$ r = 1.2345e+2; $$;
CREATE PROCEDURE p_num_5(OUT r INT) LANGUAGE JS AS $$ r = -1.2345e+1; $$;
CREATE PROCEDURE p_num_r1(OUT r INT) LANGUAGE JS AS $$ r = 4.5; $$;
CREATE PROCEDURE p_num_r2(OUT r INT) LANGUAGE JS AS $$ r = 4.5e+0; $$;
CREATE PROCEDURE p_num_un(OUT r INT UNSIGNED) LANGUAGE JS AS $$ r = -1.5; $$;
CREATE PROCEDURE p_num_tb(OUT r INT UNSIGNED) LANGUAGE JS AS $$ r = 1e+70; $$;
CREATE PROCEDURE p_bigint(OUT r INT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bigint_n(OUT r INT) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_u(OUT r INT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(9007199254740991); $$;
CREATE PROCEDURE p_bigint_un(OUT r INT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_tb(OUT r INT) LANGUAGE JS AS $$ r = BigInt(1e+25); $$;
CREATE PROCEDURE p_bool(OUT r INT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r INT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r INT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_n1(OUT r INT) LANGUAGE JS AS $$ r = "123"; $$;
CREATE PROCEDURE p_str_n2(OUT r INT) LANGUAGE JS AS $$ r = "-2"; $$;
CREATE PROCEDURE p_str_n3(OUT r INT) LANGUAGE JS AS $$ r = "12.65"; $$;
CREATE PROCEDURE p_str_nr1(OUT r INT) LANGUAGE JS AS $$ r = "4.5"; $$;
CREATE PROCEDURE p_str_nr2(OUT r INT) LANGUAGE JS AS $$ r = "4.5e+0"; $$;
CREATE PROCEDURE p_str_nu(OUT r INT UNSIGNED) LANGUAGE JS AS $$ r = "-1"; $$;
CREATE PROCEDURE p_str_tb1(OUT r INT) LANGUAGE JS AS $$ r = "1e+25"; $$;
CREATE PROCEDURE p_str_tb2(OUT r INT) LANGUAGE JS AS $$ r = "18446744073709551616"; $$;
CREATE PROCEDURE p_array(OUT r INT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r INT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r INT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r INT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r INT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r INT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CREATE PROCEDURE p_object_userr(OUT r INT UNSIGNED) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1
CALL p_int_n(@r);
SELECT @r AS n;
n
-1
CALL p_int_m(@r);
SELECT @r AS im;
im
2147483647
CALL p_int_nm(@r);
SELECT @r AS nm;
nm
-2147483648
CALL p_uint_m(@r);
SELECT @r AS um;
um
4294967295
CALL p_int_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_int_nm1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_m1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_uint_n(@r);
ERROR 22003: Out of range value for column 'r' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1
CALL p_num_2(@r);
SELECT @r AS n2;
n2
1
CALL p_num_3(@r);
SELECT @r AS n3;
n3
0
CALL p_num_4(@r);
SELECT @r AS n4;
n4
123
CALL p_num_5(@r);
SELECT @r AS n4;
n4
-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
CALL p_num_r1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_num_r2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_num_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bigint_n(@r);
SELECT @r AS bn;
bn
-42
CALL p_bigint_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bool(@r);
ERROR HY000: Incorrect integer value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR HY000: Incorrect integer value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR HY000: Incorrect integer value: 'alpha' for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
123
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
-2
CALL p_str_n3(@r);
SELECT @r AS n3;
n3
13
CALL p_str_nr1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_str_nr2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_str_nu(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb2(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR HY000: Incorrect integer value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR HY000: Incorrect integer value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_typed_arr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_data_view(@r);
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
CALL p_object_userr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_m;
DROP PROCEDURE p_int_m1;
DROP PROCEDURE p_int_nm;
DROP PROCEDURE p_int_nm1;
DROP PROCEDURE p_uint_m;
DROP PROCEDURE p_uint_m1;
DROP PROCEDURE p_uint_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_4;
DROP PROCEDURE p_num_5;
DROP PROCEDURE p_num_r1;
DROP PROCEDURE p_num_r2;
DROP PROCEDURE p_num_un;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_n;
DROP PROCEDURE p_bigint_u;
DROP PROCEDURE p_bigint_un;
DROP PROCEDURE p_bigint_tb;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n3;
DROP PROCEDURE p_str_nr1;
DROP PROCEDURE p_str_nr2;
DROP PROCEDURE p_str_nu;
DROP PROCEDURE p_str_tb1;
DROP PROCEDURE p_str_tb2;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
DROP PROCEDURE p_object_userr;
CREATE PROCEDURE p_undefined(OUT r BIGINT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r BIGINT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r BIGINT) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r BIGINT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_int_n(OUT r BIGINT) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_m(OUT r BIGINT) LANGUAGE JS AS $$ r = 9007199254740991; $$;
CREATE PROCEDURE p_int_m1(OUT r BIGINT) LANGUAGE JS AS $$ r = 9007199254740991 + 1; $$;
CREATE PROCEDURE p_int_nm(OUT r BIGINT) LANGUAGE JS AS $$ r = -9007199254740991 - 1; $$;
CREATE PROCEDURE p_int_nm1(OUT r BIGINT) LANGUAGE JS AS $$ r = -9007199254740991 - 2; $$;
CREATE PROCEDURE p_uint_m(OUT r BIGINT UNSIGNED) LANGUAGE JS AS  $$ r = 2*9007199254740991 + 1; $$;
CREATE PROCEDURE p_uint_m1(OUT r BIGINT UNSIGNED) LANGUAGE JS AS $$ r = 2*9007199254740991 + 2; $$;
CREATE PROCEDURE p_uint_n(OUT r BIGINT UNSIGNED) LANGUAGE JS AS  $$ r = - 1; $$;
CREATE PROCEDURE p_num_1(OUT r BIGINT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_num_2(OUT r BIGINT) LANGUAGE JS AS $$ r = 5e-1; $$;
CREATE PROCEDURE p_num_3(OUT r BIGINT) LANGUAGE JS AS $$ r = 5e-2; $$;
CREATE PROCEDURE p_num_4(OUT r BIGINT) LANGUAGE JS AS $$ r = 1.2345e+2; $$;
CREATE PROCEDURE p_num_5(OUT r BIGINT) LANGUAGE JS AS $$ r = -1.2345e+1; $$;
CREATE PROCEDURE p_num_r1(OUT r BIGINT) LANGUAGE JS AS $$ r = 4.5; $$;
CREATE PROCEDURE p_num_r2(OUT r BIGINT) LANGUAGE JS AS $$ r = 4.5e+0; $$;
CREATE PROCEDURE p_num_un(OUT r BIGINT UNSIGNED) LANGUAGE JS AS $$ r = -1.5; $$;
CREATE PROCEDURE p_num_tb(OUT r BIGINT UNSIGNED) LANGUAGE JS AS $$ r = 1e+70; $$;
CREATE PROCEDURE p_bigint(OUT r BIGINT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bigint_n(OUT r BIGINT) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_u(OUT r BIGINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(9007199254740991); $$;
CREATE PROCEDURE p_bigint_un(OUT r BIGINT UNSIGNED) LANGUAGE JS AS $$ r = BigInt(-42); $$;
CREATE PROCEDURE p_bigint_tb(OUT r BIGINT) LANGUAGE JS AS $$ r = BigInt(1e+25); $$;
CREATE PROCEDURE p_bool(OUT r BIGINT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r BIGINT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r BIGINT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_n1(OUT r BIGINT) LANGUAGE JS AS $$ r = "123"; $$;
CREATE PROCEDURE p_str_n2(OUT r BIGINT) LANGUAGE JS AS $$ r = "-2"; $$;
CREATE PROCEDURE p_str_n3(OUT r BIGINT) LANGUAGE JS AS $$ r = "12.65"; $$;
CREATE PROCEDURE p_str_nr1(OUT r BIGINT) LANGUAGE JS AS $$ r = "4.5"; $$;
CREATE PROCEDURE p_str_nr2(OUT r BIGINT) LANGUAGE JS AS $$ r = "4.5e+0"; $$;
CREATE PROCEDURE p_str_nu(OUT r BIGINT UNSIGNED) LANGUAGE JS AS $$ r = "-1"; $$;
CREATE PROCEDURE p_str_tb1(OUT r BIGINT) LANGUAGE JS AS $$ r = "1e+25"; $$;
CREATE PROCEDURE p_str_tb2(OUT r BIGINT) LANGUAGE JS AS $$ r = "18446744073709551616"; $$;
CREATE PROCEDURE p_array(OUT r BIGINT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r BIGINT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r BIGINT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r BIGINT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r BIGINT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r BIGINT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CREATE PROCEDURE p_object_userr(OUT r BIGINT UNSIGNED) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1
CALL p_int_n(@r);
SELECT @r AS n;
n
-1
CALL p_int_m(@r);
SELECT @r AS im;
im
9007199254740991
CALL p_int_nm(@r);
SELECT @r AS nm;
nm
-9007199254740992
CALL p_uint_m(@r);
SELECT @r AS um;
um
18014398509481984
CALL p_uint_n(@r);
ERROR 22003: Out of range value for column 'r' at row 1
# When MySQL converts string value with a floating point number to
# an integer, it converts string to floating point value first and
# then converts it to integer with rounding.
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1
CALL p_num_2(@r);
SELECT @r AS n2;
n2
1
CALL p_num_3(@r);
SELECT @r AS n3;
n3
0
CALL p_num_4(@r);
SELECT @r AS n4;
n4
123
CALL p_num_5(@r);
SELECT @r AS n4;
n4
-12
# MySQL rounds floating-point values differently than decimal values,
# floating-point values in strings and decimal values as string when
# storing them as integer (for floating-point values rint() rounding
# is used, while other use round() style rounding).
#
# We try to avoid the confusion and stick to round()-style
# rounding in all cases.
CALL p_num_r1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_num_r2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_num_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
CALL p_bigint_n(@r);
SELECT @r AS bn;
bn
-42
CALL p_bigint_u(@r);
SELECT @r AS bu;
bu
9007199254740991
CALL p_bigint_un(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bool(@r);
ERROR HY000: Incorrect integer value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR HY000: Incorrect integer value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR HY000: Incorrect integer value: 'alpha' for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
123
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
-2
CALL p_str_n3(@r);
SELECT @r AS n3;
n3
13
CALL p_str_nr1(@r);
SELECT @r AS nr1;
nr1
5
CALL p_str_nr2(@r);
SELECT @r AS nr2;
nr2
5
CALL p_str_nu(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tb2(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR HY000: Incorrect integer value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR HY000: Incorrect integer value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_typed_arr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_data_view(@r);
ERROR HY000: Incorrect integer value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
CALL p_object_userr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_m;
DROP PROCEDURE p_int_m1;
DROP PROCEDURE p_int_nm;
DROP PROCEDURE p_int_nm1;
DROP PROCEDURE p_uint_m;
DROP PROCEDURE p_uint_m1;
DROP PROCEDURE p_uint_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_4;
DROP PROCEDURE p_num_5;
DROP PROCEDURE p_num_r1;
DROP PROCEDURE p_num_r2;
DROP PROCEDURE p_num_un;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_n;
DROP PROCEDURE p_bigint_u;
DROP PROCEDURE p_bigint_un;
DROP PROCEDURE p_bigint_tb;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n3;
DROP PROCEDURE p_str_nr1;
DROP PROCEDURE p_str_nr2;
DROP PROCEDURE p_str_nu;
DROP PROCEDURE p_str_tb1;
DROP PROCEDURE p_str_tb2;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
DROP PROCEDURE p_object_userr;
#
# OUT parameters of floating point SQL-types.
#
CREATE PROCEDURE p_undefined(OUT r FLOAT) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r FLOAT) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r FLOAT) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r FLOAT) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_int_n(OUT r FLOAT) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_num_1(OUT r FLOAT) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_num_2(OUT r FLOAT) LANGUAGE JS AS $$ r = 5e-1; $$;
CREATE PROCEDURE p_num_3(OUT r FLOAT) LANGUAGE JS AS $$ r = -5e-2; $$;
CREATE PROCEDURE p_num_m(OUT r FLOAT) LANGUAGE JS AS $$ r = 3.4028234e+38; $$;
CREATE PROCEDURE p_bigint(OUT r FLOAT) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bigint_pl(OUT r FLOAT) LANGUAGE JS AS $$ r = BigInt("36028797018963967"); $$;
CREATE PROCEDURE p_bool(OUT r FLOAT) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r FLOAT) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r FLOAT) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_n1(OUT r FLOAT) LANGUAGE JS AS $$ r = "123"; $$;
CREATE PROCEDURE p_str_n2(OUT r FLOAT) LANGUAGE JS AS $$ r = "12.65"; $$;
CREATE PROCEDURE p_str_n_pl(OUT r FLOAT) LANGUAGE JS AS $$ r = "36028797018963967"; $$;
CREATE PROCEDURE p_str_n_tb(OUT r FLOAT) LANGUAGE JS AS $$ r = "1.1e+400"; $$;
CREATE PROCEDURE p_array(OUT r FLOAT) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r FLOAT) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r FLOAT) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r FLOAT) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r FLOAT) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r FLOAT) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1
CALL p_int_n(@r);
SELECT @r AS n;
n
-1
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1.25
CALL p_num_2(@r);
SELECT @r AS n2;
n2
0.5
CALL p_num_3(@r);
SELECT @r AS n3;
n3
-0.05000000074505806
CALL p_num_m(@r);
SELECT @r AS nm;
nm
3.4028234663852886e38
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
# For FLOAT the below call returns different value as compared to
# stored function case. This is due to user-variables internally
# using double precision for storing floating point values.
CALL p_bigint_pl(@r);
SELECT @r AS bipl;
bipl
3.602879701896397e16
CALL p_bool(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_e(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_a(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
123
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
12.649999618530273
CALL p_str_n_pl(@r);
SELECT @r AS npl;
npl
3.602879701896397e16
CALL p_str_n_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_func(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_typed_arr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_data_view(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_m;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_pl;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n_pl;
DROP PROCEDURE p_str_n_tb;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r DOUBLE) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r DOUBLE) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r DOUBLE) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r DOUBLE) LANGUAGE JS AS $$ r = 1; $$;
CREATE PROCEDURE p_int_n(OUT r DOUBLE) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_num_1(OUT r DOUBLE) LANGUAGE JS AS $$ r = 1.25; $$;
CREATE PROCEDURE p_num_2(OUT r DOUBLE) LANGUAGE JS AS $$ r = 5e-1; $$;
CREATE PROCEDURE p_num_3(OUT r DOUBLE) LANGUAGE JS AS $$ r = -5e-2; $$;
CREATE PROCEDURE p_num_m(OUT r DOUBLE) LANGUAGE JS AS $$ r = 1.7976931348623157e+308; $$;
CREATE PROCEDURE p_bigint(OUT r DOUBLE) LANGUAGE JS AS $$ r = BigInt(100); $$;
CREATE PROCEDURE p_bigint_pl(OUT r DOUBLE) LANGUAGE JS AS $$ r = BigInt("36028797018963967"); $$;
CREATE PROCEDURE p_bool(OUT r DOUBLE) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r DOUBLE) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r DOUBLE) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_n1(OUT r DOUBLE) LANGUAGE JS AS $$ r = "123"; $$;
CREATE PROCEDURE p_str_n2(OUT r DOUBLE) LANGUAGE JS AS $$ r = "12.65"; $$;
CREATE PROCEDURE p_str_n_pl(OUT r DOUBLE) LANGUAGE JS AS $$ r = "36028797018963967"; $$;
CREATE PROCEDURE p_str_n_tb(OUT r DOUBLE) LANGUAGE JS AS $$ r = "1.1e+400"; $$;
CREATE PROCEDURE p_array(OUT r DOUBLE) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r DOUBLE) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r DOUBLE) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r DOUBLE) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r DOUBLE) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r DOUBLE) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1
CALL p_int_n(@r);
SELECT @r AS n;
n
-1
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1.25
CALL p_num_2(@r);
SELECT @r AS n2;
n2
0.5
CALL p_num_3(@r);
SELECT @r AS n3;
n3
-0.05
CALL p_num_m(@r);
SELECT @r AS nm;
nm
1.7976931348623157e308
CALL p_bigint(@r);
SELECT @r AS bi;
bi
100
# For FLOAT the below call returns different value as compared to
# stored function case. This is due to user-variables internally
# using double precision for storing floating point values.
CALL p_bigint_pl(@r);
SELECT @r AS bipl;
bipl
3.602879701896397e16
CALL p_bool(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_e(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_a(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
123
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
12.65
CALL p_str_n_pl(@r);
SELECT @r AS npl;
npl
3.602879701896397e16
CALL p_str_n_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_func(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_typed_arr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_data_view(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_m;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_pl;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n_pl;
DROP PROCEDURE p_str_n_tb;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
#
# OUT parameters of DECIMAL type.
#
CREATE PROCEDURE p_undefined(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = undefined $$;
CREATE PROCEDURE p_null(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = null $$;
CREATE PROCEDURE p_int_0(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = 0 $$;
CREATE PROCEDURE p_int_1(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = 1 $$;
CREATE PROCEDURE p_int_n(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r =-1 $$;
CREATE PROCEDURE p_int_tb(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r =100 $$;
CREATE PROCEDURE p_num_1(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = 1.25 $$;
CREATE PROCEDURE p_num_2(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = 5e-1 $$;
CREATE PROCEDURE p_num_3(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = -5e-2 $$;
CREATE PROCEDURE p_num_m(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = 99.99 $$;
CREATE PROCEDURE p_num_tb(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = 100.01 $$;
CREATE PROCEDURE p_num_tl(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = 0.0125 $$;
CREATE PROCEDURE p_bigint_1(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = BigInt(10) $$;
CREATE PROCEDURE p_bigint_2(OUT r DECIMAL(20,2)) LANGUAGE JS AS $$ r = BigInt("10000000000000000") $$;
CREATE PROCEDURE p_bigint_tb(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = BigInt(1000) $$;
CREATE PROCEDURE p_bool(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = true $$;
CREATE PROCEDURE p_str_e(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = "" $$;
CREATE PROCEDURE p_str_a(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = "alpha" $$;
CREATE PROCEDURE p_str_n1(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = "12" $$;
CREATE PROCEDURE p_str_n2(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = "12.65" $$;
CREATE PROCEDURE p_str_n3(OUT r DECIMAL(20,2)) LANGUAGE JS AS $$ r = "10000000000000000.12" $$;
CREATE PROCEDURE p_str_tb(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = "123" $$;
CREATE PROCEDURE p_str_tl(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = "12.324" $$;
CREATE PROCEDURE p_str_api(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = "π" $$;
CREATE PROCEDURE p_array(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = function (a) { r = 1} $$;
CREATE PROCEDURE p_object_serr(OUT r DECIMAL(4,2)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0.00
CALL p_int_1(@r);
SELECT @r AS i1;
i1
1.00
CALL p_int_n(@r);
SELECT @r AS n;
n
-1.00
CALL p_int_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_1(@r);
SELECT @r AS n1;
n1
1.25
CALL p_num_2(@r);
SELECT @r AS n2;
n2
0.50
CALL p_num_3(@r);
SELECT @r AS n3;
n3
-0.05
CALL p_num_m(@r);
SELECT @r AS nm;
nm
99.99
CALL p_num_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_tl(@r);
Warnings:
Note	1265	Data truncated for column 'r' at row 1
SELECT @r AS ntl;
ntl
0.01
CALL p_bigint_1(@r);
SELECT @r AS bi1;
bi1
10.00
CALL p_bigint_2(@r);
SELECT @r AS bi2;
bi2
10000000000000000.00
CALL p_bigint_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bool(@r);
ERROR HY000: Incorrect decimal value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR HY000: Incorrect decimal value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR HY000: Incorrect decimal value: 'alpha' for column 'r' at row 1
CALL p_str_n1(@r);
SELECT @r AS n1;
n1
12.00
CALL p_str_n2(@r);
SELECT @r AS n2;
n2
12.65
CALL p_str_n3(@r);
SELECT @r AS n3;
n3
10000000000000000.12
CALL p_str_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_tl(@r);
Warnings:
Note	1265	Data truncated for column 'r' at row 1
SELECT @r AS tl;
tl
12.32
CALL p_str_api(@r);
ERROR HY000: Incorrect decimal value: 'π' for column 'r' at row 1
CALL p_array(@r);
ERROR HY000: Incorrect decimal value: '1,2,3' for column 'r' at row 1
CALL p_object(@r);
ERROR HY000: Incorrect decimal value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR HY000: Incorrect decimal value: 'function (a) { r = 1}' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_tb;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_m;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_num_tl;
DROP PROCEDURE p_bigint_1;
DROP PROCEDURE p_bigint_2;
DROP PROCEDURE p_bigint_tb;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_n1;
DROP PROCEDURE p_str_n2;
DROP PROCEDURE p_str_n3;
DROP PROCEDURE p_str_tb;
DROP PROCEDURE p_str_tl;
DROP PROCEDURE p_str_api;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_object_serr;
#
# YEAR OUT parameters are handled similarly to integer types.
#
CREATE PROCEDURE p_undefined(OUT r YEAR) LANGUAGE JS AS $$ r =undefined $$;
CREATE PROCEDURE p_null(OUT r YEAR) LANGUAGE JS AS $$ r = null $$;
CREATE PROCEDURE p_int_0(OUT r YEAR) LANGUAGE JS AS $$ r = 0 $$;
CREATE PROCEDURE p_int_1(OUT r YEAR) LANGUAGE JS AS $$ r = 7 $$;
CREATE PROCEDURE p_int_2(OUT r YEAR) LANGUAGE JS AS $$ r = 69 $$;
CREATE PROCEDURE p_int_3(OUT r YEAR) LANGUAGE JS AS $$ r = 70 $$;
CREATE PROCEDURE p_int_o(OUT r YEAR) LANGUAGE JS AS $$ r = 123 $$;
CREATE PROCEDURE p_int_mi(OUT r YEAR) LANGUAGE JS AS $$ r = 1901 $$;
CREATE PROCEDURE p_int_mx(OUT r YEAR) LANGUAGE JS AS $$ r = 2155 $$;
CREATE PROCEDURE p_int_mi1(OUT r YEAR) LANGUAGE JS AS $$ r = 1900 $$;
CREATE PROCEDURE p_int_mx1(OUT r YEAR) LANGUAGE JS AS $$ r = 2156 $$;
CREATE PROCEDURE p_int_n(OUT r YEAR) LANGUAGE JS AS $$ r = -1 $$;
CREATE PROCEDURE p_num_1(OUT r YEAR) LANGUAGE JS AS $$ r = 1.25 $$;
CREATE PROCEDURE p_num_2(OUT r YEAR) LANGUAGE JS AS $$ r = 5e-1 $$;
CREATE PROCEDURE p_num_3(OUT r YEAR) LANGUAGE JS AS $$ r = 5e+1 $$;
CREATE PROCEDURE p_num_4(OUT r YEAR) LANGUAGE JS AS $$ r = 1.901e+3 $$;
CREATE PROCEDURE p_num_tb(OUT r YEAR) LANGUAGE JS AS $$ r = 2.2e+3 $$;
CREATE PROCEDURE p_bigint(OUT r YEAR) LANGUAGE JS AS $$ r = BigInt(70) $$;
CREATE PROCEDURE p_bool(OUT r YEAR) LANGUAGE JS AS $$ r = true $$;
CREATE PROCEDURE p_str_e(OUT r YEAR) LANGUAGE JS AS $$ r = "" $$;
CREATE PROCEDURE p_str_a(OUT r YEAR) LANGUAGE JS AS $$ r = "alpha" $$;
CREATE PROCEDURE p_str_1(OUT r YEAR) LANGUAGE JS AS $$ r = "12" $$;
CREATE PROCEDURE p_str_2(OUT r YEAR) LANGUAGE JS AS $$ r = "75" $$;
CREATE PROCEDURE p_str_3(OUT r YEAR) LANGUAGE JS AS $$ r = "7.5" $$;
CREATE PROCEDURE p_str_o(OUT r YEAR) LANGUAGE JS AS $$ r = "100" $$;
CREATE PROCEDURE p_str_mi(OUT r YEAR) LANGUAGE JS AS $$ r ="1901" $$;
CREATE PROCEDURE p_str_mx(OUT r YEAR) LANGUAGE JS AS $$ r ="2155" $$;
CREATE PROCEDURE p_str_n(OUT r YEAR) LANGUAGE JS AS $$ r = "-1" $$;
CREATE PROCEDURE p_str_mi1(OUT r YEAR) LANGUAGE JS AS $$ r ="1900" $$;
CREATE PROCEDURE p_str_mx1(OUT r YEAR) LANGUAGE JS AS $$ r ="2156" $$;
CREATE PROCEDURE p_array(OUT r YEAR) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r YEAR) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r YEAR) LANGUAGE JS AS $$ r = function (a) { r = 1} $$;
CREATE PROCEDURE p_object_serr(OUT r YEAR) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT @r AS i0;
i0
0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
2007
CALL p_int_2(@r);
SELECT @r AS i2;
i2
2069
CALL p_int_3(@r);
SELECT @r AS i3;
i3
1970
CALL p_int_o(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_int_mi(@r);
SELECT @r AS mi;
mi
1901
CALL p_int_mx(@r);
SELECT @r AS mx;
mx
2155
CALL p_int_mi1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_int_n(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_num_1(@r);
SELECT @r AS n1;
n1
2001
CALL p_num_2(@r);
SELECT @r AS n2;
n2
2001
CALL p_num_3(@r);
SELECT @r AS n3;
n3
2050
CALL p_num_4(@r);
SELECT @r AS n4;
n4
1901
CALL p_num_tb(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_bigint(@r);
SELECT @r AS bi;
bi
1970
CALL p_bool(@r);
ERROR HY000: Incorrect integer value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR HY000: Incorrect integer value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR HY000: Incorrect integer value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
2012
CALL p_str_2(@r);
SELECT @r AS s2;
s2
1975
CALL p_str_3(@r);
SELECT @r AS s3;
s3
2008
CALL p_str_o(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_mi(@r);
SELECT @r AS mi;
mi
1901
CALL p_str_mx(@r);
SELECT @r AS mx;
mx
2155
CALL p_str_n(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_mi1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_str_mx1(@r);
ERROR 22003: Out of range value for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR HY000: Incorrect integer value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR HY000: Incorrect integer value: 'function (a) { r = 1}' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_2;
DROP PROCEDURE p_int_3;
DROP PROCEDURE p_int_o;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_3;
DROP PROCEDURE p_num_4;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_o;
DROP PROCEDURE p_str_mi;
DROP PROCEDURE p_str_mx;
DROP PROCEDURE p_str_n;
DROP PROCEDURE p_str_mi1;
DROP PROCEDURE p_str_mx1;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_object_serr;
#
# OUT parameters of other datetime SQL-types.
#
CREATE PROCEDURE p_undefined(OUT r DATE) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r DATE) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r DATE) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r DATE) LANGUAGE JS AS $$ r = 20200101; $$;
CREATE PROCEDURE p_int_mi(OUT r DATE) LANGUAGE JS AS $$ r = 10000101; $$;
CREATE PROCEDURE p_int_mx(OUT r DATE) LANGUAGE JS AS $$ r = 99991231; $$;
CREATE PROCEDURE p_int_n(OUT r DATE) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_mi1(OUT r DATE) LANGUAGE JS AS $$ r = 10000101 - 1; $$;
CREATE PROCEDURE p_int_mx1(OUT r DATE) LANGUAGE JS AS $$ r = 99991231 + 1; $$;
CREATE PROCEDURE p_num(OUT r DATE) LANGUAGE JS AS $$ r = 2.0200101e+7; $$;
CREATE PROCEDURE p_bigint(OUT r DATE) LANGUAGE JS AS $$ r = BigInt(20200101); $$;
CREATE PROCEDURE p_bool(OUT r DATE) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r DATE) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r DATE) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r DATE) LANGUAGE JS AS $$ r = "2020-01-01"; $$;
CREATE PROCEDURE p_str_b(OUT r DATE) LANGUAGE JS AS $$ r = "2020-13-01"; $$;
CREATE PROCEDURE p_str_ax(OUT r DATE) LANGUAGE JS AS $$ r = "\u{1F384}"; $$;
CREATE PROCEDURE p_date(OUT r DATE) LANGUAGE JS AS $$ r = new Date(2023,11,22,13,0,0,123) $$;
CREATE PROCEDURE p_array(OUT r DATE) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r DATE) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r DATE) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r DATE) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r DATE) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r DATE) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
ERROR 22007: Incorrect date value: '0' for column 'r' at row 1
CALL p_int_1(@r);
SELECT @r AS i1;
i1
2020-01-01
CALL p_int_mi(@r);
SELECT @r AS imi;
imi
1000-01-01
CALL p_int_mx(@r);
SELECT @r AS imx;
imx
9999-12-31
CALL p_int_n(@r);
ERROR 22007: Incorrect date value: '-1' for column 'r' at row 1
CALL p_int_mi1(@r);
ERROR 22007: Incorrect date value: '10000100' for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22007: Incorrect date value: '99991232' for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
2020-01-01
CALL p_bigint(@r);
SELECT @r AS bi;
bi
2020-01-01
CALL p_bool(@r);
ERROR 22007: Incorrect date value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR 22007: Incorrect date value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR 22007: Incorrect date value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
2020-01-01
CALL p_str_b(@r);
ERROR 22007: Incorrect date value: '2020-13-01' for column 'r' at row 1
CALL p_str_ax(@r);
ERROR 22007: Incorrect date value: '?' for column 'r' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
CALL p_date(@r);
ERROR 22007: Incorrect date value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'r' at row 1
CALL p_object(@r);
ERROR 22007: Incorrect date value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR 22007: Incorrect date value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_data_view(@r);
ERROR 22007: Incorrect date value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_b;
DROP PROCEDURE p_str_ax;
DROP PROCEDURE p_date;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r TIME) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TIME) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r TIME) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r TIME) LANGUAGE JS AS $$ r = 11; $$;
CREATE PROCEDURE p_int_mi(OUT r TIME) LANGUAGE JS AS $$ r = -8385959; $$;
CREATE PROCEDURE p_int_mx(OUT r TIME) LANGUAGE JS AS $$ r = 8385959; $$;
CREATE PROCEDURE p_int_n(OUT r TIME) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_mi1(OUT r TIME) LANGUAGE JS AS $$ r = -8385959 - 1; $$;
CREATE PROCEDURE p_int_mx1(OUT r TIME) LANGUAGE JS AS $$ r = 8385959 + 1; $$;
CREATE PROCEDURE p_num(OUT r TIME) LANGUAGE JS AS $$ r = 11.1; $$;
CREATE PROCEDURE p_bigint(OUT r TIME) LANGUAGE JS AS $$ r = BigInt(11); $$;
CREATE PROCEDURE p_bool(OUT r TIME) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TIME) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r TIME) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r TIME) LANGUAGE JS AS $$ r = "00:11"; $$;
CREATE PROCEDURE p_str_b(OUT r TIME) LANGUAGE JS AS $$ r = "00:65"; $$;
CREATE PROCEDURE p_str_ax(OUT r TIME) LANGUAGE JS AS $$ r = "\u{1F384}"; $$;
CREATE PROCEDURE p_date(OUT r TIME) LANGUAGE JS AS $$ r = new Date(2023,11,22,13,0,0,123) $$;
CREATE PROCEDURE p_array(OUT r TIME) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TIME) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TIME) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TIME) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TIME) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r TIME) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
# 0 is valid value for TIME type.
CALL p_int_0(@r);
SELECT @r AS z;
z
00:00:00
CALL p_int_1(@r);
SELECT @r AS i1;
i1
00:00:11
CALL p_int_mi(@r);
SELECT @r AS imi;
imi
-838:59:59
CALL p_int_mx(@r);
SELECT @r AS imx;
imx
838:59:59
CALL p_int_mi1(@r);
ERROR 22007: Incorrect time value: '-8385960' for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22007: Incorrect time value: '8385960' for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
00:00:11
CALL p_bigint(@r);
SELECT @r AS bi;
bi
00:00:11
CALL p_bool(@r);
ERROR 22007: Incorrect time value: 'true' for column 'r' at row 1
# Empty string is converted to 0 for TIME type.
CALL p_str_e(@r);
SELECT @r AS se;
se
00:00:00
CALL p_str_a(@r);
ERROR 22007: Incorrect time value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
00:11:00
CALL p_str_b(@r);
ERROR 22007: Incorrect time value: '00:65' for column 'r' at row 1
CALL p_str_ax(@r);
ERROR 22007: Incorrect time value: '?' for column 'r' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
CALL p_date(@r);
ERROR 22007: Incorrect time value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_array(@r);
ERROR 22007: Incorrect time value: '1,2,3' for column 'r' at row 1
CALL p_object(@r);
ERROR 22007: Incorrect time value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR 22007: Incorrect time value: 'function (a) { r = 1;}' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_typed_arr(@r);
ERROR 22007: Incorrect time value: '0,1,2,3,5' for column 'r' at row 1
CALL p_data_view(@r);
ERROR 22007: Incorrect time value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_b;
DROP PROCEDURE p_str_ax;
DROP PROCEDURE p_date;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r TIME(1)) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TIME(1)) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r TIME(1)) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r TIME(1)) LANGUAGE JS AS $$ r = 11; $$;
CREATE PROCEDURE p_int_mi(OUT r TIME(1)) LANGUAGE JS AS $$ r = -8385959; $$;
CREATE PROCEDURE p_int_mx(OUT r TIME(1)) LANGUAGE JS AS $$ r = 8385959; $$;
CREATE PROCEDURE p_int_n(OUT r TIME(1)) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_mi1(OUT r TIME(1)) LANGUAGE JS AS $$ r = -8385959 - 1; $$;
CREATE PROCEDURE p_int_mx1(OUT r TIME(1)) LANGUAGE JS AS $$ r = 8385959 + 1; $$;
CREATE PROCEDURE p_num(OUT r TIME(1)) LANGUAGE JS AS $$ r = 11.1; $$;
CREATE PROCEDURE p_bigint(OUT r TIME(1)) LANGUAGE JS AS $$ r = BigInt(11); $$;
CREATE PROCEDURE p_bool(OUT r TIME(1)) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TIME(1)) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r TIME(1)) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r TIME(1)) LANGUAGE JS AS $$ r = "00:11.1"; $$;
CREATE PROCEDURE p_str_b(OUT r TIME(1)) LANGUAGE JS AS $$ r = "01:71.1"; $$;
CREATE PROCEDURE p_str_ax(OUT r TIME(1)) LANGUAGE JS AS $$ r = "\u{1F384}"; $$;
CREATE PROCEDURE p_date(OUT r TIME(1)) LANGUAGE JS AS $$ r = new Date(2023,11,22,13,0,0,123) $$;
CREATE PROCEDURE p_array(OUT r TIME(1)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TIME(1)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TIME(1)) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TIME(1)) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TIME(1)) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r TIME(1)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
# 0 is valid value for TIME type.
CALL p_int_0(@r);
SELECT @r AS z;
z
00:00:00.0
CALL p_int_1(@r);
SELECT @r AS i1;
i1
00:00:11.0
CALL p_int_mi(@r);
SELECT @r AS imi;
imi
-838:59:59.0
CALL p_int_mx(@r);
SELECT @r AS imx;
imx
838:59:59.0
CALL p_int_mi1(@r);
ERROR 22007: Incorrect time value: '-8385960' for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22007: Incorrect time value: '8385960' for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
00:00:11.1
CALL p_bigint(@r);
SELECT @r AS bi;
bi
00:00:11.0
CALL p_bool(@r);
ERROR 22007: Incorrect time value: 'true' for column 'r' at row 1
# Empty string is converted to 0 for TIME type.
CALL p_str_e(@r);
SELECT @r AS se;
se
00:00:00.0
CALL p_str_a(@r);
ERROR 22007: Incorrect time value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
00:11:00.1
CALL p_str_b(@r);
ERROR 22007: Incorrect time value: '01:71.1' for column 'r' at row 1
CALL p_str_ax(@r);
ERROR 22007: Incorrect time value: '?' for column 'r' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
CALL p_date(@r);
ERROR 22007: Incorrect time value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_array(@r);
ERROR 22007: Incorrect time value: '1,2,3' for column 'r' at row 1
CALL p_object(@r);
ERROR 22007: Incorrect time value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR 22007: Incorrect time value: 'function (a) { r = 1;}' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_typed_arr(@r);
ERROR 22007: Incorrect time value: '0,1,2,3,5' for column 'r' at row 1
CALL p_data_view(@r);
ERROR 22007: Incorrect time value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_b;
DROP PROCEDURE p_str_ax;
DROP PROCEDURE p_date;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r DATETIME) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r DATETIME) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r DATETIME) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r DATETIME) LANGUAGE JS AS $$ r = 20200102030405; $$;
CREATE PROCEDURE p_int_mi(OUT r DATETIME) LANGUAGE JS AS $$ r = 10000101000000; $$;
CREATE PROCEDURE p_int_mx(OUT r DATETIME) LANGUAGE JS AS $$ r = 99991231235959; $$;
CREATE PROCEDURE p_int_n(OUT r DATETIME) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_mi1(OUT r DATETIME) LANGUAGE JS AS $$ r = 10000101000000 - 1; $$;
CREATE PROCEDURE p_int_mx1(OUT r DATETIME) LANGUAGE JS AS $$ r = 99991231235959 + 1; $$;
CREATE PROCEDURE p_num(OUT r DATETIME) LANGUAGE JS AS $$ r = 20200102030405.06; $$;
CREATE PROCEDURE p_bigint(OUT r DATETIME) LANGUAGE JS AS $$ r = BigInt(20200102030405); $$;
CREATE PROCEDURE p_bool(OUT r DATETIME) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r DATETIME) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r DATETIME) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r DATETIME) LANGUAGE JS AS $$ r = "2020-01-02 03:04:05"; $$;
CREATE PROCEDURE p_str_b(OUT r DATETIME) LANGUAGE JS AS $$ r = "2020-01-32 03:04:05"; $$;
CREATE PROCEDURE p_str_ax(OUT r DATETIME) LANGUAGE JS AS $$ r = "\u{1F384}"; $$;
CREATE PROCEDURE p_date(OUT r DATETIME) LANGUAGE JS AS $$ r = new Date(2023,11,22,13,0,0,123) $$;
CREATE PROCEDURE p_array(OUT r DATETIME) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r DATETIME) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r DATETIME) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r DATETIME) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r DATETIME) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r DATETIME) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
ERROR 22007: Incorrect datetime value: '0' for column 'r' at row 1
CALL p_int_1(@r);
SELECT @r AS i1;
i1
2020-01-02 03:04:05
CALL p_int_mi(@r);
SELECT @r AS imi;
imi
1000-01-01 00:00:00
CALL p_int_mx(@r);
SELECT @r AS imx;
imx
9999-12-31 23:59:59
CALL p_int_n(@r);
ERROR 22007: Incorrect datetime value: '-1' for column 'r' at row 1
CALL p_int_mi1(@r);
ERROR 22007: Incorrect datetime value: '10000100999999' for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22007: Incorrect datetime value: '99991231235960' for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
2020-01-02 03:04:05
CALL p_bigint(@r);
SELECT @r AS bi;
bi
2020-01-02 03:04:05
CALL p_bool(@r);
ERROR 22007: Incorrect datetime value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR 22007: Incorrect datetime value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR 22007: Incorrect datetime value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
2020-01-02 03:04:05
CALL p_str_b(@r);
ERROR 22007: Incorrect datetime value: '2020-01-32 03:04:05' for column 'r' at row 1
CALL p_str_ax(@r);
ERROR 22007: Incorrect datetime value: '?' for column 'r' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
CALL p_date(@r);
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'r' at row 1
CALL p_object(@r);
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR 22007: Incorrect datetime value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_data_view(@r);
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_b;
DROP PROCEDURE p_str_ax;
DROP PROCEDURE p_date;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = 20200102030405; $$;
CREATE PROCEDURE p_int_mi(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = 10000101000000; $$;
CREATE PROCEDURE p_int_mx(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = 99991231235959; $$;
CREATE PROCEDURE p_int_n(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_mi1(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = 10000101000000 - 1; $$;
CREATE PROCEDURE p_int_mx1(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = 99991231235959 + 1; $$;
CREATE PROCEDURE p_num(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = 20200102030405.06; $$;
CREATE PROCEDURE p_bigint(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = BigInt(20200102030405); $$;
CREATE PROCEDURE p_bool(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = "2020-01-02 03:04:05.06"; $$;
CREATE PROCEDURE p_str_b(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = "2020-01-02 25:04:05.06"; $$;
CREATE PROCEDURE p_str_ax(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = "\u{1F384}"; $$;
CREATE PROCEDURE p_date(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = new Date(2023,11,22,13,0,0,123) $$;
CREATE PROCEDURE p_array(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r DATETIME(2)) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r DATETIME(2)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
ERROR 22007: Incorrect datetime value: '0' for column 'r' at row 1
CALL p_int_1(@r);
SELECT @r AS i1;
i1
2020-01-02 03:04:05.00
CALL p_int_mi(@r);
SELECT @r AS imi;
imi
1000-01-01 00:00:00.00
CALL p_int_mx(@r);
SELECT @r AS imx;
imx
9999-12-31 23:59:59.00
CALL p_int_n(@r);
ERROR 22007: Incorrect datetime value: '-1' for column 'r' at row 1
CALL p_int_mi1(@r);
ERROR 22007: Incorrect datetime value: '10000100999999' for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22007: Incorrect datetime value: '99991231235960' for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
2020-01-02 03:04:05.06
CALL p_bigint(@r);
SELECT @r AS bi;
bi
2020-01-02 03:04:05.00
CALL p_bool(@r);
ERROR 22007: Incorrect datetime value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR 22007: Incorrect datetime value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR 22007: Incorrect datetime value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
2020-01-02 03:04:05.06
CALL p_str_b(@r);
ERROR 22007: Incorrect datetime value: '2020-01-02 25:04:05.06' for column 'r' at row 1
CALL p_str_ax(@r);
ERROR 22007: Incorrect datetime value: '?' for column 'r' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
CALL p_date(@r);
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'r' at row 1
CALL p_object(@r);
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR 22007: Incorrect datetime value: 'function (a) { r = 1;}' for column 'r' at row 1
CALL p_data_view(@r);
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_b;
DROP PROCEDURE p_str_ax;
DROP PROCEDURE p_date;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = 20231222102000; $$;
CREATE PROCEDURE p_int_mi(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = 19700101030001; $$;
CREATE PROCEDURE p_int_mx(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = 20380119061407; $$;
CREATE PROCEDURE p_int_n(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_mi1(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = 19700101030001 - 1; $$;
CREATE PROCEDURE p_int_mx1(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = 20380119061407 + 1; $$;
CREATE PROCEDURE p_num(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = 20231222102000.0123; $$;
CREATE PROCEDURE p_bigint(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = BigInt(20231222102000); $$;
CREATE PROCEDURE p_bool(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = "2023-12-22 10:20:00"; $$;
CREATE PROCEDURE p_str_b(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = "2023-12-22 10:71:00"; $$;
CREATE PROCEDURE p_str_ax(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = "\u{1F384}"; $$;
CREATE PROCEDURE p_date(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = new Date(2023,11,22,13,0,0,123) $$;
CREATE PROCEDURE p_array(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TIMESTAMP) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r TIMESTAMP) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
ERROR 22007: Incorrect datetime value: '0' for column 'r' at row 1
CALL p_int_1(@r);
SELECT @r AS i1;
i1
2023-12-22 10:20:00
CALL p_int_mi(@r);
SELECT @r AS imi;
imi
1970-01-01 03:00:01
CALL p_int_mx(@r);
SELECT @r AS imx;
imx
2038-01-19 06:14:07
CALL p_int_n(@r);
ERROR 22007: Incorrect datetime value: '-1' for column 'r' at row 1
CALL p_int_mi1(@r);
ERROR 22007: Incorrect datetime value: '19700101030000' for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22007: Incorrect datetime value: '20380119061408' for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
2023-12-22 10:20:00
CALL p_bigint(@r);
SELECT @r AS bi;
bi
2023-12-22 10:20:00
CALL p_bool(@r);
ERROR 22007: Incorrect datetime value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR 22007: Incorrect datetime value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR 22007: Incorrect datetime value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
2023-12-22 10:20:00
CALL p_str_b(@r);
ERROR 22007: Incorrect datetime value: '2023-12-22 10:71:00' for column 'r' at row 1
CALL p_str_ax(@r);
ERROR 22007: Incorrect datetime value: '?' for column 'r' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
CALL p_date(@r);
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_array(@r);
ERROR 22007: Incorrect datetime value: '1,2,3' for column 'r' at row 1
CALL p_object(@r);
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR 22007: Incorrect datetime value: 'function (a) { r = 1;}' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_typed_arr(@r);
ERROR 22007: Incorrect datetime value: '0,1,2,3,5' for column 'r' at row 1
CALL p_data_view(@r);
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_b;
DROP PROCEDURE p_str_ax;
DROP PROCEDURE p_date;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
CREATE PROCEDURE p_undefined(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = undefined; $$;
CREATE PROCEDURE p_null(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = null; $$;
CREATE PROCEDURE p_int_0(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = 0; $$;
CREATE PROCEDURE p_int_1(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = 20231222102000; $$;
CREATE PROCEDURE p_int_mi(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = 19700101030001; $$;
CREATE PROCEDURE p_int_mx(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = 20380119061407; $$;
CREATE PROCEDURE p_int_n(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = -1; $$;
CREATE PROCEDURE p_int_mi1(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = 19700101030001 - 1; $$;
CREATE PROCEDURE p_int_mx1(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = 20380119061407 + 1; $$;
CREATE PROCEDURE p_num(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = 20231222102000.0123; $$;
CREATE PROCEDURE p_bigint(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = BigInt(20231222102000); $$;
CREATE PROCEDURE p_bool(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = true; $$;
CREATE PROCEDURE p_str_e(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = ""; $$;
CREATE PROCEDURE p_str_a(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = "alpha"; $$;
CREATE PROCEDURE p_str_1(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = "2023-12-22 10:20:00.1234"; $$;
CREATE PROCEDURE p_str_b(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = "2023-12-22 10:20:63.1234"; $$;
CREATE PROCEDURE p_str_ax(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = "\u{1F384}"; $$;
CREATE PROCEDURE p_date(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = new Date(2023,11,22,13,0,0,123) $$;
CREATE PROCEDURE p_array(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = function (a) { r = 1;} $$;
CREATE PROCEDURE p_typed_arr(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = new Uint8Array([0, 1, 2, 3, 5]) $$;
CREATE PROCEDURE p_data_view(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ let dv = new DataView(new ArrayBuffer(1)); dv.setUint8(0, 3); r = dv $$;
CREATE PROCEDURE p_object_serr(OUT r TIMESTAMP(4)) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
ERROR 22007: Incorrect datetime value: '0' for column 'r' at row 1
CALL p_int_1(@r);
SELECT @r AS i1;
i1
2023-12-22 10:20:00.0000
CALL p_int_mi(@r);
SELECT @r AS imi;
imi
1970-01-01 03:00:01.0000
CALL p_int_mx(@r);
SELECT @r AS imx;
imx
2038-01-19 06:14:07.0000
CALL p_int_n(@r);
ERROR 22007: Incorrect datetime value: '-1' for column 'r' at row 1
CALL p_int_mi1(@r);
ERROR 22007: Incorrect datetime value: '19700101030000' for column 'r' at row 1
CALL p_int_mx1(@r);
ERROR 22007: Incorrect datetime value: '20380119061408' for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
2023-12-22 10:20:00.0100
CALL p_bigint(@r);
SELECT @r AS bi;
bi
2023-12-22 10:20:00.0000
CALL p_bool(@r);
ERROR 22007: Incorrect datetime value: 'true' for column 'r' at row 1
CALL p_str_e(@r);
ERROR 22007: Incorrect datetime value: '' for column 'r' at row 1
CALL p_str_a(@r);
ERROR 22007: Incorrect datetime value: 'alpha' for column 'r' at row 1
CALL p_str_1(@r);
SELECT @r AS s1;
s1
2023-12-22 10:20:00.1234
CALL p_str_b(@r);
ERROR 22007: Incorrect datetime value: '2023-12-22 10:20:63.1234' for column 'r' at row 1
CALL p_str_ax(@r);
ERROR 22007: Incorrect datetime value: '?' for column 'r' at row 1
# Direct string representation of Date type is not compatible with
# MySQL datetime values.
CALL p_date(@r);
ERROR 22007: Incorrect datetime value: 'Fri Dec 22 2023 13:00:00 GMT+0300 (GMT)' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_array(@r);
ERROR 22007: Incorrect datetime value: '1,2,3' for column 'r' at row 1
CALL p_object(@r);
ERROR 22007: Incorrect datetime value: '[object Object]' for column 'r' at row 1
CALL p_func(@r);
ERROR 22007: Incorrect datetime value: 'function (a) { r = 1;}' for column 'r' at row 1
# DATE and DATETIME types accept weird literals.
CALL p_typed_arr(@r);
ERROR 22007: Incorrect datetime value: '0,1,2,3,5' for column 'r' at row 1
CALL p_data_view(@r);
ERROR 22007: Incorrect datetime value: '[object DataView]' for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_mi;
DROP PROCEDURE p_int_mx;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_int_mi1;
DROP PROCEDURE p_int_mx1;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_b;
DROP PROCEDURE p_str_ax;
DROP PROCEDURE p_date;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
DROP PROCEDURE p_object_serr;
#
# ENUM type of OUT parameter is handled similarly to string types.
#
CREATE PROCEDURE p_undefined(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = undefined $$;
CREATE PROCEDURE p_null(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = null $$;
CREATE PROCEDURE p_int(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = 1 $$;
CREATE PROCEDURE p_num(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = 1.25 $$;
CREATE PROCEDURE p_bigint(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = BigInt(100) $$;
CREATE PROCEDURE p_bool(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = true $$;
CREATE PROCEDURE p_str_e(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = "" $$;
CREATE PROCEDURE p_str_0(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = "a" $$;
CREATE PROCEDURE p_str_1(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = "alpha" $$;
CREATE PROCEDURE p_str_2(OUT r ENUM(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251)
LANGUAGE JS AS $$ r = "Додо" $$;
CREATE PROCEDURE p_str_cerr(OUT r ENUM(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251)
LANGUAGE JS AS $$ r = "\u{1F9A4}" $$;
CREATE PROCEDURE p_array(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = function (a) { r = 1 } $$;
CREATE PROCEDURE p_object_serr(OUT r ENUM('a','b')) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
a
CALL p_num(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_bigint(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_bool(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_e(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_0(@r);
SELECT @r AS s0;
s0
a
CALL p_str_2(@r);
SELECT @r = X'c4eee4ee' AS s2;
s2
1
CALL p_str_1(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_cerr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_func(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_object_serr;
#
# SET type OUT parameters are handled similarly to how SQL core
# interprets integer/floating-point values and strings which are
# stored in SET columns.
#
# Numeric values are converted to integers and treated as bitmaps
# representing sets. Strings are expected to contain comma-separated
# lists of SET elements. Additionally strings containing integer
# values are interpreted as bitmaps.
CREATE PROCEDURE p_undefined(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = undefined $$;
CREATE PROCEDURE p_null(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = null $$;
CREATE PROCEDURE p_int(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = 1 $$;
CREATE PROCEDURE p_int_tb(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = 10 $$;
CREATE PROCEDURE p_int_n(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = -1 $$;
CREATE PROCEDURE p_num(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = 1.6 $$;
CREATE PROCEDURE p_bigint(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = BigInt(4) $$;
CREATE PROCEDURE p_bool(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = true $$;
CREATE PROCEDURE p_str_e(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = "" $$;
CREATE PROCEDURE p_str_0(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = "a" $$;
CREATE PROCEDURE p_str_1(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = "b,c" $$;
CREATE PROCEDURE p_str_2(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = "3" $$;
CREATE PROCEDURE p_str_3(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = "1.5" $$;
CREATE PROCEDURE p_str_n(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = "-3" $$;
CREATE PROCEDURE p_str_w(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = "alpha" $$;
CREATE PROCEDURE p_str_4(OUT r SET(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251)
LANGUAGE JS AS $$ r = "Додо" $$;
CREATE PROCEDURE p_str_cerr(OUT r SET(X'd2f3e8e4faebe4faec', X'd2f3e8e4faebe4e8', X'c4eee4ee') CHARACTER SET cp1251)
LANGUAGE JS AS $$ r = "\u{1F9A4}" $$;
CREATE PROCEDURE p_array(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = function (a) { r = 1 } $$;
CREATE PROCEDURE p_object_serr(OUT r SET('a','b','c')) LANGUAGE JS AS $$ r = { toString() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
a
CALL p_int_tb(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_int_n(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_num(@r);
SELECT @r AS n;
n
a
CALL p_bigint(@r);
SELECT @r AS bi;
bi
c
CALL p_bool(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_e(@r);
SELECT @r AS se;
se

CALL p_str_0(@r);
SELECT @r AS s0;
s0
a
CALL p_str_1(@r);
SELECT @r AS s1;
s1
b,c
CALL p_str_2(@r);
SELECT @r AS s2;
s2
a,b
# SQL core doesn't handle non-integer numbers represented as strings
# and doubles stored in SET columns consistently either.
CALL p_str_3(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_n(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_w(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_str_4(@r);
SELECT @r = X'c4eee4ee' AS s;
s
1
CALL p_str_cerr(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_array(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_func(@r);
ERROR 01000: Data truncated for column 'r' at row 1
CALL p_object_serr(@r);
ERROR HY000: Can't convert JS value to string to be stored in out parameter or return value
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_int_tb;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_0;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_3;
DROP PROCEDURE p_str_n;
DROP PROCEDURE p_str_w;
DROP PROCEDURE p_str_4;
DROP PROCEDURE p_str_cerr;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_object_serr;
#
# BIT type of OUT parameter is handled in a special way.
#
# JS values are converted to numbers (ultimately integers) and then
# their binary representation is interpreted as array of bits.
#
# We do not support JS values which are not convertible to numbers to
# avoid confusion caused by different interpretation of 1, "1" and "a".
#
CREATE PROCEDURE p_undefined(OUT r BIT(5)) LANGUAGE JS AS $$ r = undefined $$;
CREATE PROCEDURE p_null(OUT r BIT(5)) LANGUAGE JS AS $$ r = null $$;
CREATE PROCEDURE p_int_0(OUT r BIT(5)) LANGUAGE JS AS $$ r = 0 $$;
CREATE PROCEDURE p_int_1(OUT r BIT(5)) LANGUAGE JS AS $$ r = 7 $$;
CREATE PROCEDURE p_int_tb(OUT r BIT(5)) LANGUAGE JS AS $$ r = 33 $$;
CREATE PROCEDURE p_int_n(OUT r BIT(5)) LANGUAGE JS AS $$ r = -1 $$;
CREATE PROCEDURE p_num_1(OUT r BIT(5)) LANGUAGE JS AS $$ r = 1.25 $$;
CREATE PROCEDURE p_num_2(OUT r BIT(5)) LANGUAGE JS AS $$ r = 7.8 $$;
CREATE PROCEDURE p_num_tb(OUT r BIT(5)) LANGUAGE JS AS $$ r = 32.5 $$;
CREATE PROCEDURE p_num_n(OUT r BIT(5)) LANGUAGE JS AS $$ r = -1.2 $$;
CREATE PROCEDURE p_bigint(OUT r BIT(5)) LANGUAGE JS AS $$ r = BigInt(5) $$;
CREATE PROCEDURE p_bigint_n(OUT r BIT(5)) LANGUAGE JS AS $$ r = BigInt(-1) $$;
CREATE PROCEDURE p_bool(OUT r BIT(5)) LANGUAGE JS AS $$ r = true $$;
CREATE PROCEDURE p_str_e(OUT r BIT(5)) LANGUAGE JS AS $$ r = "" $$;
CREATE PROCEDURE p_str_a(OUT r BIT(5)) LANGUAGE JS AS $$ r = "alpha" $$;
CREATE PROCEDURE p_str_1(OUT r BIT(7)) LANGUAGE JS AS $$ r = "0" $$;
CREATE PROCEDURE p_str_2(OUT r BIT(7)) LANGUAGE JS AS $$ r = "16" $$;
CREATE PROCEDURE p_str_tb(OUT r BIT(5)) LANGUAGE JS AS $$ r = "33" $$;
CREATE PROCEDURE p_array(OUT r BIT(5)) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r BIT(5)) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r BIT(5)) LANGUAGE JS AS $$ r = function (a) { r = 1} $$;
CREATE PROCEDURE p_object_nerr(OUT r BIT(5)) LANGUAGE JS AS $$ r = { valueOf() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int_0(@r);
SELECT HEX(@r) AS i0;
i0
0
CALL p_int_1(@r);
SELECT HEX(@r) AS i1;
i1
7
CALL p_int_tb(@r);
ERROR 22001: Data too long for column 'r' at row 1
CALL p_int_n(@r);
ERROR 22001: Data too long for column 'r' at row 1
CALL p_num_1(@r);
SELECT HEX(@r) AS n1;
n1
1
CALL p_num_2(@r);
SELECT HEX(@r) AS n2;
n2
7
CALL p_num_tb(@r);
ERROR 22001: Data too long for column 'r' at row 1
CALL p_num_n(@r);
ERROR 22001: Data too long for column 'r' at row 1
CALL p_bigint(@r);
SELECT HEX(@r) AS bi;
bi
5
CALL p_bigint_n(@r);
ERROR HY000: Can't convert BigInt value to BIT type (value out of range)
CALL p_bool(@r);
SELECT HEX(@r) AS b;
b
1
CALL p_str_e(@r);
SELECT HEX(@r) AS se;
se
0
CALL p_str_a(@r);
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
CALL p_str_1(@r);
SELECT HEX(@r) AS s1;
s1
0
CALL p_str_2(@r);
SELECT HEX(@r) AS s2;
s2
10
CALL p_str_tb(@r);
ERROR 22001: Data too long for column 'r' at row 1
CALL p_array(@r);
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
CALL p_object(@r);
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
CALL p_func(@r);
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
CALL p_object_nerr(@r);
ERROR HY000: Can't convert JS value to BIT type (possibly non-numeric value)
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int_0;
DROP PROCEDURE p_int_1;
DROP PROCEDURE p_int_tb;
DROP PROCEDURE p_int_n;
DROP PROCEDURE p_num_1;
DROP PROCEDURE p_num_2;
DROP PROCEDURE p_num_tb;
DROP PROCEDURE p_num_n;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bigint_n;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_str_1;
DROP PROCEDURE p_str_2;
DROP PROCEDURE p_str_tb;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_object_nerr;
#
# For GEOMETRY type of OUT parameter we only support conversion from
# ArrayBuffer-based JS values.
#
CREATE PROCEDURE p_undefined(OUT r GEOMETRY) LANGUAGE JS AS $$ r = undefined $$;
CREATE PROCEDURE p_null(OUT r GEOMETRY) LANGUAGE JS AS $$ r = null $$;
CREATE PROCEDURE p_int(OUT r GEOMETRY) LANGUAGE JS AS $$ r = 1 $$;
CREATE PROCEDURE p_num(OUT r GEOMETRY) LANGUAGE JS AS $$ r = 1.25 $$;
CREATE PROCEDURE p_bigint(OUT r GEOMETRY) LANGUAGE JS AS $$ r = BigInt(100) $$;
CREATE PROCEDURE p_bool(OUT r GEOMETRY) LANGUAGE JS AS $$ r = true $$;
CREATE PROCEDURE p_str_e(OUT r GEOMETRY) LANGUAGE JS AS $$ r = "" $$;
CREATE PROCEDURE p_str_a(OUT r GEOMETRY) LANGUAGE JS AS $$ r = "alpha" $$;
CREATE PROCEDURE p_array(OUT r GEOMETRY) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r GEOMETRY) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r GEOMETRY) LANGUAGE JS AS $$ r = function (a) { r = 1 } $$;
CREATE PROCEDURE p_typed_arr(OUT r GEOMETRY) LANGUAGE JS AS $$ r = new Uint8Array([0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 64, 0, 0, 0, 0, 0, 0, 52, 64]) $$;
CREATE PROCEDURE p_data_view(OUT r GEOMETRY) LANGUAGE JS AS $$
let dv = new DataView(new ArrayBuffer(25));
dv.setUint32(0, 0, true);     // SRID 0
dv.setUint8(4, 1);            // little-endian
dv.setUint32(5, 1, true);     // POINT
dv.setFloat64(9, 15, true);   // X
dv.setFloat64(17, 20, true);  // Y
r = dv;
$$|
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_num(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_bigint(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_bool(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_str_e(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_str_a(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_array(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_object(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_func(@r);
ERROR HY000: Only ArrayBuffer-based values are supported for GEOMETRY return type.
CALL p_typed_arr(@r);
SELECT ST_AsText(@r) AS g;
g
POINT(15 20)
CALL p_data_view(@r);
SELECT ST_AsText(@r) AS g;
g
POINT(15 20)
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_typed_arr;
DROP PROCEDURE p_data_view;
#
# For JSON OUT parameters we apply JSON.stringify() to JS value and
# then try to store resulting string in the OUT parameter (of JSON SQL
# type).
#
CREATE PROCEDURE p_undefined(OUT r JSON) LANGUAGE JS AS $$ r = undefined $$;
CREATE PROCEDURE p_null(OUT r JSON) LANGUAGE JS AS $$ r = null $$;
CREATE PROCEDURE p_int(OUT r JSON) LANGUAGE JS AS $$ r = 1 $$;
CREATE PROCEDURE p_num(OUT r JSON) LANGUAGE JS AS $$ r = 1.25 $$;
CREATE PROCEDURE p_bigint(OUT r JSON) LANGUAGE JS AS $$ r = BigInt(100) $$;
CREATE PROCEDURE p_bool(OUT r JSON) LANGUAGE JS AS $$ r = true $$;
CREATE PROCEDURE p_str_e(OUT r JSON) LANGUAGE JS AS $$ r = "" $$;
CREATE PROCEDURE p_str_a(OUT r JSON) LANGUAGE JS AS $$ r = "alpha" $$;
CREATE PROCEDURE p_array(OUT r JSON) LANGUAGE JS AS $$ r = [1, 2, 3] $$;
CREATE PROCEDURE p_object(OUT r JSON) LANGUAGE JS AS $$ r = { x: 1, y: "alpha" } $$;
CREATE PROCEDURE p_func(OUT r JSON) LANGUAGE JS AS $$ r = function (a) { r = 1 } $$;
CREATE PROCEDURE p_object_jerr(OUT r JSON) LANGUAGE JS AS $$ r = { toJSON() { throw "Kaboom!" } } $$;
CALL p_undefined(@r);
SELECT @r AS u;
u
NULL
CALL p_null(@r);
SELECT @r AS nil;
nil
NULL
CALL p_int(@r);
SELECT @r AS i;
i
1
CALL p_num(@r);
SELECT @r AS n;
n
1.25
# JSON.stringify() doesn't support BigInt by default.
CALL p_bigint(@r);
ERROR HY000: For JSON return type only values supported by JSON.stringify() are allowed.
CALL p_bool(@r);
SELECT @r AS b;
b
true
CALL p_str_e(@r);
SELECT @r AS se;
se
""
CALL p_str_a(@r);
SELECT @r AS sa;
sa
"alpha"
CALL p_array(@r);
SELECT @r AS arr;
arr
[1, 2, 3]
CALL p_object(@r);
SELECT @r AS obj;
obj
{"x": 1, "y": "alpha"}
# SQL JSON type doesn't accept all JSON values produced by V8.
CALL p_func(@r);
ERROR 22032: Invalid JSON text: "Invalid value." at position 0 in value for column '.r' at row 1.
CALL p_object_jerr(@r);
ERROR HY000: For JSON return type only values supported by JSON.stringify() are allowed.
DROP PROCEDURE p_undefined;
DROP PROCEDURE p_null;
DROP PROCEDURE p_int;
DROP PROCEDURE p_num;
DROP PROCEDURE p_bigint;
DROP PROCEDURE p_bool;
DROP PROCEDURE p_str_e;
DROP PROCEDURE p_str_a;
DROP PROCEDURE p_array;
DROP PROCEDURE p_object;
DROP PROCEDURE p_func;
DROP PROCEDURE p_object_jerr;
#
# Let us test how JS contexts are handled by our JS routines.
#
# JS contexts are created for each connection and each account under
# which routines are executed.
#
# This means:
# - Different connections get different contexts.
# - Routines which are executed under different accounts get different
#   contexts (even if is the same routine, e.g. function with SQL
#   SECURITY INVOKER attribute used from view and directly).
# - Any routines which are executed within the same connection under
#   the same account get the same context.
#
# We check whether two calls use same JS context by accessing global
# object.
CREATE PROCEDURE p(i INT) LANGUAGE JS AS $$ globalThis.a = i $$;
CREATE FUNCTION f() RETURNS INT LANGUAGE JS AS $$ return globalThis.a $$;
CREATE USER user1@localhost;
GRANT ALL PRIVILEGES ON *.* TO user1@localhost;
CREATE USER user2@localhost;
GRANT ALL PRIVILEGES ON *.* TO user2@localhost;
CREATE DEFINER = user1@localhost FUNCTION g() RETURNS INT LANGUAGE JS AS $$ return globalThis.a $$;
CREATE FUNCTION h() RETURNS INT SQL SECURITY INVOKER LANGUAGE JS AS $$ return globalThis.a $$;
# Create SQL SECURITY DEFINER wrapper over h()
CREATE DEFINER = user2@localhost FUNCTION i() RETURNS INT RETURN h();
#
# Routine calls within the same connection executed under same
# account share the context.
connection default;
CALL p(1);
SELECT f();
f()
1
#
# Calls in different connections get different contexts.
connect  con1, localhost, root,,;
SELECT f();
f()
NULL
CALL p(2);
SELECT f();
f()
2
disconnect con1;
connection default;
SELECT f();
f()
1
#
# Calls under different accounts get different contexts.
#
# Test this by running SECURITY DEFINER routine with non-root definer.
SELECT g();
g()
NULL
# And also by running SECURITY INVOKER routine from different security
# contexts.
SELECT h(), i();
h()	i()
1	NULL
DROP PROCEDURE p;
DROP FUNCTION f;
DROP FUNCTION g;
DROP FUNCTION h;
DROP FUNCTION i;
DROP USER user2@localhost;
DROP USER user1@localhost;
#
# Let us test privilege requirements for JS routine creation and
# execution.
#
CREATE DATABASE mysqltest;
CREATE USER u_creator@localhost;
GRANT CREATE ROUTINE ON mysqltest.* TO u_creator@localhost;
GRANT CREATE_JS_ROUTINE ON *.* TO u_creator@localhost;
CREATE USER u_caller@localhost;
GRANT EXECUTE ON mysqltest.* TO u_caller@localhost;
CREATE USER u_dropper@localhost;
GRANT ALTER ROUTINE ON mysqltest.* TO u_dropper@localhost;
#
# Let us show that JS routine can be created iff user has both CREATE
# ROUTINE privilege on the database and global CREATE_JS_ROUTINE
# privilege.
connect  creator, localhost, u_creator,,;
CREATE FUNCTION mysqltest.f_suid() RETURNS INT LANGUAGE JS AS $$ return 2*2 $$;
CREATE FUNCTION mysqltest.f_nosuid() RETURNS INT SQL SECURITY INVOKER LANGUAGE JS AS $$ return 2*2 $$;
connection default;
GRANT ALL PRIVILEGES ON *.* TO u_creator@localhost;
REVOKE CREATE_JS_ROUTINE ON *.* FROM u_creator@localhost;
connection creator;
CREATE FUNCTION mysqltest.f_err() RETURNS INT LANGUAGE JS AS $$ return 42 $$;
ERROR 42000: Access denied; you need (at least one of) the CREATE_JS_ROUTINE privilege(s) for this operation
CREATE FUNCTION mysqltest.f_err() RETURNS INT SQL SECURITY INVOKER LANGUAGE JS AS $$ return 42 $$;
ERROR 42000: Access denied; you need (at least one of) the CREATE_JS_ROUTINE privilege(s) for this operation
connection default;
GRANT CREATE_JS_ROUTINE ON *.* TO u_creator@localhost;
REVOKE CREATE ROUTINE ON *.* FROM u_creator@localhost;
REVOKE CREATE ROUTINE ON mysqltest.* FROM u_creator@localhost;
connection creator;
CREATE FUNCTION mysqltest.f_err() RETURNS INT LANGUAGE JS AS $$ return 42 $$;
ERROR 42000: Access denied for user 'u_creator'@'localhost' to database 'mysqltest'
CREATE FUNCTION mysqltest.f_err() RETURNS INT SQL SECURITY INVOKER LANGUAGE JS AS $$ return 42 $$;
ERROR 42000: Access denied for user 'u_creator'@'localhost' to database 'mysqltest'
connection default;
# Restore status quo for 'creator' user (ignore
# --sp-automatic-privileges effect for now).
REVOKE ALL PRIVILEGES ON *.* FROM u_creator@localhost;
GRANT CREATE ROUTINE ON mysqltest.* TO u_creator@localhost;
GRANT CREATE_JS_ROUTINE ON *.* TO u_creator@localhost;
#
# Now show that JS routine can be executed iff user has EXECUTE
# privilege on it. For SQL SECURITY DEFINER routines routine definer
# also needs to have EXECUTE privilege at the time of call.
GRANT EXECUTE ON mysqltest.* TO u_creator@localhost;
connect  caller, localhost, u_caller,,;
SELECT mysqltest.f_suid();
mysqltest.f_suid()
4
SELECT mysqltest.f_nosuid();
mysqltest.f_nosuid()
4
connection default;
REVOKE EXECUTE ON mysqltest.* FROM u_creator@localhost;
connection caller;
SELECT mysqltest.f_suid();
ERROR 42000: execute command denied to user 'u_creator'@'localhost' for routine 'mysqltest.f_suid'
SELECT mysqltest.f_nosuid();
mysqltest.f_nosuid()
4
connection default;
GRANT EXECUTE ON mysqltest.* TO u_creator@localhost;
GRANT ALL PRIVILEGES ON *.* TO u_caller@localhost;
REVOKE EXECUTE ON *.* FROM u_caller@localhost;
REVOKE EXECUTE ON mysqltest.* FROM u_caller@localhost;
connection caller;
SELECT mysqltest.f_suid();
ERROR 42000: execute command denied to user 'u_caller'@'localhost' for routine 'mysqltest.f_suid'
SELECT mysqltest.f_nosuid();
ERROR 42000: execute command denied to user 'u_caller'@'localhost' for routine 'mysqltest.f_nosuid'
#
# Show that JS routine can be dropped iff user has ALTER ROUTINE
# privilege on it.
connection default;
GRANT ALL PRIVILEGES ON *.* TO u_dropper@localhost;
REVOKE ALTER ROUTINE ON *.* FROM u_dropper@localhost;
REVOKE ALTER ROUTINE ON mysqltest.* FROM u_dropper@localhost;
connect  dropper, localhost, u_dropper,,;
DROP FUNCTION mysqltest.f1_suid;
ERROR 42000: alter routine command denied to user 'u_dropper'@'localhost' for routine 'mysqltest.f1_suid'
DROP FUNCTION mysqltest.f1_nosuid;
ERROR 42000: alter routine command denied to user 'u_dropper'@'localhost' for routine 'mysqltest.f1_nosuid'
connection default;
REVOKE ALL PRIVILEGES ON *.* FROM u_dropper@localhost;
GRANT ALTER ROUTINE ON mysqltest.* TO u_dropper@localhost;
connection dropper;
DROP FUNCTION mysqltest.f_suid;
DROP FUNCTION mysqltest.f_nosuid;
connection creator;
disconnect creator;
connection caller;
disconnect caller;
connection dropper;
disconnect dropper;
connection default;
DROP USER u_creator@localhost;
DROP USER u_caller@localhost;
DROP USER u_dropper@localhost;
DROP DATABASE mysqltest;
REVOKE CREATE_JS_ROUTINE ON *.* FROM root@localhost;
#
# Test of component uninstallation while having outstanding per
# connection context and isolate.
#
UNINSTALL COMPONENT 'file://component_js_lang';
ERROR HY000: Language component: Cannot uninstall due to connected sessions. Please disconnect all sessions and try again.
# Disconnect of default connection frees the only remaining per
# connection context and isolate. It is safe to uninstall
# component now.
disconnect default;
connect default,localhost,root;
UNINSTALL COMPONENT 'file://component_js_lang';
#
# UNINSTALL -> INSTALL is not supported without interim restart
# as V8 doesn't support re-initialization.
INSTALL COMPONENT 'file://component_js_lang';
ERROR HY000: Re-installing the component without server restart is not supported.
# Restart server to let subsequent tests to do INSTALL COMPONENT freely.
# restart
