#
# Compoent Masking Functions:
# * gen_dictionary
# * gen_blocklist
# * masking_dictionary_term_add
# * masking_dictionary_term_remove
# * masking_dictionary_remove
# * masking_dictionaries_flush
#
INSTALL COMPONENT 'file://component_masking_functions';
#
# Create users with and without MASKING_DICTIONARIES_ADMIN privilege
CREATE USER udftest_unpriv@localhost;
CREATE USER udftest_priv@localhost;
GRANT MASKING_DICTIONARIES_ADMIN ON *.* TO udftest_priv@localhost;
#
# arity checks, run for privileged user
SELECT gen_dictionary();
ERROR HY000: Can't initialize function 'gen_dictionary'; Wrong argument list: gen_dictionary(string)
SELECT gen_dictionary('', '');
ERROR HY000: Can't initialize function 'gen_dictionary'; Wrong argument list: gen_dictionary(string)
SELECT gen_blocklist();
ERROR HY000: Can't initialize function 'gen_blocklist'; Wrong argument list: gen_blocklist(string, string, string)
SELECT gen_blocklist('');
ERROR HY000: Can't initialize function 'gen_blocklist'; Wrong argument list: gen_blocklist(string, string, string)
SELECT gen_blocklist('', '');
ERROR HY000: Can't initialize function 'gen_blocklist'; Wrong argument list: gen_blocklist(string, string, string)
SELECT gen_blocklist('', '', '', '');
ERROR HY000: Can't initialize function 'gen_blocklist'; Wrong argument list: gen_blocklist(string, string, string)
SELECT masking_dictionary_term_add();
ERROR HY000: Can't initialize function 'masking_dictionary_term_add'; Wrong argument list: masking_dictionary_term_add(string, string)
SELECT masking_dictionary_term_add('');
ERROR HY000: Can't initialize function 'masking_dictionary_term_add'; Wrong argument list: masking_dictionary_term_add(string, string)
SELECT masking_dictionary_term_add('', '', '');
ERROR HY000: Can't initialize function 'masking_dictionary_term_add'; Wrong argument list: masking_dictionary_term_add(string, string)
SELECT masking_dictionary_term_remove();
ERROR HY000: Can't initialize function 'masking_dictionary_term_remove'; Wrong argument list: masking_dictionary_term_remove(string, string)
SELECT masking_dictionary_term_remove('');
ERROR HY000: Can't initialize function 'masking_dictionary_term_remove'; Wrong argument list: masking_dictionary_term_remove(string, string)
SELECT masking_dictionary_term_remove('', '', '');
ERROR HY000: Can't initialize function 'masking_dictionary_term_remove'; Wrong argument list: masking_dictionary_term_remove(string, string)
SELECT masking_dictionary_remove();
ERROR HY000: Can't initialize function 'masking_dictionary_remove'; Wrong argument list: masking_dictionary_remove(string)
SELECT masking_dictionary_remove('', '');
ERROR HY000: Can't initialize function 'masking_dictionary_remove'; Wrong argument list: masking_dictionary_remove(string)
SELECT masking_dictionaries_flush('');
ERROR HY000: Can't initialize function 'masking_dictionaries_flush'; Wrong argument list: masking_dictionaries_flush()
#
# argument nullness checks for functions not requiring MASKING_DICTIONARIES_ADMIN
SELECT gen_dictionary(NULL);
ERROR HY000: gen_dictionary<string> UDF failed; argument 1 cannot be null
SELECT gen_blocklist('Berlin', NULL, 'us_cities');
ERROR HY000: gen_blocklist<string> UDF failed; argument 2 cannot be null
SELECT gen_blocklist('Berlin', 'de_cities', NULL);
ERROR HY000: gen_blocklist<string> UDF failed; argument 3 cannot be null
#
# checking the case when there is no mysql.masking_dictionaries table
SELECT gen_blocklist('Berlin', 'de_cities', 'us_cities');
ERROR HY000: Error in command service backend interface, because of : "Table 'mysql.masking_dictionaries' doesn't exist"
SELECT gen_dictionary('us_cities');
ERROR HY000: Error in command service backend interface, because of : "Table 'mysql.masking_dictionaries' doesn't exist"
#
# NULL for NULL checks
include/assert.inc [gen_blocklist() for the NULL primary argument should return NULL]
#
# checking the case when mysql.masking_dictionaries has invalid structure
CREATE TABLE mysql.masking_dictionaries(
Dictionary VARCHAR(256) NOT NULL,
UNIQUE INDEX dictionary_term_idx (Dictionary)
) ENGINE = InnoDB DEFAULT CHARSET=utf8mb4;
SELECT gen_blocklist('Berlin', 'de_cities', 'us_cities');
ERROR HY000: Error in command service backend interface, because of : "Unknown column 'Term' in 'field list'"
SELECT gen_dictionary('us_cities');
ERROR HY000: Error in command service backend interface, because of : "Unknown column 'Term' in 'field list'"
DROP TABLE mysql.masking_dictionaries;
#
# checks for an unprivileged user
SELECT masking_dictionary_term_add('single_dict', 'entry');
ERROR HY000: Can't initialize function 'masking_dictionary_term_add'; Function requires MASKING_DICTIONARIES_ADMIN privilege
SELECT masking_dictionary_term_remove('single_dict', 'entry');
ERROR HY000: Can't initialize function 'masking_dictionary_term_remove'; Function requires MASKING_DICTIONARIES_ADMIN privilege
SELECT masking_dictionary_remove('single_dict');
ERROR HY000: Can't initialize function 'masking_dictionary_remove'; Function requires MASKING_DICTIONARIES_ADMIN privilege
#
# checking the case when mysql.masking_dictionaries is empty
CREATE TABLE mysql.masking_dictionaries(
Dictionary VARCHAR(256) NOT NULL,
Term VARCHAR(256) NOT NULL,
UNIQUE INDEX dictionary_term_idx (Dictionary, Term)
) ENGINE = InnoDB DEFAULT CHARSET=utf8mb4;
include/assert.inc [gen_dictionary on an empty table must return NULL]
SET @check_expression_result = gen_blocklist('Berlin', 'de_cities', 'us_cities');
include/assert.inc [the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'us_cities')' must be equal to 'Berlin']
include/assert.inc [charset of the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'us_cities')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'us_cities')' must be 'utf8mb4_0900_ai_ci']
# checking that gen_dictionary / gen_blocklist can be run without MASKING_DICTIONARIES_ADMIN
INSERT INTO mysql.masking_dictionaries VALUES('us_cities', 'city1');
INSERT INTO mysql.masking_dictionaries VALUES('us_cities', 'city2');
INSERT INTO mysql.masking_dictionaries VALUES('us_cities', 'city3');
INSERT INTO mysql.masking_dictionaries VALUES('us_cities', 'city4');
INSERT INTO mysql.masking_dictionaries VALUES('укр_міста', 'місто1');
INSERT INTO mysql.masking_dictionaries VALUES('укр_міста', 'місто2');
SELECT masking_dictionaries_flush();
masking_dictionaries_flush()
1
include/assert.inc [gen_dictionary on a non-existing dictionary must return NULL]
SET @check_expression_result = gen_dictionary('us_cities');
include/assert.inc [the result of evaluating 'gen_dictionary('us_cities')' must match the 'city[[:digit:]]{1}' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('us_cities')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('us_cities')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('укр_міста');
include/assert.inc [the result of evaluating 'gen_dictionary('укр_міста')' must match the 'місто[[:digit:]]{1}' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('укр_міста')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('укр_міста')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist('Berlin', 'de_cities', 'us_cities');
include/assert.inc [the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'us_cities')' must be equal to 'Berlin']
include/assert.inc [charset of the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'us_cities')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'us_cities')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist('Berlin', 'de_cities', 'fr_cities');
include/assert.inc [the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'fr_cities')' must be equal to 'Berlin']
include/assert.inc [charset of the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'fr_cities')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist('Berlin', 'de_cities', 'fr_cities')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist('Berlin', 'us_cities', 'укр_міста');
include/assert.inc [the result of evaluating 'gen_blocklist('Berlin', 'us_cities', 'укр_міста')' must be equal to 'Berlin']
include/assert.inc [charset of the result of evaluating 'gen_blocklist('Berlin', 'us_cities', 'укр_міста')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist('Berlin', 'us_cities', 'укр_міста')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist('Berlin', 'us_cities', 'fr_cities');
include/assert.inc [the result of evaluating 'gen_blocklist('Berlin', 'us_cities', 'fr_cities')' must be equal to 'Berlin']
include/assert.inc [charset of the result of evaluating 'gen_blocklist('Berlin', 'us_cities', 'fr_cities')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist('Berlin', 'us_cities', 'fr_cities')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist('city1', 'us_cities', 'укр_міста');
include/assert.inc [the result of evaluating 'gen_blocklist('city1', 'us_cities', 'укр_міста')' must match the 'місто[[:digit:]]{1}' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist('city1', 'us_cities', 'укр_міста')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist('city1', 'us_cities', 'укр_міста')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [gen_blocklist when to_dictionary does not exist must return NULL]
DELETE FROM mysql.masking_dictionaries;
SELECT masking_dictionaries_flush();
masking_dictionaries_flush()
1
#
# argument nullness checks for functions requiring MASKING_DICTIONARIES_ADMIN
SELECT masking_dictionary_term_add(NULL, 'entry');
ERROR HY000: masking_dictionary_term_add<string> UDF failed; argument 1 cannot be null
SELECT masking_dictionary_term_add('single_dict', NULL);
ERROR HY000: masking_dictionary_term_add<string> UDF failed; argument 2 cannot be null
SELECT masking_dictionary_term_remove(NULL, 'entry');
ERROR HY000: masking_dictionary_term_remove<string> UDF failed; argument 1 cannot be null
SELECT masking_dictionary_term_remove('single_dict', NULL);
ERROR HY000: masking_dictionary_term_remove<string> UDF failed; argument 2 cannot be null
SELECT masking_dictionary_remove(NULL);
ERROR HY000: masking_dictionary_remove<string> UDF failed; argument 1 cannot be null
#
# checks for a user with MASKING_DICTIONARIES_ADMIN privilege using various character sets / collations
SET @regular_charset_list = '[ "utf8mb4", "utf8mb3", "utf16", "utf16le", "utf32", "ucs2", "koi8u"]';
SET @special_charset_list = '[ "latin2", "ascii", "binary"]';
SET @charset_list = JSON_MERGE_PRESERVE(@regular_charset_list, @special_charset_list);
chacacter set 'utf8mb4'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb4));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb4))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb4));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb4))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb4));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb4))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb4));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb4))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb4));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb4))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb4));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb4))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb4), 'dictionary', 'словник')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb4), 'словник', 'dictionary')' must be 'utf8mb4_0900_ai_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb4));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb4))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'utf8mb3'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb3))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb3))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb3))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb3))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb3))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb3))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'single')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf8mb3), 'dictionary', 'словник')' must be 'utf8mb3_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary');
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf8mb3), 'словник', 'dictionary')' must be 'utf8mb3_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb3))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'utf16'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'single')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16), 'dictionary', 'словник')' must be 'utf16_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16), 'словник', 'dictionary')' must be 'utf16_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'utf16le'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16le));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16le))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16le));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16le))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16le));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16le))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16le));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16le))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16le));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16le))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16le));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16le))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'single')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf16le), 'dictionary', 'словник')' must be 'utf16le_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf16le), 'словник', 'dictionary')' must be 'utf16le_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16le));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16le))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'utf32'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf32));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf32))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING utf32))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf32));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf32))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING utf32))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf32));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf32))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING utf32))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf32));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf32))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING utf32))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf32));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf32))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING utf32))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf32));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf32))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING utf32))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'single')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING utf32), 'dictionary', 'словник')' must be 'utf32_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING utf32), 'словник', 'dictionary')' must be 'utf32_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf32));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf32))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING utf32))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'ucs2'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_юра' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING ucs2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING ucs2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING ucs2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_юра' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING ucs2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_юра' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING ucs2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_юра' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING ucs2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'single')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING ucs2), 'dictionary', 'словник')' must be 'ucs2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary');
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING ucs2), 'словник', 'dictionary')' must be 'ucs2_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_юра' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING ucs2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'koi8u'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_юра' USING koi8u));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING koi8u))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_юра' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING koi8u));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING koi8u))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_юра' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING koi8u));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING koi8u))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_юра' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_юра' USING koi8u));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING koi8u))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_юра' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_юра' USING koi8u));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING koi8u))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_юра' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_юра' USING koi8u));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING koi8u))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_юра' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be equal to 'term00_юра']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'single')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_юра' USING koi8u), 'dictionary', 'словник')' must be 'koi8u_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_юра' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_юра' USING koi8u), 'словник', 'dictionary')' must be 'koi8u_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_юра' USING koi8u));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING koi8u))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_юра' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'latin2'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_yura' USING latin2));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING latin2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING latin2))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING latin2));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING latin2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING latin2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING latin2));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING latin2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING latin2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_yura' USING latin2));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING latin2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING latin2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_yura' USING latin2));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING latin2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING latin2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_yura' USING latin2));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING latin2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING latin2))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'single')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING latin2), 'dictionary', 'словник')' must be 'latin2_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING latin2), 'словник', 'dictionary')' must be 'latin2_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_yura' USING latin2));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING latin2))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING latin2))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'ascii'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_yura' USING ascii));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING ascii))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING ascii))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING ascii));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING ascii))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING ascii))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING ascii));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING ascii))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING ascii))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_yura' USING ascii));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING ascii))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING ascii))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_yura' USING ascii));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING ascii))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING ascii))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_yura' USING ascii));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING ascii))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING ascii))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'single')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING ascii), 'dictionary', 'словник')' must be 'ascii_general_ci']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING ascii), 'словник', 'dictionary')' must be 'ascii_general_ci']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_yura' USING ascii));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING ascii))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING ascii))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
chacacter set 'binary'
masking_dictionary_term_add checks
SET @check_expression_result = masking_dictionary_term_add('single', CONVERT('term00_yura' USING binary));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING binary))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('single', CONVERT('term00_yura' USING binary))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_add must fail]
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING binary));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING binary))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term10_yura' USING binary))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING binary));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING binary))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('dictionary', CONVERT('term11_yura' USING binary))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term20_yura' USING binary));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING binary))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term20_yura' USING binary))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term21_yura' USING binary));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING binary))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term21_yura' USING binary))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = masking_dictionary_term_add('словник', CONVERT('term22_yura' USING binary));
include/assert.inc [the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING binary))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_add('словник', CONVERT('term22_yura' USING binary))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 6 records]
gen_dictionary: iteration 0
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 1
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 2
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 3
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 4
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 5
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 6
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 7
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 8
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 9
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 10
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 11
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 12
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 13
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 14
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_dictionary: iteration 15
SET @check_expression_result = gen_dictionary('single');
include/assert.inc [the result of evaluating 'gen_dictionary('single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('single')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('dictionary');
include/assert.inc [the result of evaluating 'gen_dictionary('dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('dictionary')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_dictionary('словник');
include/assert.inc [the result of evaluating 'gen_dictionary('словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_dictionary('словник')' must be 'utf8mb4_0900_ai_ci']
gen_blocklist: iteration 0
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 1
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 2
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 3
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 4
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 5
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 6
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 7
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 8
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 9
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 10
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 11
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 12
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 13
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 14
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
gen_blocklist: iteration 15
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be equal to 'term00_yura']
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'single')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must match the 'term2[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term10_yura' USING binary), 'dictionary', 'словник')' must be 'binary']
SET @check_expression_result = gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary');
include/assert.inc [the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must match the 'term1[[:digit:]]{1}_yura' pattern]
include/assert.inc [charset of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_blocklist(CONVERT('term20_yura' USING binary), 'словник', 'dictionary')' must be 'binary']
masking_dictionary_term_remove checks
SET @check_expression_result = masking_dictionary_term_remove('single', CONVERT('term00_yura' USING binary));
include/assert.inc [the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING binary))' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_term_remove('single', CONVERT('term00_yura' USING binary))' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_term_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 5 records]
masking_dictionary_remove checks
SET @check_expression_result = masking_dictionary_remove('dictionary');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('dictionary')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('dictionary')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [second masking_dictionary_remove must fail]
include/assert.inc [mysql.masking_dictionaries must have 3 records]
SET @check_expression_result = masking_dictionary_remove('словник');
include/assert.inc [the result of evaluating 'masking_dictionary_remove('словник')' must be equal to '1']
include/assert.inc [charset of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'masking_dictionary_remove('словник')' must be 'utf8mb4_0900_ai_ci']
include/assert.inc [mysql.masking_dictionaries must have 0 records]
################################
DROP USER udftest_unpriv@localhost;
DROP USER udftest_priv@localhost;
UNINSTALL COMPONENT 'file://component_masking_functions';
DROP TABLE mysql.masking_dictionaries;
