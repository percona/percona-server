--source include/have_debug.inc
--source include/have_debug_sync.inc

# This test is to check if table being currently encrypted/decrypted/re-encrypted
# by encryption threads fail to be FLUSH FOR EXPORT

let MYSQLD_DATADIR = `SELECT @@datadir`;
--let $number_of_records = 10000

CREATE TABLE t1 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENGINE=InnoDB;
CREATE TABLE t2 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENGINE=InnoDB;

DELIMITER //;
CREATE PROCEDURE innodb_insert_proc (repeat_count INT)
BEGIN
  DECLARE current_num INT;
  SET current_num = 0;
  WHILE current_num < repeat_count DO
    INSERT INTO t1 VALUES (current_num,repeat('foobar',42));
    INSERT INTO t2 VALUES (current_num,repeat('foobar',42));
    SET current_num = current_num + 1;
  END WHILE;
END//
DELIMITER ;//
COMMIT;

SET autocommit=0;
eval call innodb_insert_proc($number_of_records);
COMMIT;
SET autocommit=1;

# Make sure encryption is disabled
--let $assert_text= Make sure encryption is disabled
--let $assert_cond= "[SELECT @@GLOBAL.default_table_encryption]" = 0
--source include/assert.inc

--let $assert_text= Make sure t1 is not encrypted
--let $assert_cond= "[SELECT FLAG & 8192 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'test/t1\\']" = 0
--source include/assert.inc

--let $assert_text= Make sure t2 is not encrypted
--let $assert_cond= "[SELECT FLAG & 8192 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'test/t1\\']" = 0
--source include/assert.inc

--echo # We want t1 to hang on starting rotation with one thread active on it.
SET GLOBAL debug="+d,hang_on_t1_rotation";

--echo # Start rotation to online keyring encrypted (tables do not have crypt data stored in page 0)
SET GLOBAL innodb_encryption_threads = 0;
SET GLOBAL default_table_encryption=ONLINE_TO_KEYRING;
SET GLOBAL innodb_encryption_threads = 4;

--let tables_count=`select count(*) from INFORMATION_SCHEMA.INNODB_TABLESPACES`

--echo # All tables should get encrypted. tables_count - 2 because temporary tablespace is not encrypted and t1 will hang
--echo # on starting rotation with one thread active on it.
--let $wait_timeout= 600
--let $wait_condition=SELECT COUNT(*) = $tables_count - 2 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 1
--source include/wait_condition.inc

--echo # Table t1 should have min_key_version = 0 assigned and ROTATIONG_OR_FLUSHING=1 <= this means that only 100 pages
--echo # have been rotatted.
--let $wait_timeout= 600
--let $wait_condition=SELECT name = 'test/t1' FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 0 AND ROTATING_OR_FLUSHING = 1
--source include/wait_condition.inc

--let $assert_text= Make sure t1 is not encrypted
--let $assert_cond= "[SELECT FLAG & 8192 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'test/t1\\']" = 0
--source include/assert.inc

--let $assert_text= Make sure t2 is encrypted
--let $assert_cond= "[SELECT FLAG & 8192 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'test/t2\\']" = 8192
--source include/assert.inc

# should fail as t1 is not fully encrypted and there are still
# threads running on it.

--error ER_FLUSH_ENC_THREADS_RUNNING
FLUSH TABLE t1 FOR EXPORT;

# should pass as t2 is fully encyrpted and there are no threads
# running on it.
FLUSH TABLE t2 FOR EXPORT;

--perl
do "$ENV{MYSQL_TEST_DIR}/include/innodb-util.inc";
ib_backup_tablespaces("test", "t2");
EOF

UNLOCK TABLES;

# let t1 rotation complete
SET GLOBAL debug="-d,hang_on_t1_rotation";

--echo # Wait for t1 to be fully encrypted
--let $wait_timeout= 600
--let $wait_condition=SELECT MIN_KEY_VERSION = 1 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE name = 'test/t1'
--source include/wait_condition.inc

--let $assert_text= Make sure t1 is encrypted
--let $assert_cond= "[SELECT FLAG & 8192 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'test/t1\\']" = 8192
--source include/assert.inc

# it now should be possible to export t1
FLUSH TABLE t1 FOR EXPORT;

--perl
do "$ENV{MYSQL_TEST_DIR}/include/innodb-util.inc";
ib_backup_tablespaces("test", "t1");
EOF

UNLOCK TABLES;

# Check that tables were properly exported by importing them.

ALTER TABLE t1 DISCARD TABLESPACE;
ALTER TABLE t2 DISCARD TABLESPACE;
--perl
do "$ENV{MYSQL_TEST_DIR}/include/innodb-util.inc";
ib_restore_tablespaces("test", "t1");
ib_restore_tablespaces("test", "t2");
EOF

ALTER TABLE t1 IMPORT TABLESPACE;
ALTER TABLE t2 IMPORT TABLESPACE;

--let $assert_text= Make sure t1 is readable
--let $assert_cond= "[SELECT COUNT(*) FROM t1]" = $number_of_records
--source include/assert.inc

--let $assert_text= Make sure t2 is readable
--let $assert_cond= "[SELECT COUNT(*) FROM t2]" = $number_of_records
--source include/assert.inc

# cleanup
DROP TABLE t1,t2;
SET GLOBAL innodb_encryption_threads=0;
SET GLOBAL default_table_encryption=OFF;
DROP PROCEDURE innodb_insert_proc;
--remove_file $MYSQLTEST_VARDIR/tmp/t1.cfg
--remove_file $MYSQLTEST_VARDIR/tmp/t1.ibd
--remove_file $MYSQLTEST_VARDIR/tmp/t2.cfg
--remove_file $MYSQLTEST_VARDIR/tmp/t2.ibd
