SET GLOBAL innodb_encryption_threads=4;

--let $MYSQLD_DATADIR=`select @@datadir`
--let t6_IBD = $MYSQLD_DATADIR/test/t6.ibd

--disable_warnings
SET GLOBAL innodb_file_per_table = ON;
--enable_warnings

create table t1 (a varchar(255)) engine=innodb encryption='KEYRING';
create table t2 (a varchar(255)) engine=innodb encryption_key_id=5;
create table t3 (a varchar(255)) engine=innodb;
create table t4 (a varchar(255)) engine=innodb encryption='Y'; # MK encryption - should get re-encrypted to KEYRING
create table t5 (a varchar(255)) engine=innodb;
create table t6 (a varchar(255)) engine=innodb encryption='N';

insert t1 values (repeat('foobarsecret', 12));
insert t2 values (repeat('tempsecret', 12));
insert t3 values (repeat('dummysecret', 12));
insert t4 values (repeat('verysecret', 12));
insert t5 values (repeat('sooosecret', 12));
insert t6 values (repeat('nosecret', 12));

--let tables_count=`select count(*) from INFORMATION_SCHEMA.INNODB_TABLESPACES`
--let $wait_timeout= 600
# Encrypted tables count should be equal $tables_count - 2 - because t6 and temporary should stay unencrypted
--let $wait_condition=SELECT COUNT(*) = $tables_count - 2 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 1
--source include/wait_condition.inc

--let $assert_text= Successful rotation of percona_innodb-0 to version 2
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-0\\"\\) = 1]" = 1
--source include/assert.inc

--echo # Just make sure that none of the table started re-encrypting
--sleep 5 # Give a bit of time for re-encryption thread

--let $assert_text= None of the tables should get re-encrypted with version 2
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 2]" = 0
--source include/assert.inc

--let $assert_text= Successful rotation of percona_innodb-0 to version 3
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-0\\"\\) = 1]" = 1
--source include/assert.inc

--let $wait_timeout= 600
# We should have $tables_count - 3 tables encrypted with version 3, as 
# t2 is encrypted with version 1 of key 5 and t6 and temporary are unencrypted
--let $wait_condition=SELECT COUNT(*) = $tables_count - 3 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 3
--source include/wait_condition.inc

--let $assert_text= table t2 should not get re-encrypted as key 5 is still in version 1
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 1 and name=\\'test/t2\\' AND CURRENT_KEY_ID = 5]" = 1
--source include/assert.inc

--let $assert_text= table t6 should stay unencrypted
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 0]" = 1
--source include/assert.inc

--echo # Now, let's rotate key 5 twice

--let $assert_text= Successful rotation of percona_innodb-5 to version 2
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-5\\"\\) = 1]" = 1
--source include/assert.inc

--let $assert_text= Successful rotation of percona_innodb-5 to version 3
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-5\\"\\) = 1]" = 1
--source include/assert.inc

--let $wait_timeout= 600
--let $wait_condition=SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 3 AND CURRENT_KEY_ID = 5
--source include/wait_condition.inc

--echo # Setting innodb_encryption_rotate_key_age to 1. Now each key rotation should result
--echo # in re-encryption of the table
SET GLOBAL innodb_encryption_rotate_key_age = 1;

--let $assert_text= Successful rotation of percona_innodb-0 to version 4
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-0\\"\\) = 1]" = 1
--source include/assert.inc

--let $wait_timeout= 600
# We should have $tables_count - 3 tables encrypted with version 4, as
# t2 is encrypted with version 3 of key 5 and t6 and temporary should stay unencrypted
--let $wait_condition=SELECT COUNT(*) = $tables_count - 3 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 4
--source include/wait_condition.inc

--let $assert_text= table t2 should not get re-encrypted as key 5 is still in version 3
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 3 and name=\\'test/t2\\' AND CURRENT_KEY_ID = 5]" = 1
--source include/assert.inc

--echo # Rotate key 5 to version 4 => this should trigger table t2 re-encryption
--let $assert_text= Successful rotation of percona_innodb-5 to version 4
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-5\\"\\) = 1]" = 1
--source include/assert.inc

--let $wait_timeout= 600
--let $wait_condition=SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 4 AND CURRENT_KEY_ID = 5
--source include/wait_condition.inc

--echo # Now turn the re-encryption off by setting innodb_encryption_rotate_key_age to 0
SET GLOBAL innodb_encryption_rotate_key_age = 0;

--echo # Rotating key should not cause any re-encryption

--let $assert_text= Successful rotation of percona_innodb-0 to version 5
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-0\\"\\) = 1]" = 1
--source include/assert.inc

--echo # Rotate key 5 to version 5 => this should trigger table t2 re-encryption
--let $assert_text= Successful rotation of percona_innodb-5 to version 5
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_innodb-5\\"\\) = 1]" = 1
--source include/assert.inc

--echo # Just make sure that none of the table started re-encrypting
--sleep 5 # Give a bit of time for re-encryption thread

--let $assert_text= All tables should be still encrypted with key version 4 at most.
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION > 4]" = 0
--source include/assert.inc

--echo #Make sure t6 is still unencrypted

--let $assert_text= table t6 should stay unencrypted
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 0]" = 1
--source include/assert.inc

--echo # Now let's alter t6 so it become encrypted

alter table t6 encryption='KEYRING';

--echo # t6 should get rebuilt with latest version of percona_innodb-0, i.e. version 5

--let $assert_text= table t6 should get rebuilt with latest version of percona_innodb-0, i.e. version 5
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 5 and name=\\'test/t6\\' AND CURRENT_KEY_ID = 0]" = 1
--source include/assert.inc

--echo # Now change t6's encryption key to a new one 6 - it should have version 1

alter table t6 encryption_key_id = 6;

--let $assert_text= table t6 should get rebuilt with latest version of percona_innodb-6, i.e. version 1
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 1 and name=\\'test/t6\\' AND CURRENT_KEY_ID = 6]" = 1
--source include/assert.inc

--echo # Now change t6's encryption key to an existing key 5. It should have its latest
--echo # key_version assigned, i.e. 5

alter table t6 encryption_key_id = 5;

--let $assert_text= table t6 should get rebuilt with latest version of percona_innodb-5, i.e. version 5
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 5 and name=\\'test/t6\\' AND CURRENT_KEY_ID = 5]" = 1
--source include/assert.inc

--echo # Turn off encryption for t6
alter table t6 encryption='N';

--echo # Wait for t6 to get decrypted

--let $assert_text= table t6 should be marked as unencrypted
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 0 and name=\\'test/t6\\']" = 1
--source include/assert.inc

--source include/shutdown_mysqld.inc

--echo # Make sure t6 is unencrypted
--let SEARCH_PATTERN=nosecret
--let ABORT_ON=NOT_FOUND
--let SEARCH_FILE=$t6_IBD
--source include/search_pattern_in_file.inc

--let $restart_parameters=restart:--innodb-encryption-threads=4
--source include/start_mysqld.inc

--echo # Now turn off the encryption. Only one table should remain encrypted - the one with explicite encryption
--echo # ie. t1

SET GLOBAL default_table_encryption = ONLINE_FROM_KEYRING_TO_UNENCRYPTED;

--let $wait_timeout= 600
# We should have $tables_count - 2 tables unencrypted (table t1 should stay encrypted with version 4 of key 0 and temporary is never encrypted)
--let $wait_condition=SELECT COUNT(*) = $tables_count - 2 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 0
--source include/wait_condition.inc

# Table t1 should stay encrypted with version 4 of key 0
--let $assert_text= table t1 should stay encrypted with version 4 of key 0
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 4 and name=\\'test/t1\\' AND CURRENT_KEY_ID = 0]" = 1
--source include/assert.inc

# t6 has been marked as unencrypted - turn on the encryption - it should stay unencrypted
SET GLOBAL default_table_encryption = ONLINE_TO_KEYRING;

--let $wait_timeout= 600
# Encrypted tables count should be equal $tables_count - 2 as t6 and temporary should stays unencrypted
--let $wait_condition=SELECT COUNT(*) = $tables_count - 2 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION <> 0
--source include/wait_condition.inc

--let $assert_text= table t6 should be marked as unencrypted
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 0 and name=\\'test/t6\\']" = 1
--source include/assert.inc

--echo # Create table t7 encrypted with an existing key 5. It should have its latest
--echo # key_version assigned, i.e. 5

create table t7 (a varchar(255)) engine=innodb encryption='KEYRING' ENCRYPTION_KEY_ID=5;

--let $assert_text= table t7 should be encrypted with latest version of percona_innodb-5, i.e. version 5
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 5 and name=\\'test/t7\\' AND CURRENT_KEY_ID = 5]" = 1
--source include/assert.inc

drop table t1, t2, t3, t4, t5, t6, t7;

# cleanup

# Decrypt all tables
SET GLOBAL default_table_encryption = ONLINE_FROM_KEYRING_TO_UNENCRYPTED;
--let $wait_timeout= 600
--let $wait_condition=SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION <> 0
--source include/wait_condition.inc

SET GLOBAL default_table_encryption=ONLINE_TO_KEYRING;
SET GLOBAL innodb_encryption_threads=0;
# The backup file might be a leftover after calling generate key on existing key
--error 0,1
--remove_file "$MYSQL_TMP_DIR/mysecret_keyring.backup"
