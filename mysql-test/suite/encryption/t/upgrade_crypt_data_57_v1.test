# This test contains keyring file created on 64bit which is not
# portable
--source include/have_64bit.inc
--source include/no_valgrind_without_big.inc
--source include/have_util_unzip.inc
--source include/have_debug.inc

--disable_query_log
call mtr.add_suppression("Resizing redo log from");
call mtr.add_suppression("Upgrading redo log");
call mtr.add_suppression("Starting to delete and rewrite log files");
call mtr.add_suppression("New log files created");
call mtr.add_suppression("Unknown system variable 'show_compatibility_56'");
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work");
call mtr.add_suppression("Creating routine without parsing routine body");
call mtr.add_suppression("Resolving dependency for the view");
call mtr.add_suppression("references invalid");
call mtr.add_suppression("doesn't exist");
call mtr.add_suppression("information_schema");
call mtr.add_suppression("Storage engine '.*' does not support system tables. \\[mysql.*\\]");
call mtr.add_suppression("Table 'mysql.component' doesn't exist");
call mtr.add_suppression("is expected to be transactional");
call mtr.add_suppression("table is missing or has an incorrect definition");
call mtr.add_suppression("ACL DDLs will not work unless mysql_upgrade is executed");
call mtr.add_suppression("Native table .* has the wrong structure");
call mtr.add_suppression("Column count of mysql.* is wrong");
call mtr.add_suppression("Cannot open table mysql/version from the internal data dictionary of InnoDB though the .frm file for the table exists");
call mtr.add_suppression("Column count of performance_schema.events_statements_summary_by_digest is wrong");
call mtr.add_suppression("The privilege system failed to initialize correctly");
call mtr.add_suppression("Missing system table mysql.global_grants");
# InnoDB reports "Lock wait timeout" warnings when it tries to drop persistent
# statistics while persistent statistics table is altered during upgrade.
# This issue doesn't seem to cause any further trouble (as there is no persistent
# stats for persistent stats table anyway), so we ignore these warnings here.
call mtr.add_suppression("Unable to delete statistics for table mysql.");
# new fields were added to these tables
call mtr.add_suppression("Column count of performance_schema.replication_group_members is wrong. Expected 7, found 5");
call mtr.add_suppression("Column count of performance_schema.replication_group_member_stats is wrong. Expected 13, found 9");
call mtr.add_suppression("Column count of performance_schema.threads is wrong. Expected 18, found 17");
call mtr.add_suppression("ACL table mysql.[a-zA-Z_]* missing. Some operations may fail.");
call mtr.add_suppression("Info table is not ready to be used. Table 'mysql.slave_master_info' cannot be opened");
call mtr.add_suppression("Error in checking mysql.slave_master_info repository info type of TABLE");
call mtr.add_suppression("Error creating master info: Error checking repositories.");
call mtr.add_suppression("Slave: Failed to initialize the master info structure for channel");
call mtr.add_suppression("Failed to create or recover replication info repositories.");
call mtr.add_suppression("db.opt file not found for test database. Using default Character set");
call mtr.add_suppression("Skip re-populating collations and character sets tables in InnoDB read-only mode");
call mtr.add_suppression("Skipped updating resource group metadata in InnoDB read only mode");
--enable_query_log

--echo # Set different paths for --datadir
let $MYSQLD_DATADIR1 = $MYSQL_TMP_DIR/data_57_crypt_v1/data;

--copy_file $MYSQLTEST_VARDIR/std_data/data_57_crypt_v1.zip $MYSQL_TMP_DIR/data_57_crypt_v1.zip

--echo # Check that the file exists in the working folder.
--file_exists $MYSQL_TMP_DIR/data_57_crypt_v1.zip

--echo # Unzip the zip file.
--exec unzip -qo $MYSQL_TMP_DIR/data_57_crypt_v1.zip -d $MYSQL_TMP_DIR

--let $MYSQLD_DATADIR=`SELECT @@datadir`

--echo # Stop DB server which was created by MTR default
--source include/shutdown_mysqld.inc

let $MYSQLD_LOG= $MYSQLTEST_VARDIR/log/upgrade_failure.log;

--echo # The upgrade should fail, because the 5.7 datadir we are upgrading from has KEYRING encrypted tables
--echo # The tables created in 5.7:
--echo #CREATE TABLE t1 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENCRYPTION='Y';
--echo #CREATE TABLE t2 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENCRYPTION='KEYRING';
--echo #CREATE TABLE t3 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENCRYPTION_KEY_ID=4;
--echo #CREATE TABLE t4 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENCRYPTION='N';

--error 1
--exec $MYSQLD_CMD --log-error=$MYSQLD_LOG --loose-skip-log-bin --skip-log-slave-updates --datadir=$MYSQLD_DATADIR1 --keyring_file_data=$MYSQL_TMP_DIR/data_57_crypt_v1/mysecret_keyring $KEYRING_PLUGIN_OPT $KEYRING_PLUGIN_EARLY_LOAD

--let ABORT_ON=NOT_FOUND
--let SEARCH_FILE=$MYSQLD_LOG
--let SEARCH_PATTERN=Upgrade is not possible as there are tables that are KERYING encrypted\. KEYRING encryption is still experimental feature in the version you are upgrading from\. To upgrade please decrypt the tables encrypted with KEYRING encryption\.
--source include/search_pattern_in_file.inc

--echo # Remove copied files
--remove_file $MYSQL_TMP_DIR/data_57_crypt_v1.zip
--force-rmdir $MYSQL_TMP_DIR/data_57_crypt_v1

let $MYSQLD_DATADIR2 = $MYSQL_TMP_DIR/data_57_crypt_v1_encryption_n/data;

--copy_file $MYSQLTEST_VARDIR/std_data/data_57_crypt_v1_encryption_n.zip $MYSQL_TMP_DIR/data_57_crypt_v1_encryption_n.zip

--echo # Check that the file exists in the working folder.
--file_exists $MYSQL_TMP_DIR/data_57_crypt_v1_encryption_n.zip

--echo # Unzip the zip file.
--exec unzip -qo $MYSQL_TMP_DIR/data_57_crypt_v1_encryption_n.zip -d $MYSQL_TMP_DIR

--echo # Start the 8.0.18 server on 5.7 datadir that contains tables with crypt_data v1 with ENCRYPTION='N'
--let $restart_parameters = "restart: --loose-skip-log-bin --skip-log-slave-updates --datadir=$MYSQLD_DATADIR2 --keyring_file_data=$MYSQL_TMP_DIR/data_57_crypt_v1_encryption_n/mysecret_keyring $KEYRING_PLUGIN_OPT $KEYRING_PLUGIN_EARLY_LOAD"
--replace_result $MYSQLD_DATADIR1 MYSQLD_DATADIR1 $MYSQL_TMP_DIR MYSQL_TMP_DIR $KEYRING_PLUGIN_OPT KEYRING_PLUGIN_OPT $KEYRING_PLUGIN_EARLY_LOAD KEYRING_PLUGIN_EARLY_LOAD
--source include/start_mysqld.inc

--echo #CREATE TABLE t1 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENCRYPTION='Y';
--echo #CREATE TABLE t2 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255)) ENCRYPTION='N';
--echo #CREATE TABLE t3 (id INT NOT NULL PRIMARY KEY, a VARCHAR(255));

--let $assert_text= There should be one table test/t2 with EXCLUDED=Y set.
--let $assert_cond= "[SELECT name FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE EXCLUDED=\\'Y\\']" = "test/t2"
--source include/assert.inc

SET GLOBAL innodb_encryption_threads = 4;
SET GLOBAL default_table_encryption=ONLINE_TO_KEYRING;

--let tables_count=`select count(*) from INFORMATION_SCHEMA.INNODB_TABLESPACES`
--echo # Wait max 10 min for key encryption threads to encrypt spaces
--let $wait_timeout= 600
# All tables should get encrypted. tables_count - 2 because temporary tablespace, t2 are not encrypted.
--let $wait_condition=SELECT COUNT(*) = $tables_count - 2 FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE MIN_KEY_VERSION = 1
--source include/wait_condition.inc

--let $assert_text= test/t1 key version 1 assigned
--let $assert_cond= "[SELECT MIN_KEY_VERSION FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE name=\\'test/t1\\']" = 1
--source include/assert.inc

--let $assert_text= test/t2 should still have EXCLUDED=Y set.
--let $assert_cond= "[SELECT name FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE EXCLUDED=\\'Y\\']" = "test/t2"
--source include/assert.inc

--let $assert_text= test/t3 should have key version 1 assigned
--let $assert_cond= "[SELECT MIN_KEY_VERSION FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE name=\\'test/t3\\']" = 1
--source include/assert.inc

SELECT COUNT(*) FROM t1;
SELECT COUNT(*) FROM t2;
SELECT COUNT(*) FROM t3;

--let $MYSQLD_DATADIR=`select @@datadir`

--source include/shutdown_mysqld.inc

--let t1_IBD = $MYSQLD_DATADIR/test/t1.ibd
--let t2_IBD = $MYSQLD_DATADIR/test/t2.ibd
--let t3_IBD = $MYSQLD_DATADIR/test/t3.ibd

--let SEARCH_PATTERN=foobar
--let ABORT_ON=FOUND
--let SEARCH_FILE=$t1_IBD
--source include/search_pattern_in_file.inc
--let SEARCH_PATTERN=foobar
--let ABORT_ON=NOT_FOUND
--let SEARCH_FILE=$t2_IBD
--source include/search_pattern_in_file.inc
--let SEARCH_PATTERN=foobar
--let ABORT_ON=FOUND
--let SEARCH_FILE=$t3_IBD
--source include/search_pattern_in_file.inc

# Check if server restarts correctly
--replace_result $MYSQLD_DATADIR1 MYSQLD_DATADIR1 $MYSQL_TMP_DIR MYSQL_TMP_DIR $KEYRING_PLUGIN_OPT KEYRING_PLUGIN_OPT $KEYRING_PLUGIN_EARLY_LOAD KEYRING_PLUGIN_EARLY_LOAD
--source include/start_mysqld.inc

SELECT COUNT(*) FROM t1;
SELECT COUNT(*) FROM t3;

--source include/shutdown_mysqld.inc

--echo # Remove copied files
--remove_file $MYSQL_TMP_DIR/data_57_crypt_v1_encryption_n.zip

--force-rmdir $MYSQL_TMP_DIR/data_57_crypt_v1_encryption_n

--echo # Restart the server with default options.
--let $restart_parameters=
--source include/start_mysqld.inc

SELECT 1;
