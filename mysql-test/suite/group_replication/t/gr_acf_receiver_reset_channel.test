###############################################################################
# Validate that when a failover is deleted, its status shared with the group is
# also deleted.
#
# Test:
#   0. This test requires three servers:
#        server1, server2: group
#        server3: single server
#   2. Configure and start a failover channel on server1 that
#      replicates from server3.
#   3. Validate server1 and server2 configuration.
#   4. Stop and delete channel 'ch1' on server1 and server2.
#   5. Validate server1 and server2 configuration.
#   6. Add server3 to the group.
#   7. Clean up.
###############################################################################
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 4
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Deploy a group in single-primary mode on server1 and server2.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc
--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_4 SERVER_4_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=0, SOURCE_PORT=$SERVER_MYPORT_4, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1 FOR CHANNEL 'ch1'

--source include/start_group_replication.inc
--source include/gr_assert_secondary_member.inc


--echo
--echo ############################################################
--echo # 2. Configure and start a failover channel on server1 that
--echo #    replicates from server4.
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--let $server4_uuid= `SELECT @@server_uuid`

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_4 SERVER_4_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_4, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1 FOR CHANNEL 'ch1'

--replace_result $SERVER_MYPORT_4 SERVER_MYPORT_4
--eval SELECT asynchronous_connection_failover_add_source('ch1', '127.0.0.1', $SERVER_MYPORT_4, '', 50);

--let $rpl_channel_name='ch1'
--source include/start_slave.inc


--echo
--echo ############################################################
--echo # 3. Validate server1 and server2 configuration.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= 'There is 1 row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'The version of replication_asynchronous_connection_failover must be 1'
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_asynchronous_connection_failover\', version, 1] = 1
--source include/assert.inc

--let $assert_text= 'SOURCE_CONNECTION_AUTO_FAILOVER must be enabled on ch1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME="ch1" AND SOURCE_CONNECTION_AUTO_FAILOVER=1, count, 1] = 1
--source include/assert.inc

--let $assert_text= Verify channel ch1 IO_THREAD is ON and connected to server4
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name=\'ch1\' AND source_uuid=\'$server4_uuid\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $assert_text= Verify channel ch1 SQL_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch1\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $assert_text= Verify replica_monitor thread is running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 1;
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_asynchronous_connection_failover
--source include/wait_condition.inc

--let $assert_text= 'The version of replication_asynchronous_connection_failover must be 1'
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_asynchronous_connection_failover\', version, 1] = 1
--source include/assert.inc

--let $assert_text= 'SOURCE_CONNECTION_AUTO_FAILOVER must be enabled on ch1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME="ch1" AND SOURCE_CONNECTION_AUTO_FAILOVER=1, count, 1] = 1
--source include/assert.inc

--let $assert_text= Verify channel ch1 IO_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name=\'ch1\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc

--let $assert_text= Verify channel ch1 SQL_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch1\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc

--let $assert_text= Verify replica_monitor thread is not running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 0;
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Stop and delete channel 'ch1' on server1 and server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $rpl_channel_name='ch1'
--let $rpl_multi_source= 1
--let $rpl_reset_slave_all= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_multi_source=

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $rpl_channel_name='ch1'
--source include/stop_slave.inc

--let $rpl_channel_name='ch1'
--let $rpl_multi_source= 1
--let $rpl_reset_slave_all= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_multi_source=

--replace_result $SERVER_MYPORT_4 SERVER_MYPORT_4
--eval SELECT asynchronous_connection_failover_delete_source('ch1', '127.0.0.1', $SERVER_MYPORT_4, '');


--echo
--echo ############################################################
--echo # 5. Validate server1 and server2 configuration.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= 'There are 0 rows in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 0
--source include/assert.inc

--let $assert_text= 'The version of replication_asynchronous_connection_failover must be 2'
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_asynchronous_connection_failover\', version, 1] = 2
--source include/assert.inc

--let $assert_text= 'Verify ch1 was deleted'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME="ch1", count, 1] = 0
--source include/assert.inc

--let $assert_text= Verify replica_monitor thread is not running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 0;
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=0 FROM performance_schema.replication_asynchronous_connection_failover
--source include/wait_condition.inc

--let $assert_text= 'The version of replication_asynchronous_connection_failover must be 2'
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_asynchronous_connection_failover\', version, 1] = 2
--source include/assert.inc

--let $assert_text= 'Verify ch1 was deleted'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME="ch1", count, 1] = 0
--source include/assert.inc

--let $assert_text= Verify replica_monitor thread is not running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 0;
--source include/assert.inc


--echo
--echo ############################################################
--echo # 6. Add server3 to the group.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--source include/gr_assert_secondary_member.inc

--let $assert_text= 'There are 0 rows in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 0
--source include/assert.inc

--let $assert_text= 'The version of replication_asynchronous_connection_failover must be 2'
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_asynchronous_connection_failover\', version, 1] = 2
--source include/assert.inc

--let $assert_text= 'Verify ch1 does noet exist'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME="ch1", count, 1] = 0
--source include/assert.inc

--let $assert_text= Verify replica_monitor thread is not running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 0;
--source include/assert.inc


--echo
--echo ############################################################
--echo # 7. Clean up.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--source include/group_replication_end.inc
