###############################################################################
# Validate that member action `mysql_start_failover_channels_if_primary` is
# triggered on group bootstrap when enabled, and member will change to ERROR
# state when there are errors on the channels start.
#
# Test:
#   0. This test requires two servers.
#   1. Configure server2 to be a asynchronous replica of server1,
#      configuring a failover channel to server1.
#   2. Bootstrap a group on server2.
#      Since `mysql_start_failover_channels_if_primary` member
#      action is enabled, once server2 becomes the primary it
#      will start 'ch1'. Though we are injecting a failure on
#      channel start, thence the member will change to ERROR
#      state.
#   3. Clean up.
###############################################################################
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc


--echo ############################################################
--echo # 1. Configure server2 to be a asynchronous replica of server1,
--echo #    configuring a failover channel to server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_uuid= `SELECT @@server_uuid`

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1
--eval SELECT asynchronous_connection_failover_add_source('ch1', '127.0.0.1', $SERVER_MYPORT_1, '', 50);

--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1 FOR CHANNEL 'ch1'


--echo
--echo ############################################################
--echo # 2. Bootstrap a group on server2.
--echo #    Since `mysql_start_failover_channels_if_primary` member
--echo #    action is enabled, once server2 becomes the primary it
--echo #    will start 'ch1'. Though we are injecting a failure on
--echo #    channel start, thence the member will change to ERROR
--echo #    state.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The member action \"mysql_start_failover_channels_if_primary\" for event \"AFTER_PRIMARY_ELECTION\" with priority \"10\" failed. Please check previous messages in the error log for hints about what could have caused this failure.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Error while sending message. Context: primary election process.");
SET SESSION sql_log_bin = 1;

--let $assert_text= The action mysql_start_failover_channels_if_primary must be enabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_start_failover_channels_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 1
--source include/assert.inc

SET @@GLOBAL.DEBUG='+d,force_error_on_start_failover_channels';

--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
--source include/gr_set_bootstrap_group.inc

START GROUP_REPLICATION;

--let $group_replication_member_state = ERROR
--source include/gr_wait_for_member_state.inc

--source include/gr_clear_bootstrap_group.inc
SET @@GLOBAL.DEBUG='-d,force_error_on_start_failover_channels';

--let $assert_text= The super_read_only mode must be 1
--let $assert_cond= "[SELECT @@GLOBAL.super_read_only]" = 1;
--source include/assert.inc

--let $assert_text= The read_only mode must be 1
--let $assert_cond= "[SELECT @@GLOBAL.read_only]" = 1;
--source include/assert.inc

--let $assert_text= Verify channel ch1 IO_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name=\'ch1\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc

--let $assert_text= Verify channel ch1 SQL_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name=\'ch1\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc

--let $assert_text= Verify replica_monitor thread is not running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 0;
--source include/assert.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_start_failover_channels_error_on_bootstrap
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_select= The member action "mysql_start_failover_channels_if_primary" for event "AFTER_PRIMARY_ELECTION" with priority "10" failed. Please check previous messages in the error log for hints about what could have caused this failure.
--let $assert_count= 1
--let $assert_text= The member action "mysql_start_failover_channels_if_primary" for event "AFTER_PRIMARY_ELECTION" with priority "10" failed.
--source include/assert_grep.inc


--echo ############################################################
--echo # 3. Clean up.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_channel_name= 'ch1'
--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--source include/group_replication_end.inc
