################################################################################
# When using the MySQL communication stack, if we start two mysqls in the same
# physical server and we misconfigure them by provinding the same local_address
# to both, START GROUP_REPLICATION must fail with an appropriate ERROR.
# This can only happen with the MySQL communication stack, because if we use
# XCom, we will observe an error when we try to bind to the same address.
#
#
# Test:
# 0. The test requires two servers: M1 and M2 and can only run with MySQL stack
# 1. Skip the group start
# 2. Start and bootstrap the group with server 1
# 3. Change server 2 group_replication_local_address to be the same as server 1
# 4. Manually start server 2 and expect it to fail while joining the group
# 5. Restore server 2 original address
# 6. Server 2 must successfully join the group
# 7. Clean up.
#
################################################################################

--source include/have_group_replication_mysql_communication_stack.inc
--source include/have_group_replication_plugin.inc

--echo # 1. Skip the group start
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo # 2. Start and bootstrap the group with server 1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

--let $server_1_local_address= `SELECT @@GLOBAL.group_replication_local_address`

--echo # 3. Change server 2 group_replication_local_address to be the same as
--echo #    server 1
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

# Adding suppressions
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("\\[GCS\\] Error connecting to all peers. Member join failed. Local port:*");
call mtr.add_suppression("\\[GCS\\] The member was unable to join the group.*");
call mtr.add_suppression("Timeout on wait for view after joining group");
SET SESSION sql_log_bin= 1;

SET @local_address_save= @@GLOBAL.group_replication_local_address;
--replace_result $server_1_local_address GROUP_REPLICATION_SERVER_1_ADDRESS
--eval SET GLOBAL group_replication_local_address= "$server_1_local_address"

--echo # 4. Manually start server 2 and expect it to fail while joining the
--echo #    group

--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"

--error ER_GROUP_REPLICATION_CONFIGURATION
START GROUP_REPLICATION;

--echo # 5. Restore server 2 original address
SET @@GLOBAL.group_replication_local_address= @local_address_save;

--echo # 6. Server 2 must successfully join the group
--source include/start_group_replication.inc

--echo # 7. Clean up.

# This is the end... My only friend the end!
--source include/group_replication_end.inc
