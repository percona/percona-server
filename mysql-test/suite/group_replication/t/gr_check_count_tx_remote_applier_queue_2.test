################################################################################
# Validate that COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE is updated when
# members in RECOVERING state progress from group_replication_recovery catch-up
# to the catch-up of transactions queued into group_replication_applier channel.
#
# Scenario:
# 0. This test requires 2 servers.
# 1. Bootstrap group on server1.
# 2. Join server2 to the group, it will block on recovery,
#    during the catchup of transactions queued into
#    group_replication_applier channel.
# 3. Commit 2 transactions on server1 while server2 is in recovery.
# 4. Verify the values of performance_schema.replication_group_member_stats
#    while server2 is in RECOVERING state.
#    More precisely, server2 did applied all data from
#    group_replication_recovery channel, but it is still applying the data
#    queued on group_replication_applier (which is blocked by the locked table t1).
# 5. Unblock recovery on server2.
# 6. Verify the values of performance_schema.replication_group_member_stats
#    once server2 is ONLINE.
# 7. Clean up.
################################################################################
--source include/have_debug_sync.inc
# Sequential applier blocks on a different place due to the LOCK TABLE,
# which will cause a different value on COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE.
--source include/only_mts_replica_parallel_workers.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Bootstrap group on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_uuid= `SELECT @@server_uuid`

SET SESSION sql_log_bin=0;
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY);
SET SESSION sql_log_bin=1;

--source include/start_and_bootstrap_group_replication.inc


--echo
--echo ############################################################
--echo # 2. Join server2 to the group, it will block on recovery,
--echo #    during the catchup of transactions queued into
--echo #    group_replication_applier channel.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--let $server2_uuid= `SELECT @@server_uuid`

SET SESSION sql_log_bin=0;
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY);
SET SESSION sql_log_bin=1;

# Block the transactions that will be queued to group_replication_applier channel.
LOCK TABLE test.t1 READ;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,recovery_thread_wait_before_wait_for_applier_module_recovery';

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

# Wait until group_replication_recovery is consumed and plugin starts
# the catch-up of group_replication_applier channel.
SET DEBUG_SYNC = "now WAIT_FOR signal.recovery_thread_wait_before_wait_for_applier_module_recovery";

--let $assert_text= Verify MEMBER_STATE is RECOVERING
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members WHERE MEMBER_ID=\'$server2_uuid\', MEMBER_STATE, 1]" = "RECOVERING"
--source include/assert.inc


--echo
--echo ############################################################
--echo # 3. Commit 2 transactions on server1 while server2 is in recovery.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
INSERT INTO test.t1 VALUES (1);
INSERT INTO test.t1 VALUES (2);


--echo
--echo ############################################################
--echo # 4. Verify the values of performance_schema.replication_group_member_stats
--echo #    while server2 is in RECOVERING state.
--echo #    More precisely, server2 did applied all data from
--echo #    group_replication_recovery channel, but it is still applying the data
--echo #    queued on group_replication_applier (which is blocked by the locked table t1).
# server1 and 2
# COUNT_TRANSACTIONS_IN_QUEUE 0
# COUNT_TRANSACTIONS_CHECKED 2
# COUNT_CONFLICTS_DETECTED 0
# COUNT_TRANSACTIONS_LOCAL_ROLLBACK 0
#
# server1
# COUNT_TRANSACTIONS_LOCAL_PROPOSED 2
# COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE 0
# COUNT_TRANSACTIONS_REMOTE_APPLIED 2
#
# server2
# COUNT_TRANSACTIONS_LOCAL_PROPOSED 0
# COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE 3
# COUNT_TRANSACTIONS_REMOTE_APPLIED 0

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $assert_text= Verify MEMBER_STATE is RECOVERING
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members WHERE MEMBER_ID=\'$server2_uuid\', MEMBER_STATE, 1]" = "RECOVERING"
--source include/assert.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server2_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=3 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=0 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=0
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server1_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=0 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=2 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=2
--source include/wait_condition.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server2_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=3 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=0 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=0
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server1_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=0 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=2 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=2
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 5. Unblock recovery on server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '-d,recovery_thread_wait_before_wait_for_applier_module_recovery';
SET DEBUG_SYNC= "now SIGNAL signal.recovery_thread_resume_before_wait_for_applier_module_recovery";

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
UNLOCK TABLES;

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc


--echo
--echo ############################################################
--echo # 6. Verify the values of performance_schema.replication_group_member_stats
--echo #    once server2 is ONLINE.
# server1 and 2
# COUNT_TRANSACTIONS_IN_QUEUE 0
# COUNT_TRANSACTIONS_CHECKED 2
# COUNT_CONFLICTS_DETECTED 0
# COUNT_TRANSACTIONS_LOCAL_ROLLBACK 0
# COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE 0
# COUNT_TRANSACTIONS_REMOTE_APPLIED 2
#
# server1
# COUNT_TRANSACTIONS_LOCAL_PROPOSED 2
#
# server2
# COUNT_TRANSACTIONS_LOCAL_PROPOSED 0

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server2_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=0 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=2 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=0
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server1_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=0 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=2 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=2
--source include/wait_condition.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server2_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=0 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=2 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=0
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$server1_uuid' AND COUNT_TRANSACTIONS_IN_QUEUE=0 AND COUNT_TRANSACTIONS_CHECKED=2 AND COUNT_CONFLICTS_DETECTED=0 AND COUNT_TRANSACTIONS_LOCAL_ROLLBACK=0 AND COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE=0 AND COUNT_TRANSACTIONS_REMOTE_APPLIED=2 AND COUNT_TRANSACTIONS_LOCAL_PROPOSED=2
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 7. Clean up.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET DEBUG_SYNC= 'RESET';

DROP TABLE test.t1;
--source include/group_replication_end.inc
