## Test case to verify immediate_commit_timestamp is correct on all servers.
#
## SETUP
#
# S4 -> (S1 - S2) -> S3
# i.e. S4 is SOURCE FOR S1
# S1 and S2 are GR members
# S1 is SOURCE FOR S3
# Transactions from S1 and S4 are tested.
#
## Test:
#
# 0. The test requires 4 servers
# 1. Start GR on S1 & S2
# 2. Add some data to S1 and S4
# 3. Create and start new channel ch1_3: S3(REPLICA), S1(SOURCE)
# 4. Assert IMMEDIATE_COMMIT_TIMESTAMP is correct on S2 and S3.
#    On S1 transaction `CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB`
#    is committed through a client session, as such it is not queued on
#    S1 `group_replication_applier` relay log.
# 5. Run a transaction while complete setup is ON.
# 6. Assert IMMEDIATE_COMMIT_TIMESTAMP is correct on S1 and S3.
#    On S2 transaction `INSERT INTO test.t1 values (1)`
#    is committed through a client session, as such it is not queued on
#    S2 `group_replication_applier` relay log.
# 7. Create and start new channel ch4_1: server1(REPLICA), server4(SOURCE)
#    Existing transactions will be replicated.
# 8. Assert IMMEDIATE_COMMIT_TIMESTAMP is correct on S2 and S3.
#    On S1 transaction `CREATE TABLE test.t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB`
#    is committed through channel `ch4_1`, as such it is not queued on
#    S1 `group_replication_applier` relay log.
# 9. Clean Up
#

--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 4
--source include/group_replication.inc

--echo ############################################################
--echo # 1. Start GR on S1 & S2

# Boostrap start GR on server1 (Primary)
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

# Start GR on server2 (Secondary)
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--echo ############################################################
--echo # 2. Add some data to S1 and S4

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/rpl_sync.inc

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

CREATE TABLE test.t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;

--echo ############################################################
--echo # 3. Create and start new channel ch1_3: S3(REPLICA), S1(SOURCE)

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='localhost', SOURCE_USER='root', SOURCE_PORT=$SERVER_MYPORT_1 for channel 'ch1_3'

--let $rpl_channel_name='ch1_3'
--source include/start_slave.inc
--let $rpl_channel_name=

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $rpl_channel_name='ch1_3'
--let $sync_slave_connection=server3
--source include/sync_slave_sql_with_master.inc
--let $rpl_channel_name=

--echo ############################################################
--echo # 4. Assert IMMEDIATE_COMMIT_TIMESTAMP is correct on S2 and S3.
--echo #    On S1 transaction `CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB`
--echo #    is committed through a client session, as such it is not queued on
--echo #    S1 `group_replication_applier` relay log.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is not 0.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="group_replication_applier" AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) > 0 AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP) > 0, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP = LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="group_replication_applier" AND (UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) - UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP)) = 0, count, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is not 0.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="ch1_3" AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) > 0 AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP) > 0, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is greater then LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="ch1_3" AND (UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) - UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP)) > 0, count, 1] = 1
--source include/assert.inc

--echo ############################################################
--echo # 5. Run a transaction while complete setup is ON.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

INSERT INTO test.t1 values (1);
--source include/rpl_sync.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $rpl_channel_name='ch1_3'
--let $sync_slave_connection=server3
--source include/sync_slave_sql_with_master.inc
--let $rpl_channel_name=

--echo ############################################################
--echo # 6. Assert IMMEDIATE_COMMIT_TIMESTAMP is correct on S1 and S3.
--echo #    On S2 transaction `INSERT INTO test.t1 values (1)`
--echo #    is committed through a client session, as such it is not queued on
--echo #    S2 `group_replication_applier` relay log.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is not 0.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="group_replication_applier" AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) > 0 AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP) > 0, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP = LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="group_replication_applier" AND (UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) - UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP)) = 0, count, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is not 0.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="ch1_3" AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) > 0 AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP) > 0, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is greater then LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="ch1_3" AND (UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) - UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP)) >= 0, count, 1] = 1
--source include/assert.inc

--echo ############################################################
--echo # 7. Create and start new channel ch4_1: server1(REPLICA), server4(SOURCE)
--echo #    Existing transactions will be replicated.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $SERVER_MYPORT_4 SERVER_4_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='localhost', SOURCE_USER='root', SOURCE_PORT=$SERVER_MYPORT_4 for channel 'ch4_1'

--let $rpl_channel_name='ch4_1'
--source include/start_slave.inc
--let $rpl_channel_name=

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

--let $rpl_channel_name='ch4_1'
--let $sync_slave_connection=server1
--source include/sync_slave_sql_with_master.inc
--let $rpl_channel_name=

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $rpl_channel_name='ch1_3'
--let $sync_slave_connection=server3
--source include/sync_slave_sql_with_master.inc
--let $rpl_channel_name=

--echo ############################################################
--echo # 8. Assert IMMEDIATE_COMMIT_TIMESTAMP is correct on S2 and S3.
--echo #    On S1 transaction `CREATE TABLE test.t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB`
--echo #    is committed through channel `ch4_1`, as such it is not queued on
--echo #    S1 `group_replication_applier` relay log.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is not 0.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="group_replication_applier" AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) > 0 AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP) > 0, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is greater then LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="group_replication_applier" AND (UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) - UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP)) > 0, count, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is not 0.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="ch1_3" AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) > 0 AND UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP) > 0, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP is greater then LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM performance_schema.replication_connection_status WHERE CHANNEL_NAME="ch1_3" AND (UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP) - UNIX_TIMESTAMP(LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP)) > 0, count, 1] = 1
--source include/assert.inc


--echo ############################################################
--echo # 9. Clean Up

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
STOP REPLICA FOR CHANNEL 'ch1_3';
RESET REPLICA ALL FOR CHANNEL 'ch1_3';

DROP TABLE test.t1;
DROP TABLE test.t2;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP TABLE test.t1;
DROP TABLE test.t2;
STOP REPLICA FOR CHANNEL 'ch4_1';
RESET REPLICA ALL FOR CHANNEL 'ch4_1';

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

DROP TABLE test.t2;

--source include/group_replication_end.inc
