###############################################################################
# Validate several error scenarios on the UDFs:
#   group_replication_enable_member_action
#   group_replication_disable_member_action
#   group_replication_reset_member_actions
#
# Test:
#   0. This test requires two servers
#   1. Inject a error while storing the configuration during
#      the UDFs
#        group_replication_enable_member_action;
#        group_replication_disable_member_action.
#      server that is not member of a group will throw ER_UDF_ERROR.
#   2. Inject a error while storing the configuration during
#      the UDFs
#        group_replication_enable_member_action;
#        group_replication_disable_member_action.
#      server that is a member of a group will throw ER_UDF_ERROR.
#   3. Inject a error while storing the configuration on a
#      secondary. The configuration is propagated from the
#      primary.
#      The secondary will move into ERROR state and follow the
#      --group_replication_exit_state_action option.
#   4. Inject a error while propagate the configuration from
#      the primary.
#      Propagation will fail but the configuration will be
#      stored on the primary.
#   5. UDFs can be executed multiple times, which will resend
#      the configuration.
#   6. Inject a error while resetting the configuration.
#   7. Clean up
###############################################################################
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Unable to update the member actions configuration with the one sent by the primary. Please check the tables 'mysql.replication_group_member_actions' and 'mysql.replication_group_configuration_version'.");
call mtr.add_suppression("A message sent through the Group Replication message deliver service was not delivered successfully. The server will now leave the group.*");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin = 1;


--echo
--echo ############################################################
--echo # 1. Inject a error while storing the configuration during
--echo #    the UDFs
--echo #      group_replication_enable_member_action;
--echo #      group_replication_disable_member_action.
--echo #    server that is not member of a group will throw ER_UDF_ERROR.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG='+d,force_error_on_configuration_table_close';

--error ER_GRP_RPL_UDF_ERROR
SELECT group_replication_enable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

--error ER_GRP_RPL_UDF_ERROR
SELECT group_replication_disable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

SET @@GLOBAL.DEBUG='-d,force_error_on_configuration_table_close';

--let $assert_text= The version of replication_group_member_actions must be 1
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # 2. Inject a error while storing the configuration during
--echo #    the UDFs
--echo #      group_replication_enable_member_action;
--echo #      group_replication_disable_member_action.
--echo #    server that is a member of a group will throw ER_UDF_ERROR.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG='+d,force_error_on_configuration_table_close';

--error ER_GRP_RPL_UDF_ERROR
SELECT group_replication_enable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

--error ER_GRP_RPL_UDF_ERROR
SELECT group_replication_disable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

SET @@GLOBAL.DEBUG='-d,force_error_on_configuration_table_close';

--let $assert_text= The version of replication_group_member_actions must be 1
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $assert_text= The version of replication_group_member_actions must be 1
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # 3. Inject a error while storing the configuration on a
--echo #    secondary. The configuration is propagated from the
--echo #    primary.
--echo #    The secondary will move into ERROR state and follow the
--echo #    --group_replication_exit_state_action option.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG='+d,force_error_on_configuration_table_close';

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SELECT group_replication_disable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

--let $assert_text= The version of replication_group_member_actions must be 2
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 2
--source include/assert.inc

--let $assert_text= The action mysql_disable_super_read_only_if_primary must be disabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 0
--source include/assert.inc

--let $group_replication_number_of_members= 1
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

SET @@GLOBAL.DEBUG='-d,force_error_on_configuration_table_close';

--let $assert_only_after = CURRENT_TEST: group_replication.gr_member_actions_enable_disable_errors_2
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_select= Unable to update the member actions configuration with the one sent by the primary.
--let $assert_count= 1
--let $assert_text= Unable to update the member actions configuration with the one sent by the primary.
--source include/assert_grep.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_member_actions_enable_disable_errors_2
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_select= A message sent through the Group Replication message deliver service was not delivered successfully. The server will now leave the group.
--let $assert_count= 1
--let $assert_text= Member left the group due to the error while storing the configuration
--source include/assert_grep.inc

--source include/stop_group_replication.inc

--let $assert_text= The version of replication_group_member_actions must be 1
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 1
--source include/assert.inc

--let $assert_text= The action mysql_disable_super_read_only_if_primary must be enabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 1
--source include/assert.inc

# Rejoin server2 to the group, the configuration will be updated
# during the join.
--source include/start_group_replication.inc

--let $assert_text= The version of replication_group_member_actions must be 2
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 2
--source include/assert.inc

--let $assert_text= The action mysql_disable_super_read_only_if_primary must be disabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 0
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Inject a error while propagate the configuration from
--echo #    the primary.
--echo #    Propagation will fail but the configuration will be
--echo #    stored on the primary.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG='+d,group_replication_force_error_on_member_actions_propagation';

--error ER_GRP_RPL_UDF_ERROR
SELECT group_replication_enable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

SET @@GLOBAL.DEBUG='-d,group_replication_force_error_on_member_actions_propagation';

--let $assert_text= The version of replication_group_member_actions must be 3
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 3
--source include/assert.inc

--let $assert_text= The action mysql_disable_super_read_only_if_primary must be enabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $assert_text= The version of replication_group_member_actions must be 2
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 2
--source include/assert.inc

--let $assert_text= The action mysql_disable_super_read_only_if_primary must be disabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 0
--source include/assert.inc


--echo
--echo ############################################################
--echo # 5. UDFs can be executed multiple times, which will resend
--echo #    the configuration.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SELECT group_replication_enable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

--let $assert_text= The version of replication_group_member_actions must be 4
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 4
--source include/assert.inc

--let $assert_text= The action mysql_disable_super_read_only_if_primary must be enabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_configuration_version WHERE name="replication_group_member_actions" AND version=4;
--source include/wait_condition.inc

--let $assert_text= The action mysql_disable_super_read_only_if_primary must be enabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # 6. Inject a error while resetting the configuration.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

SET @@GLOBAL.DEBUG='+d,force_error_on_configuration_table_close';

--error ER_GRP_RPL_UDF_ERROR
SELECT group_replication_reset_member_actions();

SET @@GLOBAL.DEBUG='-d,force_error_on_configuration_table_close';

--let $assert_text= The version of replication_group_member_actions must be 4
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 4
--source include/assert.inc


--let $assert_text= The action mysql_disable_super_read_only_if_primary must be enabled
--let $assert_cond= [SELECT enabled FROM performance_schema.replication_group_member_actions WHERE name=\'mysql_disable_super_read_only_if_primary\' AND event=\'AFTER_PRIMARY_ELECTION\', enabled, 1] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # 7. Clean up.
--source include/group_replication_end.inc
