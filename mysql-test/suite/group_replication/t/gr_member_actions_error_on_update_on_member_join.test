###############################################################################
# Validate the behavior of member join when it is not able to updates the local
# member actions configuration with the one from the group.
#
# Test:
#   0. This test requires two servers
#   1. Bootstrap a group and increase the member actions
#      configuration version.
#   2. Inject a failure on configuration update on member join.
#      The member will not be able to join.
#   3. Rejoin the group without the failure injection.
#   4. Clean up
###############################################################################
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Unable to update the member actions configuration on member join. Please check the tables 'mysql.replication_group_member_actions' and 'mysql.replication_group_configuration_version'.");
SET SESSION sql_log_bin = 1;


--echo
--echo ############################################################
--echo # 1. Bootstrap a group and increase the member actions
--echo #    configuration version.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

SELECT group_replication_disable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");
SELECT group_replication_enable_member_action("mysql_disable_super_read_only_if_primary", "AFTER_PRIMARY_ELECTION");

--let $assert_text= The version of replication_group_member_actions must be 3
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 3
--source include/assert.inc


--echo
--echo ############################################################
--echo # 2. Inject a failure on configuration update on member join.
--echo #    The member will not be able to join.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG='+d,force_error_on_configuration_table_close';

--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"

--error ER_GROUP_REPLICATION_CONFIGURATION
START GROUP_REPLICATION;

SET @@GLOBAL.DEBUG='-d,force_error_on_configuration_table_close';

--let $assert_only_after = CURRENT_TEST: group_replication.gr_member_actions_error_on_update_on_member_join
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_select= Unable to update the member actions configuration on member join. Please check the tables 'mysql.replication_group_member_actions' and 'mysql.replication_group_configuration_version'.
--let $assert_count= 1
--let $assert_text= Unable to update the member actions configuration during join
--source include/assert_grep.inc

--let $assert_text= The version of replication_group_member_actions must be 1
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # 3. Rejoin the group without the failure injection.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $assert_text= The version of replication_group_member_actions must be 3
--let $assert_cond= [SELECT version FROM performance_schema.replication_group_configuration_version WHERE name=\'replication_group_member_actions\', version, 1] = 3
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Clean up.
--source include/group_replication_end.inc
