###############################################################################
# This test verifies that clone uses credentials passed in START GR command.
#
# 0. The test requires two servers: M1 and M2.
# 1. Install clone plugin on server1.
# 2. Bootstrap server1 and add some data
# 3. Restart server 2 with a monitoring process (mysqld_safe) if needed
# 4. Set server 2 parameters to restart post cloning.
#    Set group_replication_start_on_boot to off.
#    Since CHANGE MASTER is not executed.
# 5. Start GR by passing credentials in command.
# 6. Confirm clone is completed and data is present.
#    Execute START GROUP_REPLICATION to join group.
#    Confirm server 2 is ONLINE.
# 7. Cleanup
###############################################################################

--source include/have_group_replication_xcom_communication_stack.inc
--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--echo
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

--let $recovery_user= recovery_user
--let $recovery_password= recovery_password
--eval CREATE USER "$recovery_user" IDENTIFIED BY "$recovery_password"
--eval GRANT REPLICATION SLAVE ON *.* TO "$recovery_user"
--eval GRANT BACKUP_ADMIN ON *.* TO "$recovery_user"

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo # 3. Restart server 2 with a monitoring process (mysqld_safe) if needed

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

RESET SLAVE ALL FOR CHANNEL 'group_replication_recovery';

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $_group_replication_comm_stack= `SELECT @@GLOBAL.group_replication_communication_stack`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo
--echo # 4. Set server 2 parameters to restart post cloning.
--echo #    Set group_replication_start_on_boot to off.
--echo #    Since CHANGE MASTER is not executed.

--disable_query_log
--eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST group_replication_group_seeds= "$_group_replication_group_seeds"
--eval SET PERSIST group_replication_communication_stack= "$_group_replication_comm_stack"

SET PERSIST group_replication_start_on_boot= OFF;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'
--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET GLOBAL group_replication_clone_threshold= 1;

--echo
--echo # 5. Start GR by passing credentials in command.

--eval START GROUP_REPLICATION USER='$recovery_user' , PASSWORD='$recovery_password';

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo
--echo # 6. Confirm clone is completed and data is present.
--echo #    Execute START GROUP_REPLICATION to join group.
--echo #    Confirm server 2 is ONLINE.

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1 ,server2:test.t1
--source include/diff_tables.inc

--eval START GROUP_REPLICATION USER='$recovery_user' , PASSWORD='$recovery_password';

--let $group_replication_member_state = ONLINE
--source include/gr_wait_for_member_state.inc

--echo
--echo # 7. Cleanup

--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

RESET PERSIST group_replication_group_name;
RESET PERSIST group_replication_local_address;
RESET PERSIST group_replication_group_seeds;
RESET PERSIST group_replication_start_on_boot;
RESET PERSIST group_replication_communication_stack;
CHANGE REPLICATION SOURCE TO SOURCE_USER='root' FOR CHANNEL 'group_replication_recovery';

DROP TABLE t1;
--eval DROP USER "$recovery_user"

--source include/rpl_sync.inc

--source include/clean_monitoring_process.inc
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("This member will start distributed recovery using clone. It is due to the number of missing transactions being higher than the configured threshold of 1.");
call mtr.add_suppression("Clone removing all user data for provisioning: *");
SET SESSION sql_log_bin = 1;

--source include/group_replication_end.inc
