################################################################################
# This test verifies that after a unsuccessful START GROUP_REPLICATION, due to
# timeout on enable super_read_only, once the blocker of enable super_read_only
# is over, START GROUP_REPLICATION does succeed.
#
# Test:
# 0. The test requires two servers: server1 and server2.
# 1. Deploy a single-primary group, where server1 is the primary.
# 2. Stop GR on server2.
#    Lock table t1 for writes on server2, that will make
#    START GROUP_REPLICATION to timeout to enable super_read_only.
# 3. Unlock table t1 for writes on server2, START GROUP_REPLICATION
#    will succeed, since server2 is a secondary we can assert that
#    super_read_only is enabled after join the group.
# 4. Clean up.
################################################################################
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_group_replication_single_primary_mode =1
--let $rpl_skip_group_replication_start = 1
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Deploy a single-primary group, where server1 is the primary.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT PRIMARY KEY);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc


--echo
--echo ############################################################
--echo # 2. Stop GR on server2.
--echo #    Lock table t1 for writes on server2, that will make
--echo #    START GROUP_REPLICATION to timeout to enable super_read_only.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
LOCK TABLE t1 WRITE;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--error ER_GROUP_REPLICATION_CONFIGURATION
START GROUP_REPLICATION;

--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_select= Could not enable the server read only mode and guarantee a safe recovery execution
--let $assert_text= The error to enable super_read_only was logged
--let $assert_count= 1
--source include/assert_grep.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Could not enable the server read only mode and guarantee a safe recovery execution");
SET SESSION sql_log_bin = 1;


--echo
--echo ############################################################
--echo # 3. Unlock table t1 for writes on server2, START GROUP_REPLICATION
--echo #    will succeed, since server2 is a secondary we can assert that
--echo #    super_read_only is enabled after join the group.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
UNLOCK TABLES;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $assert_text= The super_read_only mode must be enabled
--let $assert_cond= "[SELECT @@GLOBAL.super_read_only]" = 1;
--source include/assert.inc

--let $assert_text= The read_only mode must be enabled
--let $assert_cond= "[SELECT @@GLOBAL.read_only]" = 1;
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Clean up.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;

--source include/group_replication_end.inc
