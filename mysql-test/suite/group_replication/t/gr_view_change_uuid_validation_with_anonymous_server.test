################################################################################
#
# This test checks that the replica parameter ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS works as
# expected and throws the expected errors while replicating into a Group replication member server
# having the same view_change_uuid as the assign_gtids_to_anonymous_transactions_value
#
# Test:
#  0. This test works with 2 servers in multi primary mode and a third server
#     replicating into to the group trough async replication
#  1. Setup Group Replication on server 1 and 2 with view
#     change uuid configured with an valid uuid
#  2. Disable GTIDs on server 3
#  3. Setup a asynchronous replication connection from
#     server 3 into the group (server 1)
#  3.1 Verify that change replication source gives error
#      when tried to pass view_change_uuid to
#      ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
#  3.2 Enable asynchronous replication connection
#      with custom uuid
#  3.3 Stop GR on server 1 and verify that setting
#      view_change_uuid to the UUID value used for
#      ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
#      gives error
#  3.4 Verify that restarting server 1 using the
#      same view_change_uuid group name as the UUID
#      value for ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
#      logs an error for Group Replication and an
#      warning for replication initialization
#  3.5 Verify that on replica start we get error related to
#      the UUID value for ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
#      being same as the view_change_uuid
#  4. Fix the configuration by assigning the view_change_uuid of
#     group
#  5. Execute some transactions on server 3 and sync with server 1
#  6. Execute a transaction on the group and sync
#  7. GTID_EXECUTED on server 1 must contain transactions
#     from server 3, from group and view changes
#  8. GTID_EXECUTED on server 2 must contain the transactions
#     from server 3.
#     Validate data on server 2.
#  9. Cleanup
#
################################################################################

--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo ############################################################
--echo #  1. Setup Group Replication on server 1 and 2 with view
--echo #     change uuid configured with an valid uuid

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $view_change_uuid_save = `SELECT @@GLOBAL.group_replication_view_change_uuid`
--let $view_change_uuid = aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa

--eval SET GLOBAL group_replication_view_change_uuid = "$view_change_uuid"

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--eval SET GLOBAL group_replication_view_change_uuid = "$view_change_uuid"

--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo #  2. Disable GTIDs on server 3

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $rpl_gtid_mode= OFF
--let $rpl_server_numbers= 3
--source include/rpl_set_gtid_mode.inc

--echo
--echo ############################################################
--echo #  3. Setup a asynchronous replication connection from
--echo #     server 3 into the group (server 1)

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $source_uuid = aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab

--echo #
--echo #  3.1 Verify that change replication source gives error
--echo #      when tried to pass view_change_uuid to
--echo #      ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS

--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--error ER_CANT_USE_SAME_UUID_AS_VIEW_CHANGE_UUID
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST="127.0.0.1", SOURCE_USER="root", SOURCE_PASSWORD="", SOURCE_PORT=$SERVER_MYPORT_3, ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS="$view_change_uuid"

--echo #
--echo #  3.2 Enable asynchronous replication connection
--echo #      with custom uuid

--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST="127.0.0.1", SOURCE_USER="root", SOURCE_PASSWORD="", SOURCE_PORT=$SERVER_MYPORT_3, ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS="$source_uuid"

--echo #
--echo #  3.3 Stop GR on server 1 and verify that setting
--echo #      view_change_uuid to the UUID value used for
--echo #      ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
--echo #      gives error

--source include/stop_group_replication.inc

--error ER_WRONG_VALUE_FOR_VAR_PLUS_ACTIONABLE_PART
--eval SET GLOBAL group_replication_view_change_uuid= "$source_uuid";

--echo #
--echo #  3.4  Verify that restarting server 1 using the
--echo #       same view_change_uuid group name as the UUID
--echo #       value for ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
--echo #       logs an error for Group Replication and an
--echo #       warning for replication initialization

--eval SET PERSIST_ONLY group_replication_view_change_uuid = "$source_uuid"

--let $allow_rpl_inited=1
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group-replication-start-on-boot=1 --group-replication-group-name="$group_replication_group_name" --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds
--replace_result $group_replication_group_name GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS

--source include/restart_mysqld.inc

--let $rpl_server_number= 1
--source include/rpl_reconnect.inc

# Member should have failed on start during server boot
--let $member_state= query_get_value(SELECT Member_State from performance_schema.replication_group_members, Member_State, 1)
--let $assert_text= The value of member_state must be offline
--let $assert_cond= "$member_state" = "OFFLINE"
--source include/assert.inc

# Assert that correct error is logged
--let $assert_text = An error will be generated when GR is started with an UUID already in use by ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_select = channel.*is configured with ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTION.*equal to group_replication_view_change_uuid
--let $assert_count = 1
--source include/assert_grep.inc

# Verify that START fails for group_replication
--error ER_GROUP_REPLICATION_CONFIGURATION
START GROUP_REPLICATION;

# Assert that correct error is logged
--let $assert_text = An error will be generated when GR is started with an UUID already in use by ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_select = The group_replication_view_change_uuid .*. is the same as the UUID value.*
--let $assert_count = 2
--source include/assert_grep.inc

--echo #
--echo #  3.5  Verify that on replica start we get error related to
--echo #       the UUID value for ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS
--echo #       being same as the view_change_uuid

--error ER_ANONYMOUS_TO_GTID_UUID_SAME_AS_VIEW_CHANGE_UUID
START REPLICA;

--echo
--echo ###################################################################
--echo #  4. Fix the configuration by assigning the view_change_uuid of
--echo #     group

--eval SET GLOBAL group_replication_view_change_uuid= "$view_change_uuid"

--source include/start_group_replication.inc
--source include/start_slave.inc

--echo
--echo ###################################################################
--echo #  5. Execute some transactions on server 3 and sync with server 1

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (0);
INSERT INTO t1 VALUES (1);
UPDATE t1 SET c1=2 WHERE c1=0;

--let $sync_slave_connection= server1
--let $use_gtids = 0
--source include/sync_slave_sql_with_master.inc
--let $use_gtids = 1

--echo
--echo ############################################################
--echo #  6. Execute a transaction on the group and sync
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (6);
--source include/rpl_sync.inc

--echo
--echo ############################################################
--echo #  7. GTID_EXECUTED on server 1 must contain transactions
--echo #     from server 3, from group and view changes
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= GTID_EXECUTED must contain GTID_EXECUTED from server 3 with server 1 UUID
--let $assert_cond= [SELECT GTID_SUBSET("$source_uuid:1-4", @@GLOBAL.GTID_EXECUTED)] = 1
--source include/assert.inc

--let $assert_text= GTID_EXECUTED must contain GTID_EXECUTED group view changes
--let $assert_cond= [SELECT GTID_SUBSET("$view_change_uuid:1-3", @@GLOBAL.GTID_EXECUTED)] = 1
--source include/assert.inc

--let $assert_text= GTID_EXECUTED must contain GTID_EXECUTED from group replication transaction
--let $assert_cond= [SELECT GTID_SUBSET("$group_replication_group_name:1", @@GLOBAL.GTID_EXECUTED)] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo #  8. GTID_EXECUTED on server 2 must contain the transactions
--echo #     from server 3.
--echo #     Validate data on server 2.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $assert_text= GTID_EXECUTED must contain GTID_EXECUTED from server 3 with server 1 UUID
--let $assert_cond= [SELECT GTID_SUBSET("$source_uuid:1-4", @@GLOBAL.GTID_EXECUTED)] = 1
--source include/assert.inc

--let $assert_text= GTID_EXECUTED must contain GTID_EXECUTED group view changes
--let $assert_cond= [SELECT GTID_SUBSET("$view_change_uuid:1-3", @@GLOBAL.GTID_EXECUTED)] = 1
--source include/assert.inc

--let $assert_text= GTID_EXECUTED must contain GTID_EXECUTED from group replication transaction
--let $assert_cond= [SELECT GTID_SUBSET("$group_replication_group_name:1", @@GLOBAL.GTID_EXECUTED)] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo #  9. Cleanup

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

DROP TABLE t1;

--let $sync_slave_connection= server1
--let $use_gtids = 0
--source include/sync_slave_sql_with_master.inc
--let $use_gtids = 1

# Stop asynchronous replication connection from server 3

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_slave.inc

# Restore the GTID_MODE on server 3

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $rpl_gtid_mode= ON
--let $rpl_skip_sync= 1
--let $rpl_server_numbers= 3
--source include/rpl_set_gtid_mode.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Stop Group Replication on server 1 and 2 to avoid sync problems

--source include/stop_group_replication.inc

--replace_result $view_change_uuid_save VIEW_CHANGE_UUID
--eval SET GLOBAL group_replication_view_change_uuid = $view_change_uuid_save

SET session sql_log_bin=0;
CALL mtr.add_suppression("Replication channel '' is configured with ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS");
CALL mtr.add_suppression("The group_replication_view_change_uuid .*. is the same as");
SET session sql_log_bin=1;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--replace_result $view_change_uuid_save VIEW_CHANGE_UUID
--eval SET GLOBAL group_replication_view_change_uuid = $view_change_uuid_save

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

RESET PERSIST;

--let $allow_rpl_inited=1
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group-replication-start-on-boot=OFF --group-replication-group-name=$group_replication_group_name --group_replication_local_address
--source include/restart_mysqld_no_echo.inc
--let $rpl_server_number= 1
--source include/rpl_reconnect.inc

--source include/group_replication_end.inc
