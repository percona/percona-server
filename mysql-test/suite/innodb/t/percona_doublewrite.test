#
# Tests for Percona parallel doublewrite feature.
# The majority of functionality is already covered by existing tests, most
# importantly innodb.doublewrite.
#
# Maximum and truncated doublewrite file size tests depend on this
--source include/have_innodb_16k.inc

# Doublewrite must be enabled for the tests to work
SELECT @@innodb_doublewrite;

CALL mtr.add_suppression("Skip re-populating collations and character sets tables in InnoDB read-only mode.");
CALL mtr.add_suppression("Skip updating information_schema metadata in InnoDB read-only mode.");
CALL mtr.add_suppression("Skipped updating resource group metadata in InnoDB read only mode.");

let $MYSQL_DATA_DIR= `select @@datadir`;
let $MYSQL_BASE_DIR= `select @@basedir`;

let $DOUBLEWRITE_FILE= $MYSQL_DATA_DIR/xb_doublewrite;

let $DOUBLEWRITE_NAME2= xb_my_name;
let $DOUBLEWRITE_FILE2= $MYSQL_DATA_DIR/$DOUBLEWRITE_NAME2;

let $DOUBLEWRITE_FILE3= $MYSQL_BASE_DIR/xb_my_name2;

let $DOUBLEWRITE_FILE4= $MYSQL_DATA_DIR/../xb_my_name3;

let SEARCH_FILE= $MYSQLTEST_VARDIR/log/my_restart.err;
let $args= --loose-console --core-file > $SEARCH_FILE 2>&1;

--echo # Test that the parallel doublewrite is there during the regular server operation
SELECT @@GLOBAL.innodb_parallel_doublewrite_path;
file_exists $DOUBLEWRITE_FILE;

--echo # Test that a clean shutdown removes the doublewrite file
--source include/shutdown_mysqld.inc

--echo # No files should be found:
list_files $MYSQL_DATA_DIR xb_doublewrite;

--echo # Test that a custom doublewrite file name works
--let $restart_parameters= restart:--innodb-parallel-doublewrite-path=$DOUBLEWRITE_NAME2
--source include/start_mysqld.inc

SELECT @@GLOBAL.innodb_parallel_doublewrite_path;
file_exists $DOUBLEWRITE_FILE2;

--echo # Test that a custom absolute doublewrite file path works
--let $restart_hide_args= 1
--let $restart_parameters= restart:--innodb-parallel-doublewrite-path=$DOUBLEWRITE_FILE3
--source include/restart_mysqld.inc

file_exists $DOUBLEWRITE_FILE3;

--echo # Test that a custom relative doublewrite file path works
--let $restart_hide_args= 1
--let $restart_parameters= restart:--innodb-parallel-doublewrite-path=$DOUBLEWRITE_FILE4
--source include/restart_mysqld.inc

file_exists $DOUBLEWRITE_FILE4;

--source include/shutdown_mysqld.inc

--echo # Test that empty arg is rejected
--error 1
--exec $MYSQLD_CMD --innodb-parallel-doublewrite-path= $args
let SEARCH_PATTERN= must point to a regular file;
--source include/search_pattern.inc
--remove_file $SEARCH_FILE

--echo # Test that current directory arg is rejected
--error 1
--exec $MYSQLD_CMD --innodb-parallel-doublewrite-path=. $args
let SEARCH_PATTERN= must point to a regular file;
--source include/search_pattern.inc
--remove_file $SEARCH_FILE

--echo # Test that empty arg in combination with empty innodb_data_home_dir is treated correctly
--error 1
--exec $MYSQLD_CMD --innodb-data-home-dir= --innodb-parallel-doublewrite-path= $args
let SEARCH_PATTERN= must point to a regular file;
--source include/search_pattern.inc
--remove_file $SEARCH_FILE

--echo # Test that maximum possible parallel doublewrite file is accepted
--exec perl -e 'print "\0" x 266338304' > $DOUBLEWRITE_FILE
--let $restart_parameters=
--source include/start_mysqld.inc

SELECT @@GLOBAL.innodb_parallel_doublewrite_path;
file_exists $DOUBLEWRITE_FILE;

--echo # Test that too big parallel doublewrite file is diagnosed
--source include/shutdown_mysqld.inc
--exec perl -e 'print "\0" x 266338305' > $DOUBLEWRITE_FILE
--error 1
--exec $MYSQLD_CMD $args
--let SEARCH_PATTERN= bytes is larger than the maximum size
--source include/search_pattern.inc
--remove_file $SEARCH_FILE

--echo # Test that doublewrite file whose last page is truncated is diagnosed
--exec perl -e 'print "\0" x 16383' > $DOUBLEWRITE_FILE
--error 1
--exec $MYSQLD_CMD $args
--let SEARCH_PATTERN= bytes is not a multiple of a page size
--source include/search_pattern.inc
--remove_file $SEARCH_FILE

--echo # Test that zero-sized doublewrite file is diagnosed and accepted
--remove_file $DOUBLEWRITE_FILE
write_file $DOUBLEWRITE_FILE;
EOF

--let $restart_hide_args= 1
--let $restart_parameters=restart:--log-error=$SEARCH_FILE
--source include/start_mysqld.inc
--let SEARCH_PATTERN= Parallel doublewrite buffer is zero-sized
--source include/search_pattern.inc
--remove_file $SEARCH_FILE

--let $restart_parameters=
--source include/restart_mysqld.inc

--echo #
--echo # Bug 1629879: Server won't start with innodb_force_recovery=6 because parallel doublewrite file exists
--echo #

--echo # Test that --innodb_force_recovery=6 fails to start with the doublewrite file present
call mtr.add_suppression("InnoDB: Failed to find tablespace for table");
SET GLOBAL innodb_fast_shutdown=2;
--source include/shutdown_mysqld.inc

--echo # Test that --innodb_force_recovery=6 succeeds to start with the doublewrite file
--let $restart_parameters=restart:--innodb-force-recovery=6
--source include/start_mysqld.inc

--echo # Test that --innodb_force_recovery=6 succeeds to start without the doublewrite file
--source include/shutdown_mysqld.inc
--let $restart_parameters=restart:--innodb-force-recovery=6
--source include/start_mysqld.inc

--echo #
--echo # Bug PS-3411: Parallel doublewrite buffer file created when skip-innodb_doublewrite is set
--echo #

--let $restart_hide_args= 1
--let $restart_parameters= restart:--innodb-parallel-doublewrite-path=$DOUBLEWRITE_FILE
--source include/restart_mysqld.inc
file_exists $DOUBLEWRITE_FILE;

CREATE TABLE t1 (a INT);

--let $i= 1000
--disable_query_log
START TRANSACTION;
while($i)
{
    --eval INSERT INTO t1 VALUES ($i);
    --dec $i
}
COMMIT;
--enable_query_log

# wait until pages flushed
--let $wait_condition= SELECT variable_value = 0 FROM performance_schema.global_status WHERE LOWER(variable_name) = 'innodb_buffer_pool_pages_dirty'
--source include/wait_condition.inc

SELECT * FROM t1 ORDER BY a DESC LIMIT 10;
DROP TABLE t1;

--let $restart_hide_args= 1
--let $restart_parameters= "restart:--innodb-parallel-doublewrite-path=$DOUBLEWRITE_FILE --skip-innodb-doublewrite"
--source include/restart_mysqld.inc
--error 1
--file_exists $DOUBLEWRITE_FILE;

# check that it still works
CREATE TABLE t1 (a INT);

--let $i= 1000
--disable_query_log
START TRANSACTION;
while($i)
{
    --eval INSERT INTO t1 VALUES ($i);
    --dec $i
}
COMMIT;
--enable_query_log

# wait until pages flushed
--let $wait_condition= SELECT variable_value = 0 FROM performance_schema.global_status WHERE LOWER(variable_name) = 'innodb_buffer_pool_pages_dirty'
--source include/wait_condition.inc

SELECT * FROM t1 ORDER BY a DESC LIMIT 10;
DROP TABLE t1;

--echo # Cleanup
--let $restart_parameters=
--source include/restart_mysqld.inc
