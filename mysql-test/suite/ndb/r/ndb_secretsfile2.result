
#### 2.1  - Check that secrets file is created in the File System
# Check that secretsFile are being created for node 1

#### 2.2 Check that secrets file contents is encrypted
File=NDB_SECRETS_FILE_PATH/S0.sysfile, compression=no, encryption=yes

#### 2.3 Check that secrets file can't be read if filesystem password is incorrect
# Restart data node 1
Node 1 is being restarted

# Set RestartOnErrorInsert to 1 (NRT_NoStart_Restart)
Sending dump signal with data:
0x00000a2a 0x00000001 

# Insert Error to force data node to change filesystem password to a wrong one

Database node 1 is being started.

include/assert_grep.inc [Wrong filesystem password used to open (for read) secrets file]

#### 2.4 Check that if secretes file is corrupt files aren't decrypted
# Set RestartOnErrorInsert to 1 (NRT_NoStart_Restart)
Sending dump signal with data:
0x00000a2a 0x00000001 

# backup secrets file and write a new one with invalid data
# Insert error 1027 for CRASH_INSERTION in data node to make it crash in a soft way
# when secretsfile is invalid

Database node 1 is being started.

include/assert_grep.inc [Corrupt Secretsfile]
# restore secrets file from backup
# Set RestartOnErrorInsert back to 2 (NRT_DoStart_Restart)
Sending dump signal with data:
0x00000a2a 0x00000002 

Database node 1 is being started.


#### 2.5 Check that secrets file content with same password is encrypted differently 
# due to salts
Data node 1 and data node 2 are using the same filesystem password but their
    secretsfile content differs due to salts

#### 2.6 Check that user files are encrypted
Error: Could not open file 'NDB_LCP_FILES_0/T2F1.Data' for read.

# Test ended, cleanup files.
