source include/have_ndb.inc;
source suite/ndb/include/backup_restore_setup.inc;

--echo Verify that one can run ndb_print_backup_file on all saved backup files
--echo without errors.
--echo That should cover most kinds of backup files, and both newer and older
--echo formats.

--perl
use strict;
use lib "lib/";
use My::Find;
use File::Basename;
use File::Find;
use locale ':not_characters';

my $mysql_test_dir = $ENV{MYSQL_TEST_DIR} or die "Need MYSQL_TEST_DIR";
my $basedir = dirname($mysql_test_dir);

# In the RPM case, binaries and libraries are installed in the
# default system locations, instead of having our own private base
# directory. And we install "usr/share/mysql-test". Moving up two
# more directory relative to "mysql-test" gives us a usable base
# directory for RPM installs.
if (! -d "$basedir/sql" and ! -d "$basedir/bin" )
{
  $basedir= dirname($basedir);
}
my $bindir = $ENV{MTR_BINDIR} || $basedir; # Out of source set MTR_BINDIR

my $NDB_PRINT_BACKUP_FILE =  my_find_bin($bindir,
                                         ["runtime_output_directory", "bin"],
                                         "ndb_print_backup_file");

# Directory containing backups from earlier versions of NDB
my $NDB_SAVED_BACKUPS = "$ENV{MYSQL_TEST_DIR}/suite/ndb/backups";

sub sorted
{
  sort(@_);
}

sub process
{
  return unless -f;
  print "ndb_print_backup_file " .
        "suite/ndb/backups" .
          substr($File::Find::name, length($NDB_SAVED_BACKUPS)) .
        "\n";

  my $output;
  open(my $fh, '-|', "$NDB_PRINT_BACKUP_FILE ${File::Find::name}")
    or die("Unable to open $File::Find::name: $!\n");
  {
    local $/;
    $output = <$fh>;
  }
  close($fh) or die("Unable to close $File::Find::name: $!\n");

  if (!defined($output))
  {
    die "Failed running: $NDB_PRINT_BACKUP_FILE $File::Find::name";
  }
  # hide difference in reported byte order
  $output =~ s/ByteOrder: 0x\d{8}/ByteOrder: 0xXXXXXXXX/m;
  # make sure lines ends with LF
  $output =~ s/\r[\n]?/\n/gm;
  print length($output) . " bytes in output\n";
}

find({ wanted => \&process, preprocess => \&sorted }, $NDB_SAVED_BACKUPS);

EOF

--echo Verify that ndb_print_backup_file can be used to check backup generated files individually (CTL, DATA, LOG)
let $dump_file = $MYSQLTEST_VARDIR/tmp/ndb_mgmd_dump_file.txt;

--exec $NDB_PRINT_BACKUP_FILE $NDB_SAVED_BACKUPS/packed/BACKUP-1-0.2.Data > $dump_file 2>&1
--let $assert_text= Checking .Data backup file
--let $assert_select= Found 15 INSERT records
--let $assert_file= $dump_file
--let $assert_count= 1
--source include/assert_grep.inc

--exec $NDB_PRINT_BACKUP_FILE $NDB_SAVED_BACKUPS/packed/BACKUP-1.2.ctl > $dump_file 2>&1
--let $assert_text= Checking .ctl backup file
--let $assert_select= Magic: NDBBCKUP
--let $assert_file= $dump_file
--let $assert_count= 1
--source include/assert_grep.inc

--exec $NDB_PRINT_BACKUP_FILE $NDB_SAVED_BACKUPS/packed/BACKUP-1.2.log > $dump_file 2>&1
--let $assert_text= Checking .log backup file
--let $assert_select= Magic: NDBBCKUP
--let $assert_file= $dump_file
--let $assert_count= 1
--source include/assert_grep.inc

--remove_file $dump_file

--echo Verify that ndb_print_backup_file can be used to check LCP Data and CTL files individually
# ByteOrder is masked until Bug#32470157 is fixed so that ndb_print_backup_file
# tool works well with both little endian and big endian systems.

--echo ndb_print_backup_file suite/ndb/backups/LCP/0/T22F0.ctl
--replace_regex /ByteOrder: 0x\d{8}/ByteOrder: 0xXXXXXXXX/
--exec $NDB_PRINT_BACKUP_FILE $NDB_SAVED_BACKUPS/LCP/0/T22F0.ctl

--echo ndb_print_backup_file suite/ndb/backups/LCP/0/T10F0.Data
--replace_regex /ByteOrder: 0x\d{8}/ByteOrder: 0xXXXXXXXX/
--exec $NDB_PRINT_BACKUP_FILE $NDB_SAVED_BACKUPS/LCP/0/T10F0.Data

--echo ndb_print_backup_file suite/ndb/backups/LCP/0/T19F0.ctl
--replace_regex /ByteOrder: 0x\d{8}/ByteOrder: 0xXXXXXXXX/
--exec $NDB_PRINT_BACKUP_FILE $NDB_SAVED_BACKUPS/LCP/0/T19F0.ctl

--echo ndb_print_backup_file suite/ndb/backups/LCP/1/T22F0.Data
--replace_regex /ByteOrder: 0x\d{8}/ByteOrder: 0xXXXXXXXX/
--exec $NDB_PRINT_BACKUP_FILE $NDB_SAVED_BACKUPS/LCP/1/T22F0.Data


# The following scenario is disabled until Bug#33053631 is fixed so that
# ndb_print_backup_file fully handles backup or lcp files written on
# systems with other byte order

#--echo Verify that ndb_print_backup_file can be used to check
#--echo a set of LCP CTL + DATA files that will be used to restore a fragment

#--echo ndb_print_backup_file -c 0 -t 22 -f 0 --print-restored-rows
#--exec cd $NDB_SAVED_BACKUPS/LCP && $NDB_PRINT_BACKUP_FILE -c 0 -t 22 -f 0 --print-restored-rows
