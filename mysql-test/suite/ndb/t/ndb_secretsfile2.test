-- source include/have_ndb.inc
-- source have_ndb_error_insert.inc

let $NDB_SECRETS_FILE_PATH= $MYSQLTEST_VARDIR/mysql_cluster.1/ndbd.1/ndb_1_fs/D1/NDBCNTR;

--echo
--echo #### 2.1  - Check that secrets file is created in the File System
--echo # Check that secretsFile are being created for node 1
--file_exists $NDB_SECRETS_FILE_PATH/S0.sysfile


--echo
--echo #### 2.2 Check that secrets file contents is encrypted
replace_result $NDB_SECRETS_FILE_PATH NDB_SECRETS_FILE_PATH ;
exec $NDBXFRM 2>&1
       --info
       $NDB_SECRETS_FILE_PATH/S0.sysfile;


--echo
--echo #### 2.3 Check that secrets file can't be read if filesystem password is incorrect
--echo # Restart data node 1
--exec $NDB_MGM -e "1 RESTART -N"
--echo # Set RestartOnErrorInsert to 1 (NRT_NoStart_Restart)
--exec $NDB_MGM -e "1 DUMP 2602 1"
--echo # Insert Error to force data node to change filesystem password to a wrong one
--exec $NDB_MGM -e "1 ERROR 1026"
--exec $NDB_MGM -e "1 START"
--sleep 1
--exec $NDB_WAITER --not-started --wait-nodes=1 >> $NDB_TOOLS_OUTPUT

--let $assert_select=-- Failed to read secrets file using the provided filesystem password
--let $assert_text= Wrong filesystem password used to open (for read) secrets file
--let $assert_file= $MYSQLTEST_VARDIR/mysql_cluster.1/ndbd.1/ndbd.log
--let $assert_match = .*Failed to read secrets file using the provided filesystem password.*
--source include/assert_grep.inc


--echo
--echo #### 2.4 Check that if secretes file is corrupt files aren't decrypted
--echo # Set RestartOnErrorInsert to 1 (NRT_NoStart_Restart)
--exec $NDB_MGM -e "1 DUMP 2602 1"

--echo # backup secrets file and write a new one with invalid data
move_file $NDB_SECRETS_FILE_PATH/S0.sysfile $NDB_SECRETS_FILE_PATH/S0.sysfile.back;
write_file $NDB_SECRETS_FILE_PATH/S0.sysfile;
INVALIDDATA
EOF

--echo # Insert error 1027 for CRASH_INSERTION in data node to make it crash in a soft way
--echo # when secretsfile is invalid
--exec $NDB_MGM -e "1 ERROR 1027"
--exec $NDB_MGM -e "1 START"
--sleep 1
--exec $NDB_WAITER --not-started --wait-nodes=1 >> $NDB_TOOLS_OUTPUT;

--let $assert_select=-- Failed to read secrets file, error: 2816
--let $assert_text=Corrupt Secretsfile
--let $assert_file= $MYSQLTEST_VARDIR/mysql_cluster.1/ndbd.1/ndbd.log
--let $assert_match = .*Failed to read secrets file, error: 2816.*
--source include/assert_grep.inc

--echo # restore secrets file from backup
remove_file $NDB_SECRETS_FILE_PATH/S0.sysfile;
move_file $NDB_SECRETS_FILE_PATH/S0.sysfile.back $NDB_SECRETS_FILE_PATH/S0.sysfile;

--echo # Set RestartOnErrorInsert back to 2 (NRT_DoStart_Restart)
--exec $NDB_MGM -e "1 DUMP 2602 2"
--sleep 1
--exec $NDB_MGM -e "1 START"
--exec $NDB_WAITER --wait-nodes=1 >> $NDB_TOOLS_OUTPUT

--echo
--echo #### 2.5 Check that secrets file content with same password is encrypted differently 
--echo # due to salts

--perl
use strict;
use Symbol;
use File::Compare;
my $vardir = $ENV{MYSQLTEST_VARDIR}
  or die "need MYSQLTEST_VARDIR";
my $secretsfile1 = "$vardir/mysql_cluster.1/ndbd.1/ndb_1_fs/D1/NDBCNTR/S0.sysfile";
my $secretsfile2 = "$vardir/mysql_cluster.1/ndbd.2/ndb_2_fs/D1/NDBCNTR/S0.sysfile";

my $comp = compare($secretsfile1, $secretsfile2);
if($comp == -1){
  print "Error accessing secrets file\n" ;
}
elsif($comp == 0){
  print "Secretsfiles are equal\n";
}
else{
  print "Data node 1 and data node 2 are using the same filesystem password but their
    secretsfile content differs due to salts\n";
}
EOF


--echo
--echo #### 2.6 Check that user files are encrypted
let $NDB_LCP_FILES_0 = $MYSQLTEST_VARDIR/mysql_cluster.1/ndbd.1/ndb_1_fs/LCP/0;
replace_result $NDB_LCP_FILES_0 NDB_LCP_FILES_0;
exec $NDBXFRM 2>&1
       --info
       $NDB_LCP_FILES_0/T2F1.Data;


--echo
--echo # Test ended, cleanup files.
remove_file $NDB_TOOLS_OUTPUT;

