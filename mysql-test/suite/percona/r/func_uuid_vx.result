#
# Implement RFC 9562 standard for UUIDs
#
# install uuidx component
INSTALL COMPONENT 'file://component_uuid_vx_udf';
# uuid_vx_version() with 1,3,4,5,6,7 versions
SELECT uuid_vx_version('{bc776b91-1e4b-11ef-bcff-0b9de0906f7d}');
uuid_vx_version('{bc776b91-1e4b-11ef-bcff-0b9de0906f7d}')
1
SELECT uuid_vx_version('{905f8aa4-56fe-33ae-b318-293311ddf8de}');
uuid_vx_version('{905f8aa4-56fe-33ae-b318-293311ddf8de}')
3
SELECT uuid_vx_version('{12e8120c-8ab6-4898-8570-32ac169acbf6}');
uuid_vx_version('{12e8120c-8ab6-4898-8570-32ac169acbf6}')
4
SELECT uuid_vx_version('{0168c796-9e87-5d37-a2f6-eecabc720807}');
uuid_vx_version('{0168c796-9e87-5d37-a2f6-eecabc720807}')
5
SELECT uuid_vx_version('{1ef1e4c5-b360-65b1-bac4-b3a602cb9872}');
uuid_vx_version('{1ef1e4c5-b360-65b1-bac4-b3a602cb9872}')
6
SELECT uuid_vx_version('{018fc826-55ad-70f3-8019-2c429b48cf34}');
uuid_vx_version('{018fc826-55ad-70f3-8019-2c429b48cf34}')
7
#uuid_vx_version() with NULL arg
SELECT uuid_vx_version(NULL);
uuid_vx_version(NULL)
NULL
#uuid_vx_version() with '' arg
SELECT uuid_vx_version('');
ERROR HY000: uuid_vx_version<int> UDF failed; Invalid argument. Should be a valid UUID string.
#uuid_vx_version() with bad arg
SELECT uuid_vx_version('12354xy');
ERROR HY000: uuid_vx_version<int> UDF failed; Invalid argument. Should be a valid UUID string.
SELECT uuid_vx_version();
ERROR HY000: Can't initialize function 'uuid_vx_version'; Function requires exactly one argument.
# uuid_vx_variant()
SELECT uuid_vx_variant('{018fc826-55ad-70f3-8019-2c429b48cf34}');
uuid_vx_variant('{018fc826-55ad-70f3-8019-2c429b48cf34}')
1
#uuid_vx_variant() with NULL arg
SELECT uuid_vx_variant(NULL);
uuid_vx_variant(NULL)
NULL
#uuid_vx_variant() with '' arg
SELECT uuid_vx_variant('');
ERROR HY000: uuid_vx_variant<int> UDF failed; Invalid argument. Should be a valid UUID string.
#uuid_vx_variant() with bad arg
SELECT uuid_vx_variant('12354xy');
ERROR HY000: uuid_vx_variant<int> UDF failed; Invalid argument. Should be a valid UUID string.
SELECT uuid_vx_variant();
ERROR HY000: Can't initialize function 'uuid_vx_variant'; Function requires exactly one argument.
# is_uuid_vx() with right uuid
SELECT is_uuid_vx('{12345678-1234-5678-1234-567812345678}');
is_uuid_vx('{12345678-1234-5678-1234-567812345678}')
1
# is_uuid_vx() with bad uuid
SELECT is_uuid_vx('{12345xyz-1234-5678-1234-567812345678}');
is_uuid_vx('{12345xyz-1234-5678-1234-567812345678}')
0
# is_uuid_vx() with NULL uuid
SELECT is_uuid_vx(NULL);
is_uuid_vx(NULL)
NULL
# is_uuid_vx() with empty string
SELECT is_uuid_vx('');
is_uuid_vx('')
0
SELECT is_uuid_vx();
ERROR HY000: Can't initialize function 'is_uuid_vx'; Function requires exactly one argument.
# is_nil_uuid_vx() with good not-nil uuid
SELECT is_nil_uuid_vx('{12345678-1234-5678-1234-567812345678}');
is_nil_uuid_vx('{12345678-1234-5678-1234-567812345678}')
0
# is_nil_uuid_vx() with nil uuid
SELECT is_nil_uuid_vx('{00000000-0000-0000-0000-000000000000}');
is_nil_uuid_vx('{00000000-0000-0000-0000-000000000000}')
1
# is_nil_uuid_vx() with NULL uuid
SELECT is_nil_uuid_vx(NULL);
is_nil_uuid_vx(NULL)
NULL
# is_nil_uuid_vx() with empty string
SELECT is_nil_uuid_vx('');
ERROR HY000: is_nil_uuid_vx<int> UDF failed; Invalid argument. Should be a valid UUID string.
SELECT is_nil_uuid_vx();
ERROR HY000: Can't initialize function 'is_nil_uuid_vx'; Function requires exactly one argument.
# is_max_uuid_vx() with good not-nil uuid
SELECT is_max_uuid_vx('{12345678-1234-5678-1234-567812345678}');
is_max_uuid_vx('{12345678-1234-5678-1234-567812345678}')
0
# is_max_uuid_vx() with max uuid
SELECT is_max_uuid_vx('{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}');
is_max_uuid_vx('{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}')
1
# is_max_uuid_vx() with NULL uuid
SELECT is_max_uuid_vx(NULL);
is_max_uuid_vx(NULL)
NULL
# is_max_uuid_vx() with empty string
SELECT is_max_uuid_vx('');
ERROR HY000: is_max_uuid_vx<int> UDF failed; Invalid argument. Should be a valid UUID string.
SELECT is_max_uuid_vx();
ERROR HY000: Can't initialize function 'is_max_uuid_vx'; Function requires exactly one argument.
#uuid_v1() generation and check 
SELECT is_uuid(uuid_v1());
is_uuid(uuid_v1())
1
SELECT uuid_vx_version(uuid_v1());
uuid_vx_version(uuid_v1())
1
#uuid_v3() generation and check 
SELECT is_uuid_vx(uuid_v3('test.com'));
is_uuid_vx(uuid_v3('test.com'))
1
SELECT uuid_vx_version(uuid_v3('test.com'));
uuid_vx_version(uuid_v3('test.com'))
3
#uuid_v3() with UUID namespace argument
SELECT is_uuid_vx(uuid_v3('test.com',0));
is_uuid_vx(uuid_v3('test.com',0))
1
SELECT is_uuid_vx(uuid_v3('http://test.com',1));
is_uuid_vx(uuid_v3('http://test.com',1))
1
SELECT is_uuid_vx(uuid_v3('test.com',2));
is_uuid_vx(uuid_v3('test.com',2))
1
SELECT is_uuid_vx(uuid_v3('test.com',3));
is_uuid_vx(uuid_v3('test.com',3))
1
SELECT is_uuid_vx(uuid_v3('test.com',4));
ERROR HY000: uuid_v3<string> UDF failed; UUID namespace index must be in the 0..3 range.
SELECT is_uuid_vx(uuid_v3('test.com',-1));
ERROR HY000: uuid_v3<string> UDF failed; UUID namespace index must be in the 0..3 range.
SELECT uuid_v3();
ERROR HY000: Can't initialize function 'uuid_v3'; Function requires one or two arguments.
#uuid_v4() generation and check 
SELECT is_uuid_vx(uuid_v4());
is_uuid_vx(uuid_v4())
1
SELECT uuid_vx_version(uuid_v4());
uuid_vx_version(uuid_v4())
4
#uuid_v5() generation and check 
SELECT is_uuid(uuid_v5('test.com'));
is_uuid(uuid_v5('test.com'))
1
SELECT uuid_vx_version(uuid_v5('test.com'));
uuid_vx_version(uuid_v5('test.com'))
5
#uuid_v5() with UUID namespace argument
SELECT is_uuid_vx(uuid_v5('test.com',0));
is_uuid_vx(uuid_v5('test.com',0))
1
SELECT is_uuid_vx(uuid_v5('http://test.com',1));
is_uuid_vx(uuid_v5('http://test.com',1))
1
SELECT is_uuid_vx(uuid_v5('test.com',2));
is_uuid_vx(uuid_v5('test.com',2))
1
SELECT is_uuid_vx(uuid_v5('test.com',3));
is_uuid_vx(uuid_v5('test.com',3))
1
SELECT is_uuid_vx(uuid_v5('test.com',4));
ERROR HY000: uuid_v5<string> UDF failed; UUID namespace index must be in the 0..3 range.
SELECT is_uuid_vx(uuid_v5('test.com',-1));
ERROR HY000: uuid_v5<string> UDF failed; UUID namespace index must be in the 0..3 range.
SELECT uuid_v5();
ERROR HY000: Can't initialize function 'uuid_v5'; Function requires one or two arguments.
SELECT is_uuid(uuid_v6());
is_uuid(uuid_v6())
1
SELECT uuid_vx_version(uuid_v6());
uuid_vx_version(uuid_v6())
6
SELECT is_uuid(uuid_v7());
is_uuid(uuid_v7())
1
SELECT uuid_vx_version(uuid_v7());
uuid_vx_version(uuid_v7())
7
SELECT is_uuid(uuid_v7(-100000));
is_uuid(uuid_v7(-100000))
1
SELECT uuid_vx_version(uuid_v7(-100000));
uuid_vx_version(uuid_v7(-100000))
7
SELECT is_uuid(uuid_v7(100000));
is_uuid(uuid_v7(100000))
1
SELECT uuid_vx_version(uuid_v7(100000));
uuid_vx_version(uuid_v7(100000))
7
#uuid_vx_to_bin and bin_to_uid_vx
SELECT uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v1())));
uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v1())))
1
SELECT uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v3('test.com'))));
uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v3('test.com'))))
3
SELECT uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v4())));
uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v4())))
4
SELECT uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v5('test.com'))));
uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v5('test.com'))))
5
SELECT uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v6())));
uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v6())))
6
SELECT uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v7())));
uuid_vx_version(bin_to_uuid_vx(uuid_vx_to_bin(uuid_v7())))
7
SELECT bin_to_uuid_vx(NULL);
bin_to_uuid_vx(NULL)
NULL
SELECT uuid_vx_to_bin(NULL);
uuid_vx_to_bin(NULL)
NULL
SELECT bin_to_uuid_vx('123');
ERROR HY000: bin_to_uuid_vx<string> UDF failed; The string should be exactly 32 hex characters (16 bytes).
SELECT uuid_vx_to_bin('123');
ERROR HY000: uuid_vx_to_bin<string> UDF failed; Invalid argument. Should be a valid UUID string.
#all functions outupts timestamps in GMT timezone
#time-based UUID timestamps test
#v1 (wrong values, boost bug, check if test fails)
SELECT uuid_vx_version('93c39787-225d-11ef-bfac-f5e814172db8');
uuid_vx_version('93c39787-225d-11ef-bfac-f5e814172db8')
1
SELECT uuid_vx_to_timestamp('93c39787-225d-11ef-bfac-f5e814172db8');
uuid_vx_to_timestamp('93c39787-225d-11ef-bfac-f5e814172db8')
2024-06-04 10:31:17.814
SELECT uuid_vx_to_timestamp_tz('93c39787-225d-11ef-bfac-f5e814172db8');
uuid_vx_to_timestamp_tz('93c39787-225d-11ef-bfac-f5e814172db8')
Tue Jun  4 10:31:17 2024 GMT
SELECT uuid_vx_to_unixtime('93c39787-225d-11ef-bfac-f5e814172db8');
uuid_vx_to_unixtime('93c39787-225d-11ef-bfac-f5e814172db8')
1717497077814
#v6 (wrong values, boost bug, check if test fails)
SELECT uuid_vx_version('1ef225dd-aded-6cfa-8604-ff7079a99e49');
uuid_vx_version('1ef225dd-aded-6cfa-8604-ff7079a99e49')
6
SELECT uuid_vx_to_timestamp('1ef225dd-aded-6cfa-8604-ff7079a99e49');
uuid_vx_to_timestamp('1ef225dd-aded-6cfa-8604-ff7079a99e49')
2024-06-04 10:33:17.111
SELECT uuid_vx_to_timestamp_tz('1ef225dd-aded-6cfa-8604-ff7079a99e49');
uuid_vx_to_timestamp_tz('1ef225dd-aded-6cfa-8604-ff7079a99e49')
Tue Jun  4 10:33:17 2024 GMT
SELECT uuid_vx_to_unixtime('1ef225dd-aded-6cfa-8604-ff7079a99e49');
uuid_vx_to_unixtime('1ef225dd-aded-6cfa-8604-ff7079a99e49')
1717497197111
#v7 (proper values)
SELECT uuid_vx_version('018fe2cf-8209-71fe-8034-fa62177f35c7');
uuid_vx_version('018fe2cf-8209-71fe-8034-fa62177f35c7')
7
SELECT uuid_vx_to_timestamp('018fe2cf-8209-71fe-8034-fa62177f35c7');
uuid_vx_to_timestamp('018fe2cf-8209-71fe-8034-fa62177f35c7')
2024-06-04 10:33:21.161
SELECT uuid_vx_to_timestamp_tz('018fe2cf-8209-71fe-8034-fa62177f35c7');
uuid_vx_to_timestamp_tz('018fe2cf-8209-71fe-8034-fa62177f35c7')
Tue Jun  4 10:33:21 2024 GMT
SELECT uuid_vx_to_unixtime('018fe2cf-8209-71fe-8034-fa62177f35c7');
uuid_vx_to_unixtime('018fe2cf-8209-71fe-8034-fa62177f35c7')
1717497201161
#wrong UUID argument
SELECT  uuid_vx_to_unixtime('123');
ERROR HY000: uuid_vx_to_unixtime<int> UDF failed; Invalid argument. Should be a valid UUID of version 1,6,7 in a string representation.
SELECT  uuid_vx_to_timestamp_tz('123');
ERROR HY000: uuid_vx_to_timestamp_tz<string> UDF failed; Invalid argument. Should be a valid UUID of version 1,6,7 in a string representation.
SELECT  uuid_vx_to_timestamp('123');
ERROR HY000: uuid_vx_to_timestamp<string> UDF failed; Invalid argument. Should be a valid UUID of version 1,6,7 in a string representation.
#NULL UUID argument
SELECT  uuid_vx_to_unixtime(NULL);
uuid_vx_to_unixtime(NULL)
NULL
SELECT  uuid_vx_to_timestamp_tz(NULL);
uuid_vx_to_timestamp_tz(NULL)
NULL
SELECT  uuid_vx_to_timestamp(NULL);
uuid_vx_to_timestamp(NULL)
NULL
SELECT  uuid_vx_to_unixtime();
ERROR HY000: Can't initialize function 'uuid_vx_to_unixtime'; Function requires exactly one argument.
SELECT  uuid_vx_to_timestamp_tz();
ERROR HY000: Can't initialize function 'uuid_vx_to_timestamp_tz'; Function requires no arguments.
SELECT  uuid_vx_to_timestamp();
ERROR HY000: Can't initialize function 'uuid_vx_to_timestamp'; Function requires exactly one argument.
SELECT  uuid_vx_to_unixtime(1,2);
ERROR HY000: Can't initialize function 'uuid_vx_to_unixtime'; Function requires exactly one argument.
SELECT  uuid_vx_to_timestamp_tz(1,2);
ERROR HY000: Can't initialize function 'uuid_vx_to_timestamp_tz'; Function requires no arguments.
SELECT  uuid_vx_to_timestamp(1,2);
ERROR HY000: Can't initialize function 'uuid_vx_to_timestamp'; Function requires exactly one argument.
# uninstall uuidx component
UNINSTALL COMPONENT 'file://component_uuid_vx_udf';
#
# end of test
#
