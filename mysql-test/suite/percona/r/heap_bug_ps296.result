PS-296: inconsistent maximum key lenghts caused a crash in the query optimizer
CREATE TABLE big_ok (id VARBINARY(3072) NOT NULL, PRIMARY KEY (id)) ENGINE=MEMORY;
CREATE TABLE big_ok2 (id VARBINARY(1072) NOT NULL, id2 VARBINARY(2000), PRIMARY KEY (id, id2)) ENGINE=MEMORY;
CREATE TABLE big_fails (id VARBINARY(3073) NOT NULL, PRIMARY KEY (id)) ENGINE=MEMORY;
ERROR 42000: Specified key was too long; max key length is 3072 bytes
CREATE TABLE big_fails (id VARBINARY(1073) NOT NULL, id2 VARBINARY(2000), PRIMARY KEY (id, id2)) ENGINE=MEMORY;
ERROR 42000: Specified key was too long; max key length is 3072 bytes
SET @@session.max_sort_length = 4000;
INSERT INTO big_ok VALUES (CONCAT(REPEAT('a', 3071), 'c'));
INSERT INTO big_ok VALUES (CONCAT(REPEAT('a', 3071), 'b'));
INSERT INTO big_ok VALUES (CONCAT(REPEAT('a', 3071), 'a'));
SELECT RIGHT(id, 5) FROM big_ok FORCE INDEX (PRIMARY) ORDER BY id ASC LIMIT 10;
RIGHT(id, 5)
aaaaa
aaaab
aaaac
SELECT RIGHT(id, 5) FROM big_ok IGNORE INDEX (PRIMARY) ORDER BY id ASC LIMIT 10;
RIGHT(id, 5)
aaaaa
aaaab
aaaac
INSERT INTO big_ok2 VALUES (REPEAT('a', 1072), CONCAT(REPEAT('a', 1999), 'c'));
INSERT INTO big_ok2 VALUES (REPEAT('a', 1072), CONCAT(REPEAT('a', 1999), 'b'));
INSERT INTO big_ok2 VALUES (REPEAT('a', 1072), CONCAT(REPEAT('a', 1999), 'a'));
SELECT RIGHT(id2, 5) FROM big_ok2 FORCE INDEX (PRIMARY) ORDER BY id ASC, id2 ASC LIMIT 10;
RIGHT(id2, 5)
aaaaa
aaaab
aaaac
SELECT RIGHT(id2, 5) FROM big_ok2 IGNORE INDEX (PRIMARY) ORDER BY id ASC, id2 ASC LIMIT 10;
RIGHT(id2, 5)
aaaaa
aaaab
aaaac
CREATE TABLE a (id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY);
INSERT INTO a () VALUES ();
CREATE PROCEDURE dowhile()
BEGIN
DECLARE v1 INT DEFAULT 1;
WHILE v1 < 15 DO 
INSERT INTO a SELECT NULL FROM a;
SET v1 = v1 + 1;
END WHILE;
END;
|
CREATE TABLE big1 (id VARBINARY(3070) NOT NULL, PRIMARY KEY (id)) ENGINE=InnoDB;
CREATE TABLE big2 (id VARBINARY(3070) NOT NULL, PRIMARY KEY (id)) ENGINE=InnoDB;
CALL dowhile();
INSERT INTO big1 SELECT * FROM a;
INSERT INTO big2 SELECT * FROM a;
SET session optimizer_switch='duplicateweedout=off,materialization=on';
EXPLAIN SELECT * FROM big1 WHERE id IN (SELECT id FROM big2 IGNORE INDEX (PRIMARY)) ORDER BY id ASC LIMIT 10;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	<subquery2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	100.00	Using temporary; Using filesort
1	SIMPLE	big1	NULL	eq_ref	PRIMARY	PRIMARY	3072	<subquery2>.id	1	100.00	Using index
2	MATERIALIZED	big2	NULL	ALL	NULL	NULL	NULL	NULL	16384	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`big1`.`id` AS `id` from `test`.`big1` semi join (`test`.`big2` IGNORE INDEX (PRIMARY)) where (`test`.`big1`.`id` = `<subquery2>`.`id`) order by `test`.`big1`.`id` limit 10
SELECT * FROM big1 WHERE id IN (SELECT id FROM big2 IGNORE INDEX (PRIMARY)) ORDER BY id ASC LIMIT 10;
id
1
10000
10001
10002
10003
10004
10005
10006
10007
10008
DROP TABLE big_ok;
DROP TABLE big_ok2;
DROP TABLE big1;
DROP TABLE big2;
DROP TABLE a;
DROP PROCEDURE dowhile;
