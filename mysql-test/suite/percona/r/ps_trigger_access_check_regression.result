CREATE USER 'logger'@'%' IDENTIFIED BY '';
CREATE USER 'user'@'%' IDENTIFIED BY '';
CREATE DATABASE test1;
USE test1;
CREATE TABLE logger_internal (data VARCHAR(100));
INSERT INTO logger_internal SET data = 'secret';
GRANT ALL PRIVILEGES ON logger_internal TO 'logger'@'%';
CREATE TABLE forbidden_for_everyone (data VARCHAR(100));
INSERT INTO forbidden_for_everyone SET data = '______';
CREATE TABLE log (val VARCHAR(100));
GRANT ALL PRIVILEGES ON log TO 'logger'@'%';
# -----------------------------------------------------------------------
# 1. Trigger SELECTs a table that 'user' can't access, but 'logger' can.
#
CREATE TABLE data (val VARCHAR(100));
INSERT INTO data (val) VALUES ('original-data');
GRANT ALL PRIVILEGES ON data TO 'user'@'%';
GRANT TRIGGER ON data TO 'logger'@'%';
CREATE DEFINER = 'logger'@'%' TRIGGER trg
AFTER UPDATE ON data
FOR EACH ROW
INSERT INTO log (val)
(SELECT CONCAT('trg/1/', data) FROM logger_internal LIMIT 1);
USE test1;
UPDATE data SET val = 'new-data';
PREPARE s FROM 'UPDATE data SET val = \'new-data\'';
EXECUTE s;
# -----------------------------------------------------------------------
# 2. Trigger SELECTs something both 'user' and 'logger' cannot read.
#
DROP TABLE data;
CREATE TABLE data (val VARCHAR(100));
INSERT INTO data (val) VALUES ('original-data');
GRANT ALL PRIVILEGES ON data TO 'user'@'%';
GRANT TRIGGER ON data TO 'logger'@'%';
CREATE DEFINER = 'logger'@'%' TRIGGER trg
AFTER UPDATE ON data
FOR EACH ROW
INSERT INTO log (val)
(SELECT CONCAT('trg/2/', data) FROM forbidden_for_everyone LIMIT 1);
UPDATE data SET val = 'new-data';
ERROR 42000: SELECT command denied to user 'logger'@'%' for table 'forbidden_for_everyone'
PREPARE s FROM 'UPDATE data SET val = \'new-data\'';
EXECUTE s;
ERROR 42000: SELECT command denied to user 'logger'@'%' for table 'forbidden_for_everyone'
# -----------------------------------------------------------------------
# 3. Trigger uses OLD.val, but definer has no SELECT priviledge.
#
DROP TABLE data;
CREATE TABLE data (val VARCHAR(100));
INSERT INTO data (val) VALUES ('original-data');
GRANT ALL PRIVILEGES ON data TO 'user'@'%';
GRANT TRIGGER ON data TO 'logger'@'%';
CREATE DEFINER = 'logger'@'%' TRIGGER trg
AFTER UPDATE ON data
FOR EACH ROW
INSERT INTO log (val) (SELECT CONCAT('trg/3/', OLD.val));
UPDATE data SET val = 'new-data';
ERROR 42000: SELECT command denied to user 'logger'@'%' for column 'val' in table 'data'
PREPARE s FROM 'UPDATE data SET val = \'new-data\'';
EXECUTE s;
ERROR 42000: SELECT command denied to user 'logger'@'%' for column 'val' in table 'data'
# -----------------------------------------------------------------------
# 4. Before-update trigger tries to set new value, but has no UPDATE privilege.
#
DROP TABLE data;
CREATE TABLE data (val VARCHAR(100));
INSERT INTO data (val) VALUES ('original-data');
GRANT ALL PRIVILEGES ON data TO 'user'@'%';
GRANT TRIGGER ON data TO 'logger'@'%';
CREATE DEFINER = 'logger'@'%' TRIGGER trg
BEFORE UPDATE ON data
FOR EACH ROW
SET NEW.val = 'str';
UPDATE data SET val = 'new-data';
ERROR 42000: UPDATE command denied to user 'logger'@'%' for column 'val' in table 'data'
PREPARE s FROM 'UPDATE data SET val = \'new-data\'';
EXECUTE s;
ERROR 42000: UPDATE command denied to user 'logger'@'%' for column 'val' in table 'data'
# -----------------------------------------------------------------------
# 5. Definer gets TRIGGER priviledge revoked after trigger definition.
#
DROP TABLE data;
CREATE TABLE data (val VARCHAR(100));
INSERT INTO data (val) VALUES ('original-data');
GRANT ALL PRIVILEGES ON data TO 'user'@'%';
GRANT TRIGGER ON data TO 'logger'@'%';
CREATE DEFINER = 'logger'@'%' TRIGGER trg
AFTER UPDATE ON data
FOR EACH ROW
INSERT INTO log (val)
(SELECT CONCAT('trg/5/', data) FROM logger_internal LIMIT 1);
REVOKE TRIGGER ON data FROM 'logger'@'%';
UPDATE data SET val = 'new-data';
ERROR 42000: TRIGGER command denied to user 'logger'@'%' for table 'data'
PREPARE s FROM 'UPDATE data SET val = \'new-data\'';
EXECUTE s;
ERROR 42000: TRIGGER command denied to user 'logger'@'%' for table 'data'
# -----------------------------------------------------------------------
SELECT * FROM log;
val
trg/1/secret
trg/1/secret
DROP DATABASE test1;
DROP USER user;
DROP USER logger;
