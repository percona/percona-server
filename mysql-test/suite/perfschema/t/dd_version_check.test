
--source include/have_debug.inc

--disable_query_log

--disable_warnings
drop table if exists test.pfs_published_schema;
drop table if exists test.pfs_check_table;
drop procedure if exists test.pfs_check_proc;
--enable_warnings

--echo "Checking the data dictionary properties ..."

SET SESSION debug= '+d,skip_dd_table_access_check';
SELECT SUBSTRING_INDEX(SUBSTRING(properties, LOCATE('PS_VERSION', properties), 30), ';', 1)
  into @actual_dd_version_tag
  FROM mysql.dd_properties;
SET SESSION debug= '-d,skip_dd_table_access_check';

SELECT @actual_dd_version_tag as "DATA DICTIONARY TAG";

SELECT SUBSTRING(@actual_dd_version_tag, 12) into @actual_dd_version;
SELECT @actual_dd_version as "DATA DICTIONARY VERSION";

SET @old_group_concat_max_len = @@group_concat_max_len;

# We need 1700 rows of varchar(64) concatenated
SET group_concat_max_len = 200000;

create table test.pfs_published_schema
  (version varchar(20) not null,
   pfs_dd_version integer not null,
   signature varchar(64) not null,
   primary key (version),
   unique key(pfs_dd_version));

#
# MAINTAINER:
#
# ONCE A RELEASE IS PUBLISHED,
# DO NOT EVER CHANGE THE SIGNATURES HERE.
#
# The whole point of this MTR test script is that
# it will fail if any change to the performance schema
# database structure is detected, acting as a fail safe.
#
# If a change was intended, then:
# - (a) Go in storage/perfschema/pfs_dd_version.h,
# find the declaration of variable PFS_DD_VERSION,
# and create a new version number for this release
# - (b) Add a row in table test.pfs_published_schema
# for the new schema published, using the new PFS_DD_VERSION
# and the signature of the new schema.
#
# (a) will ensure that upgrades from old releases
# will notice the schema change, and upgrade
# the performance_schema structure in the data dictionary accordingly.
# (b) will ensure this test pass again without the SIGNAL complaining.
#
# BEWARE, failure to do (a) when doing (b) alone
# **WILL** result in broken upgrades,
# with a server binary using a new table definition
# in the code and an old, different, table definition
# in the data dictionary found on disk.
#
# This test is designed to be a reminder to do (a)
# by detecting differences in (b)
#
# If you fail to properly update PFS_DD_VERSION,
# git blame will find you.
#

# Keeping track of all signatures published in GA ...

insert into test.pfs_published_schema
 values("MySQL 8.0.17", 80017,
        "b77ece4deaa3c4676d817ed98c3cc33f5b1a08a001bf610a7d02fb52a42b613d");

insert into test.pfs_published_schema
 values("MySQL 8.0.172", 800172,
        "4b2535cee3a558d09b93caaa1fe9021da9e758ffcacd0922bea81ae9799175dc");

insert into test.pfs_published_schema
 values("MySQL 8.0.18", 80018,
        "1d6747d842bb2483c860cd7b28e886bdc6111ff61fd6b4d07e367aa7b3e9d9bf");

insert into test.pfs_published_schema
 values("MySQL 8.0.19", 80019,
        "f58dba20c4234c34cedfcacd3b9a295dcac77a09b79d5f41d5f740878f272d4d");

insert into test.pfs_published_schema
 values("MySQL 8.0.20", 80020,
        "a9aa0ab4a94ca91622145d735e60bbb03577616970351032d3194d8bfd7a69c7");

insert into test.pfs_published_schema
 values("MySQL 8.0.21", 80021,
        "112972e1f7d2b3a351a14979ecc3b419efc81e79dc029078a3a94955be218e5a");

insert into test.pfs_published_schema
 values("MySQL 8.0.22", 80022,
        "b9000c4a106a8351d2274028965f19d7902c3ccb9faa9407603c9258812f77fe");

insert into test.pfs_published_schema
 values("MySQL 8.0.23", 80023,
        "1ac8f01232e37285ef6c44b400ca0f3a3685a89d8224e4cfa2dc853fb655c50f");

insert into test.pfs_published_schema
 values("MySQL 8.0.24", 80024,
        "223d896eddc7fc8b25b622edbc714a3493ceffe4dd694595c833e693e19db41f");

insert into test.pfs_published_schema
 values("MySQL 8.0.25", 80025,
        "a35216aad234f74054935422bfc301ae17a1e612a11763040da7343e101b3ba5");

insert into test.pfs_published_schema
 values("MySQL 8.0.27", 80027,
        "788ba22c99444621d371a6fd2aa5e6672fb5f2241c322421c5072e600720538a");

insert into test.pfs_published_schema
 values("MySQL 8.0.28", 80028,
        "13b60d68e6263e02af75b7385dae1f05168eab2e0256913e9a6d4f7a0316b8cc");

insert into test.pfs_published_schema
 values("MySQL 8.0.29", 80029,
        "0d7d375b1377cb3855228fe83462772ccf96d5e5e52b663f3f9a59e1509b2c8d");

insert into test.pfs_published_schema
 values("MySQL 8.0.30", 80030,
        "0e72d1064e73b26ab21417dd633a2b79eab38292f7f8dfdf34b2cdf9871f1783");

insert into test.pfs_published_schema
 values("MySQL 8.0.31", 80031,
        "8b12e692226585c848967de7528b3bc57a08029ba4012f0e1afa9a15aee8ac60");

insert into test.pfs_published_schema
 values("MySQL 8.0.32", 80032,
        "8b775d397a86188b9fb6d3da2c138b65c62aa4e3d268a584ed6c8cde47fc57a0");

insert into test.pfs_published_schema
 values("MySQL 8.0.33", 80033,
        "fb9c8d88611c3d935e3d78daff4f3faf2595896a342dd2c121b3081131df593f");

insert into test.pfs_published_schema
 values("MySQL 8.0.40", 80040,
        "b56610322b2a64779b7cfe96976cd0b5c6542a098bec88dacb0bb8a1fe7be458");

insert into test.pfs_published_schema
 values("MySQL 8.2.0", 80200,
        "a0a5ec52fc2e8aaf0fde0d304c3647ef54ea34cbe9e286c72e9874ca7f0815e6");

# MySQL 8.3.0 was incorrectly published with PFS_DD_VERSION 80200,
# which is a bug.
# The tooling now detects this, to prevent similar bugs:
#
# --error ER_DUP_ENTRY
# insert into test.pfs_published_schema
#  values("MySQL 8.3.0", 80200,
#         "This should have been caught in 8.3.0");

# Correct entry
insert into test.pfs_published_schema
 values("MySQL 8.3.0", 80300,
        "465e86aaeee818c0aeeef15780883765c9d2d758b41499c0e5165fa725d9e045");

insert into test.pfs_published_schema
 values("MySQL 8.4.3", 80403,
        "ffec29dba39f7ebbd15ace21cafbd8784312834fbb1226504d435af0c1dddcd5");

create table test.pfs_check_table
  (id int NOT NULL AUTO_INCREMENT,
   t text NOT NULL,
   row_hash varchar(64) default null,
   PRIMARY KEY (id));

delimiter $$;

create procedure test.pfs_check_proc(actual_dd_version integer)
begin
  declare whole_schema longtext;
  declare max_length int;
  declare found_signature varchar(64);
  declare found_version varchar(20);
  declare found_dd_version int;

  insert into test.pfs_check_table(t)
    select concat(CATALOG_NAME, "-",
                  SCHEMA_NAME, "-",
                  DEFAULT_CHARACTER_SET_NAME, "-",
                  DEFAULT_COLLATION_NAME, "-",
                  ifnull(SQL_PATH, "NULL"))
    from INFORMATION_SCHEMA.SCHEMATA
    where SCHEMA_NAME = "performance_schema";

  insert into test.pfs_check_table(t)
    select concat(TABLE_CATALOG, "-",
                  TABLE_SCHEMA, "-",
                  TABLE_NAME, "-",
                  TABLE_TYPE, "-",
                  ENGINE, "-",
                  VERSION, "-",
                  ROW_FORMAT, "-",
                  ifnull(AUTO_INCREMENT, "no_auto_increment"), "-",
                  ifnull(TABLE_COLLATION, "no_collation"), "-",
                  ifnull(CREATE_OPTIONS, "no_create_options"), "-",
                  ifnull(TABLE_COMMENT, "no_table_comments"))
    from INFORMATION_SCHEMA.TABLES
    where TABLE_SCHEMA = "performance_schema"
    order by TABLE_NAME;

  insert into test.pfs_check_table(t)
    select concat(TABLE_CATALOG, "-",
                  TABLE_SCHEMA, "-",
                  TABLE_NAME, "-",
                  COLUMN_NAME, "-",
                  ORDINAL_POSITION, "-",
                  ifnull(COLUMN_DEFAULT, "no_default"), "-",
                  IS_NULLABLE, "-",
                  COLUMN_TYPE, "-",
                  ifnull(CHARACTER_SET_NAME, "no_charset"), "-",
                  ifnull(COLLATION_NAME, "no_collation"), "-",
                  ifnull(COLUMN_COMMENT, "no_comment"))
    from INFORMATION_SCHEMA.COLUMNS
    where TABLE_SCHEMA = "performance_schema"
    order by TABLE_NAME, ORDINAL_POSITION;

  insert into test.pfs_check_table(t)
    select concat(TABLE_CATALOG, "-",
                  TABLE_SCHEMA, "-",
                  TABLE_NAME, "-",
                  NON_UNIQUE, "-",
                  INDEX_SCHEMA, "-",
                  INDEX_NAME, "-",
                  SEQ_IN_INDEX, "-",
                  COLUMN_NAME, "-",
                  NULLABLE, "-",
                  INDEX_TYPE, "-",
                  COMMENT)
    from INFORMATION_SCHEMA.STATISTICS
    where TABLE_SCHEMA = "performance_schema"
    order by TABLE_NAME, INDEX_NAME, SEQ_IN_INDEX;

/*
  There is a lot of data to crunch,
  doing an intermediate checksum by row.
*/

  update test.pfs_check_table
    set row_hash = sha2(t, 256);

/*
  And then doing a checksum of all rows.
*/

  select group_concat(row_hash order by id)
    from test.pfs_check_table
    into whole_schema;

  select length(whole_schema) into max_length;

  if (max_length = @@group_concat_max_len)
  then
    signal sqlstate "50000" set message_text = "Failed to check, whole_schema string truncated";
  end if;

  select SHA2(whole_schema, 256) into found_signature;

  select version, pfs_dd_version
         into found_version, found_dd_version
    from test.pfs_published_schema
    where signature = found_signature;

  if found_version is null
  then
    begin
      /* Limitation on SIGNAL */
      declare full_msg text;

      /*
        Booby trap: some people do not analyze test failures and
        blindly mtr --record a test to make it 'pass'.
        Make sure, by using now(), that this will not happen.
        See the comments in the MAINTAINER section of this test.
      */

      select "YOU MUST READ THE MAINTAINER NOTES IN THIS TEST."
        as MAINTAINER_ACTION_NEEDED, NOW() as "NOW";

      select concat("Unknown signature ",
                    found_signature,
                    ", fix PFS_DD_VERSION now (",
                    now(),
                    ")") into full_msg;

      signal sqlstate "50000" set message_text = full_msg;
    end;
  end if;

  if (actual_dd_version != found_dd_version)
  then
    begin
      declare full_msg text;

      /*
        Booby trap: actually verify that the PFS_DD_VERSION
        declared in table test.pfs_published_schema corresponds to reality,
        that is, that is corresponds to the PS_VERSION
        contained in the data dictionary on disk.
      */

      select "YOU MUST READ THE MAINTAINER NOTES IN THIS TEST."
        as MAINTAINER_ACTION_NEEDED, NOW() as "NOW";

      select concat("Incoherent PFS_DD_VERSION ",
                    found_dd_version,
                    ", fix PFS_DD_VERSION now (",
                    now(),
                    ")") into full_msg;

      signal sqlstate "50000" set message_text = full_msg;
    end;
  end if;

  select concat("The tables in the performance_schema were last changed in ",
                found_version, ", with a PFS_DD_VERSION = ",
                found_dd_version) as "CHECK STATUS";

end
$$

delimiter ;$$

--echo "Checking the performance schema database structure ..."

call test.pfs_check_proc(@actual_dd_version);

# Debug
# select count(*) from test.pfs_check_table;

SET group_concat_max_len = @old_group_concat_max_len;

drop table test.pfs_published_schema;
drop table test.pfs_check_table;
drop procedure test.pfs_check_proc;

--enable_query_log
