# === Purpose ===
#
# Test to verify that server config value assigned to --replica-enable-event
# is properly handled during server startup.
#
# === References ===
#
# PS-6002: Create/alter event state to keep enabled on replicas

# Test in this file is binlog format agnostic, thus no need
# to rerun it for every format.
--source include/big_test.inc
--source include/have_binlog_format_row.inc
--source include/master-slave.inc
--source include/rpl_connection_slave.inc

# Shut down the replica server.
--let $rpl_server_number = 2
--source include/rpl_stop_server.inc

# Negative case 1 : Empty
--let $wild_pattern=
--let $expect_abort= yes
--let $reason= Cannot process empty pattern
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Negative case 2 : No DB
--let $wild_pattern=.event%
--let $expect_abort= yes
--let $reason= The pattern doesn't follow the format <db_pattern>.<event_pattern>
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Negative case 3 : No Event
--let $wild_pattern=db%.
--let $expect_abort= yes
--let $reason= The pattern doesn't follow the format <db_pattern>.<event_pattern>
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Negative case 4 : No dot separator
--let $wild_pattern=event
--let $expect_abort= yes
--let $reason= The pattern doesn't follow the format <db_pattern>.<event_pattern>
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Negative case 5 : Multiple dots
--let $wild_pattern=db%.event%.random
--let $expect_abort= yes
--let $reason= The pattern has multiple dot characters. Please restart with format <db_pattern>.<event_pattern>
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Negative case 6 : Channel separator
--let $wild_pattern=channel:db%.event%
--let $expect_abort= yes
--let $reason= This server doesn't support per-channel --replica-enable-event feature
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Positive case 1 : DB.EVENT
--let $wild_pattern=db%.event1%
--let $expect_abort= no
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Positive case 2 : DB.EVENT
--let $wild_pattern=d%b%.%event%
--let $expect_abort= no
--source extra/rpl_tests/rpl_enable_event_cmd_line_validation.inc

# Restart the replica server and start the applier thread.
--let $rpl_server_number= 2
--let $rpl_server_parameters= --replica-enable-event=db%.event1% --replica-enable-event=d%b%.%event%
--source include/rpl_start_server.inc
--source include/start_slave.inc

# Verify that the values assigned to --replica-enable-event are observable
# through SHOW GLOBAL VARIABLES command.
#
# Due to the way the MTR processes the escape characters, we cannot perform
# validation in MTR using
#
# --let $result= SELECT VALRIABLE_VALUE = "\"db%.event1%\"" ...
# --let $assert_cond = $result = 1
# --source include/assert.inc
#
# So, we instead use HEX() functionality on the server side to validate our
# assumption.
SHOW GLOBAL VARIABLES LIKE '%replica_enable_event%';
SELECT VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'replica_enable_event%';

SET @hex_expected= HEX("db%.event1%,d%b%.%event%");
SELECT HEX(VARIABLE_VALUE) FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'replica_enable_event%' INTO @hex_value;
--let $assert_text= Assert that perfschema query reports the list contents in the CSV format.
--let $assert_cond= `SELECT @hex_expected = @hex_value`
--source include/assert.inc

--source include/rpl_end.inc
