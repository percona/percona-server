###############################################################################
# Validate several scenarios on the UDF:
#   asynchronous_connection_failover_reset
#
# Test:
#   0. This test requires two servers
#   1. Create a replication channel ch1 to replicate from
#      server2 to server1.
#   2. Try to reset asynchronous reconnection configuration with
#      invalid parameters.
#      It will not be allowed.
#   3. Try to reset asynchronous reconnection configuration while
#      channels are running.
#      It will not be allowed.
#   4. Reset asynchronous reconnection configuration while
#      channels are stopped.
#      It will be allowed.
#   5. Reset asynchronous reconnection configuration while
#      channels are stopped for managed source.
#      It will be allowed.
#   6. Clean up.
###############################################################################
--source include/have_slave_repository_type_table.inc
--let $rpl_skip_start_slave= 1
--source include/master-slave.inc

--echo
--echo ############################################################
--echo # 1. Create a replication channel ch1 to replicate from
--echo #    server2 to server1.

--let $rpl_connection_name= slave
--source include/rpl_connection.inc

--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1, SOURCE_CONNECTION_AUTO_FAILOVER=1 FOR CHANNEL 'ch1'
--let $rpl_channel_name='ch1'
--source include/start_slave.inc



--echo
--echo ############################################################
--echo # 2. Try to reset asynchronous reconnection configuration with
--echo #    invalid parameters.
--echo #    It will not be allowed.

--error ER_CANT_INITIALIZE_UDF
SELECT asynchronous_connection_failover_reset(1);


--error ER_CANT_INITIALIZE_UDF
SELECT asynchronous_connection_failover_reset("");


--echo
--echo ############################################################
--echo # 3. Try to reset asynchronous reconnection configuration while
--echo #    channels are running.
--echo #    It will not be allowed.
--error ER_CANT_INITIALIZE_UDF
SELECT asynchronous_connection_failover_reset();

--let $rpl_channel_name='ch1'
--source include/stop_slave_sql.inc

--let $assert_text= Verify replica_monitor thread is running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 1;
--source include/assert.inc

--error ER_CANT_INITIALIZE_UDF
SELECT asynchronous_connection_failover_reset();


--echo
--echo ############################################################
--echo # 4. Reset asynchronous reconnection configuration while
--echo #    channels are stopped.
--echo #    It will be allowed.
--let $rpl_channel_name='ch1'
--source include/stop_slave_io.inc

--let $assert_text= Verify replica_monitor thread is not running
--let $assert_cond= "[select count(*) FROM performance_schema.threads where NAME=\"thread/sql/replica_monitor\"]" = 0;
--source include/assert.inc

SELECT asynchronous_connection_failover_reset();

# Add a source.
SELECT asynchronous_connection_failover_add_source('ch1', '127.0.0.1', 3100);

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 1
--source include/assert.inc

SELECT asynchronous_connection_failover_reset();

--let $assert_text= 'There are 0 rows in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 0
--source include/assert.inc


--echo
--echo ############################################################
--echo # 5. Reset asynchronous reconnection configuration while
--echo #    channels are stopped for managed source.
--echo #    It will be allowed.
# Add a managed source.
--let $uuid_val= `SELECT UUID()`
--replace_result $uuid_val UUID_VAL
--eval SELECT asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', "$uuid_val", '127.0.0.1', 3100, '', 80, 60)

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover_managed'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover_managed, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 1
--source include/assert.inc


SELECT asynchronous_connection_failover_reset();

--let $assert_text= 'There are 0 rows in performance_schema.replication_asynchronous_connection_failover_managed'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover_managed, count, 1] = 0
--source include/assert.inc

--let $assert_text= 'There are 0 rows in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 0
--source include/assert.inc


--echo
--echo ############################################################
--echo # 6. Clean up.
--let $rpl_channel_name='ch1'
--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--let $rpl_skip_sync = 1
--source include/rpl_end.inc
