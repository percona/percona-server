#
# Test heap tables with variable-sized records.
#

set @@session.max_heap_table_size=16*1024*1024;

--error 1234
CREATE TABLE t1 (a INT NOT NULL, b VARCHAR(400), c INT, PRIMARY KEY (a), KEY (c)) ENGINE=HEAP COMMENT="testing heaps" KEY_BLOCK_SIZE=128 CHARACTER SET=latin1;

--error 1234
CREATE TABLE t1 (a INT NOT NULL, b INT, c VARCHAR(400), PRIMARY KEY (a), KEY (b)) ENGINE=HEAP COMMENT="testing heaps" KEY_BLOCK_SIZE=4 CHARACTER SET=latin1;

CREATE TABLE t1 (a INT NOT NULL, b INT, c VARCHAR(400), d VARCHAR(400), PRIMARY KEY (a), KEY (b)) ENGINE=HEAP COMMENT="testing heaps" KEY_BLOCK_SIZE=24 CHARACTER SET=latin1;

--replace_column 6 X 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
--query_vertical SHOW TABLE STATUS LIKE "t1"

INSERT INTO t1 VALUES (1,1,'012',NULL), (2,2,'0123456789',NULL), (3,3,'012345678901234567890123456789',NULL), (4,4,NULL,'0123456789012345678901234567890123456789012345678901234567890123456789');
SELECT * FROM t1;

DELETE FROM t1 WHERE a = 3;
SELECT * FROM t1;

INSERT INTO t1 VALUES (5,5,NULL,'0123'), (6,6,NULL,'0123');
SELECT * FROM t1;

UPDATE t1 SET c = '012345678901234567890123456789' WHERE a = 2;
SELECT * FROM t1;

UPDATE t1 SET c = '0123456789' WHERE a = 2;
SELECT * FROM t1;

INSERT INTO t1 VALUES (7,7,'0123',NULL), (8,8,'0123',NULL);
SELECT * FROM t1;

--replace_column 6 X 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
--query_vertical SHOW TABLE STATUS LIKE "t1"
ALTER TABLE t1 KEY_BLOCK_SIZE = 0;
--replace_column 6 X 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
--query_vertical SHOW TABLE STATUS LIKE "t1"
ALTER TABLE t1 ROW_FORMAT = DYNAMIC;
--replace_column 6 X 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
--query_vertical SHOW TABLE STATUS LIKE "t1"
ALTER TABLE t1 KEY_BLOCK_SIZE = 128, MAX_ROWS = 10001;
--replace_column 6 X 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
--query_vertical SHOW TABLE STATUS LIKE "t1"

SELECT * FROM t1;

DELETE FROM t1;
SELECT * FROM t1;

let $1=10001;

call mtr.add_suppression("The table 't1' is full");

disable_query_log;

while ($1) 
{

  eval INSERT INTO t1 VALUES ($1,$1,$1,$1);

  dec $1;

}
enable_query_log;

SELECT COUNT(*) FROM t1;

--error 1114
INSERT INTO t1 VALUES (100000,100000,NULL,'0123'), (100000,100000,NULL,'0123');

--replace_column 6 X 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
--query_vertical SHOW TABLE STATUS LIKE "t1"
SELECT COUNT(*) FROM t1;

SET @@session.max_heap_table_size=default;

DROP TABLE t1;

--echo #
--echo # Bug 1731483: MEMORY storage engine incorrectly allows BLOB columns before indexed columns
--echo #

--error ER_TABLE_CANT_HANDLE_BLOB
CREATE TABLE t1 (a BLOB, b INT PRIMARY KEY) ENGINE=MEMORY;

--error ER_TABLE_CANT_HANDLE_BLOB
CREATE TABLE t1 (a TEXT, b INT PRIMARY KEY) ENGINE=MEMORY;

--error ER_TABLE_CANT_HANDLE_BLOB
CREATE TABLE t1 (a INT PRIMARY KEY, b BLOB, c INT, KEY c(c)) ENGINE=MEMORY;

--error ER_TABLE_CANT_HANDLE_BLOB
CREATE TABLE t1 (a INT PRIMARY KEY, b TEXT, c INT, KEY c(c)) ENGINE=MEMORY;

CREATE TABLE t1 (a BLOB, b INT) ENGINE=MEMORY;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD INDEX idx_b (b);
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD PRIMARY KEY (b);
DROP TABLE t1;

CREATE TABLE t1 (a TEXT, b INT) ENGINE=MEMORY;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD INDEX idx_b (b);
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD PRIMARY KEY (b);
DROP TABLE t1;

CREATE TABLE t1 (a INT PRIMARY KEY, b BLOB, c INT) ENGINE=MEMORY;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD INDEX c (c);
DROP TABLE t1;

CREATE TABLE t1 (a INT PRIMARY KEY, b TEXT, c INT) ENGINE=MEMORY;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD INDEX c (c);
DROP TABLE t1;

CREATE TABLE t1 (a BLOB, b INT PRIMARY KEY) ENGINE=InnoDB;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ENGINE=MEMORY;
DROP TABLE t1;

CREATE TABLE t1 (a TEXT, b INT PRIMARY KEY) ENGINE=InnoDB;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ENGINE=MEMORY;
DROP TABLE t1;

CREATE TABLE t1 (a INT PRIMARY KEY, b BLOB, c INT, KEY c(c)) ENGINE=InnoDB;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ENGINE=MEMORY;
DROP TABLE t1;

CREATE TABLE t1 (a INT PRIMARY KEY, b TEXT, c INT, KEY c(c)) ENGINE=InnoDB;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ENGINE=MEMORY;
DROP TABLE t1;

CREATE TABLE t1 (a INT PRIMARY KEY, b BLOB, c TEXT) ENGINE=MEMORY;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 MODIFY b BLOB FIRST;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 MODIFY c TEXT FIRST;

DROP TABLE t1;

--error ER_TABLE_CANT_HANDLE_BLOB
CREATE TABLE t1 (a INT, b BLOB, c INT, PRIMARY KEY(a, c)) ENGINE=MEMORY;

--error ER_TABLE_CANT_HANDLE_BLOB
CREATE TABLE t1 (a INT, b TEXT, c INT, PRIMARY KEY(c, a)) ENGINE=MEMORY;

CREATE TABLE t1 (a INT, b TEXT, c INT) ENGINE=MEMORY;
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD PRIMARY KEY (a, c);
--error ER_TABLE_CANT_HANDLE_BLOB
ALTER TABLE t1 ADD INDEX idx (c, a);
DROP TABLE t1;

--echo #
--echo # PS-3940: Engine can be changed to innodb and back
--echo #

CREATE TABLE `t1` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `json_column` TEXT,
  PRIMARY KEY (`id`)
) ENGINE=MEMORY;
# no key_block_size displayed even before the bugfix
SHOW CREATE TABLE t1;

ALTER TABLE  t1 ENGINE=INNODB;
ALTER TABLE  t1 ENGINE=MEMORY;

--echo #
--echo # PS-3943: Adding additional columns won't change the key_block size
--echo #

ALTER TABLE t1 MODIFY json_column BLOB;
# a key_block_size of 256 appeared without the bugfix
SHOW CREATE TABLE t1;
ALTER TABLE t1 MODIFY json_column TEXT;
# a key_block_size of 256+16 appeared without the bugfix
SHOW CREATE TABLE t1;

ALTER TABLE t1 MODIFY json_column BLOB;
ALTER TABLE t1 MODIFY json_column TEXT;
# a key_block_size of 256+3*16 appeared without the bugfix
SHOW CREATE TABLE t1;

DROP TABLE t1;

--echo #
--echo # PS-3943: Explicit key_block_size is kept and doesn't change
--echo #
CREATE TABLE `t1` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `json_column` TEXT,
  PRIMARY KEY (`id`)
) ENGINE=MEMORY KEY_BLOCK_SIZE=200;
SHOW CREATE TABLE t1;
ALTER TABLE  t1 ENGINE=INNODB KEY_BLOCK_SIZE=0;
ALTER TABLE  t1 ENGINE=MEMORY;

ALTER TABLE t1 MODIFY json_column BLOB;
# a key_block_size changed to 200+16 without the bugfix
SHOW CREATE TABLE t1;
ALTER TABLE t1 MODIFY json_column TEXT;
# a key_block_size changed to 200+2*16 without the bugfix
SHOW CREATE TABLE t1;

DROP TABLE t1;
