#
# Introduce SEQUENCE_TABLE() table-level SQL function
# https://jira.percona.com/browse/PS-5764
#

--echo ###
--echo ### Checking invalid SEQUENCE_TABLE() arguments
--echo ###
--echo # no arguments
--error ER_PARSE_ERROR
SELECT * FROM SEQUENCE_TABLE() AS tt;

--echo # two arguments
--error ER_PARSE_ERROR
SELECT * FROM SEQUENCE_TABLE(1, 2) AS tt;

--echo ###
--echo ### Checking SEQUENCE_TABLE() without table alias
--echo ###
--error ER_TF_MUST_HAVE_ALIAS
SELECT * FROM SEQUENCE_TABLE(4);


--echo ###
--echo ### Simple usage scenarios
--echo ###
--let $st_field_expression = value
--let $st_table_expression = SEQUENCE_TABLE(0) AS tt
--let $st_expected_number_of_records = 0
--let $st_expected_signature =
--source include/percona_sequence_table.inc

--let $st_table_expression = SEQUENCE_TABLE(1) AS tt
--let $st_expected_number_of_records = 1
--let $st_expected_signature = 0
--source include/percona_sequence_table.inc

--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_expected_number_of_records = 4
--let $st_expected_signature = 0,1,2,3
--source include/percona_sequence_table.inc


--echo ###
--echo ### Checking SEQUENCE_TABLE() max records limit
--echo ###
SET @saved_tf_sequence_table_max_upper_bound = @@global.tf_sequence_table_max_upper_bound;

--disable_result_log
SELECT * FROM SEQUENCE_TABLE(@saved_tf_sequence_table_max_upper_bound) AS tt;
--enable_result_log

--error ER_SEQUENCE_TABLE_SIZE_LIMIT
SELECT * FROM SEQUENCE_TABLE(@saved_tf_sequence_table_max_upper_bound + 1) AS tt;

SET GLOBAL tf_sequence_table_max_upper_bound = @saved_tf_sequence_table_max_upper_bound + 1;

--disable_result_log
SELECT * FROM SEQUENCE_TABLE(@saved_tf_sequence_table_max_upper_bound + 1) AS tt;
--enable_result_log

--error ER_SEQUENCE_TABLE_SIZE_LIMIT
SELECT * FROM SEQUENCE_TABLE(@saved_tf_sequence_table_max_upper_bound + 2) AS tt;

SET GLOBAL tf_sequence_table_max_upper_bound = @saved_tf_sequence_table_max_upper_bound;

--echo ###
--echo ### Checking SEQUENCE_TABLE() upper bound value conversions
--echo ###
--echo # Negative numbers
--let $st_table_expression = SEQUENCE_TABLE(-1) AS tt
--let $st_expected_number_of_records = 0
--let $st_expected_signature =
--source include/percona_sequence_table.inc

--echo # NULL value
--let $st_table_expression = SEQUENCE_TABLE(NULL) AS tt
--let $st_expected_number_of_records = 0
--let $st_expected_signature =
--source include/percona_sequence_table.inc

--echo # Floating point numbers
--let $st_table_expression = SEQUENCE_TABLE(2.5) AS tt
--let $st_expected_number_of_records = 3
--let $st_expected_signature = 0,1,2
--source include/percona_sequence_table.inc

--let $st_table_expression = SEQUENCE_TABLE(0.15E1) AS tt
--let $st_expected_number_of_records = 2
--let $st_expected_signature = 0,1
--source include/percona_sequence_table.inc

--let $st_table_expression = SEQUENCE_TABLE(0.15E-1) AS tt
--let $st_expected_number_of_records = 0
--let $st_expected_signature =
--source include/percona_sequence_table.inc

--echo # String values
--let $st_table_expression = SEQUENCE_TABLE("") AS tt
--let $st_expected_number_of_records = 0
--let $st_expected_signature =
--source include/percona_sequence_table.inc

--let $st_table_expression = SEQUENCE_TABLE(" ") AS tt
--let $st_expected_number_of_records = 0
--let $st_expected_signature =
--source include/percona_sequence_table.inc

--let $st_table_expression = SEQUENCE_TABLE("2") AS tt
--let $st_expected_number_of_records = 2
--let $st_expected_signature = 0,1
--source include/percona_sequence_table.inc

--echo ###
--echo ### Checking SEQUENCE_TABLE() upper bound expressions
--echo ###
--echo # Session variables
SET @a = 4;
--let $st_table_expression = SEQUENCE_TABLE(@a) AS tt
--let $st_expected_number_of_records = 4
--let $st_expected_signature = 0,1,2,3
--source include/percona_sequence_table.inc

SET @a = 3;
--let $st_table_expression = SEQUENCE_TABLE(@a) AS tt
--let $st_expected_number_of_records = 3
--let $st_expected_signature = 0,1,2
--source include/percona_sequence_table.inc

--echo # Simple arithmetic expressions
SET @a = 2;
--let $st_table_expression = SEQUENCE_TABLE(@a * @a - 1) AS tt
--let $st_expected_number_of_records = 3
--let $st_expected_signature = 0,1,2
--source include/percona_sequence_table.inc

SET @a = 1;
--let $st_table_expression = SEQUENCE_TABLE(EXP(@a) - 1) AS tt
--let $st_expected_number_of_records = 2
--let $st_expected_signature = 0,1
--source include/percona_sequence_table.inc


--echo ###
--echo ### Checking SEQUENCE_TABLE() with WHERE clause
--echo ###
--echo # Point selection
--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_where = value = 1
--let $st_expected_number_of_records = 1
--let $st_expected_signature = 1
--source include/percona_sequence_table.inc


--echo # Range selection
--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_where = value > 1
--let $st_expected_number_of_records = 2
--let $st_expected_signature = 2,3
--source include/percona_sequence_table.inc

--echo # Every second record
--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_where = value %2 = 0
--let $st_expected_number_of_records = 2
--let $st_expected_signature = 0,2
--source include/percona_sequence_table.inc


--let $st_where =

--echo ###
--echo ### Selecting custom value expressions from SEQUENCE_TABLE()
--echo ###
--echo # Shifted values
--let $st_field_expression = value + 1
--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_expected_number_of_records = 4
--let $st_expected_signature = 1,2,3,4
--source include/percona_sequence_table.inc

--echo # Odd numbers
--let $st_field_expression = value * 2 + 1
--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_expected_number_of_records = 4
--let $st_expected_signature = 1,3,5,7
--source include/percona_sequence_table.inc

--echo # Reverse order
--let $st_field_expression = 7 - value
--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_expected_number_of_records = 4
--let $st_expected_signature = 7,6,5,4
--let $st_sort_order = DESC
--source include/percona_sequence_table.inc

--echo # Mapping with ELT()
--let $st_field_expression = ELT(value + 1, "a", "b", "c", "d")
--let $st_table_expression = SEQUENCE_TABLE(4) AS tt
--let $st_expected_number_of_records = 4
--let $st_expected_signature = a,b,c,d
--let $st_sort_order =
--source include/percona_sequence_table.inc

--echo ###
--echo ### Checking VIEWs based on SEQUENCE_TABLE()
--echo ###
CREATE VIEW v1 AS SELECT * FROM SEQUENCE_TABLE(4) AS tt;
SHOW CREATE VIEW v1;
--let $st_field_expression = value
--let $st_table_expression = v1
--let $st_expected_number_of_records = 4
--let $st_expected_signature = 0,1,2,3
--source include/percona_sequence_table.inc
DROP VIEW v1;


--echo ###
--echo ### Checking stored procedures / functions
--echo ###
--echo # Stored procedure
CREATE PROCEDURE p1(upper_bound BIGINT UNSIGNED) SELECT * FROM SEQUENCE_TABLE(upper_bound) AS tt;
CALL p1(4);
DROP PROCEDURE p1;

--echo # Stored function
delimiter |;
CREATE FUNCTION f1(upper_bound BIGINT UNSIGNED) RETURNS BIGINT UNSIGNED
BEGIN
  DECLARE res BIGINT UNSIGNED;
  SELECT SUM(value) INTO res FROM SEQUENCE_TABLE(upper_bound) AS tt;
  RETURN res;
END|
delimiter ;|
--let $assert_cond = "[SELECT f1(4)]" = 6
--let $assert_text = SUM(0, ..., 3) should be 6
--source include/assert.inc
SELECT f1(4);
DROP FUNCTION f1;


--echo ###
--echo ### Checking prepared statements
--echo ###
PREPARE stmt1 FROM 'SELECT * FROM SEQUENCE_TABLE(?) AS tt';
SET @a = 4;
EXECUTE stmt1 USING @a;
DEALLOCATE PREPARE stmt1;


--echo ###
--echo ### Checking SHOW CREATE TABLE
--echo ###
CREATE TABLE t1 AS SELECT value AS a FROM SEQUENCE_TABLE(3) AS tt;
SHOW CREATE TABLE t1;

--echo ###
--echo ### Checking table joins
--echo ###
--echo # Constant upper_bound
--let $st_field_expression = t1.a * 10 + value
--let $st_table_expression = t1, SEQUENCE_TABLE(3) AS tt
--let $st_expected_number_of_records = 9
--let $st_expected_signature = 0,1,2,10,11,12,20,21,22
--source include/percona_sequence_table.inc

--echo # Join with UNION-based row set
--let $st_field_expression = tt1.a * 10 + value
--let $st_table_expression = (SELECT 0 AS a UNION SELECT 1 UNION SELECT 2) AS tt1, SEQUENCE_TABLE(3) AS tt2
--let $st_expected_number_of_records = 9
--let $st_expected_signature = 0,1,2,10,11,12,20,21,22
--source include/percona_sequence_table.inc

--echo # Join with VALUES ROW-based row set
--let $st_field_expression = tt1.column_0 * 10 + value
--let $st_table_expression = (VALUES ROW(0), ROW(1), ROW(2)) AS tt1, SEQUENCE_TABLE(3) AS tt2
--let $st_expected_number_of_records = 9
--let $st_expected_signature = 0,1,2,10,11,12,20,21,22
--source include/percona_sequence_table.inc

--echo # Join with derived SELECT
--let $st_field_expression = tt1.a * 10 + value
--let $st_table_expression = (SELECT * FROM t1) AS tt1, SEQUENCE_TABLE(3) AS tt2
--let $st_expected_number_of_records = 9
--let $st_expected_signature = 0,1,2,10,11,12,20,21,22
--source include/percona_sequence_table.inc

--echo # Join with derived TABLE
--let $st_field_expression = tt1.a * 10 + value
--let $st_table_expression = (TABLE t1) AS tt1, SEQUENCE_TABLE(3) AS tt2
--let $st_expected_number_of_records = 9
--let $st_expected_signature = 0,1,2,10,11,12,20,21,22
--source include/percona_sequence_table.inc

--echo # Dependent upper_bound
--let $st_field_expression = t1.a * 10 + value
--let $st_table_expression = t1, SEQUENCE_TABLE(a + 1) AS tt
--let $st_expected_number_of_records = 6
--let $st_expected_signature = 0,10,11,20,21,22
--source include/percona_sequence_table.inc


--echo ###
--echo ### Checking for various forbidden upper_bound constructs
--echo ###
--echo # Derived SELECT
--error ER_WRONG_ARGUMENTS
SELECT * FROM SEQUENCE_TABLE((SELECT 1)) AS tt;

--echo # Aggregate function
--error ER_INVALID_GROUP_FUNC_USE
SELECT * FROM SEQUENCE_TABLE(SUM(1)) AS tt;

DROP TABLE t1;
