--source include/have_myisam.inc

# Install auxiliary 'test_hint' SP used in the test
--source include/percona_set_var_extension_test_hint.inc

--echo #####################################
--echo # Test SET_VAR hint myisam variables
--echo #####################################

CALL test_hint("SET_VAR(myisam_sort_buffer_size=800000)", "myisam_sort_buffer_size");

SET myisam_sort_buffer_size=400000;
CALL test_hint("SET_VAR(myisam_sort_buffer_size=900000)", "myisam_sort_buffer_size");
SET myisam_sort_buffer_size=default;

--echo ###################################################
--echo # Test SET_VAR hint optimize table for myisam table
--echo ###################################################
CREATE TABLE t1 (v1 INT, v2 INT) ENGINE=MyISAM;
INSERT INTO t1 VALUES (1,2);
INSERT INTO t1 VALUES (3,4);
OPTIMIZE /*+ SET_VAR(myisam_sort_buffer_size=700000) */  TABLE t1;

--echo ##############################################
--echo # Test with invalid values to myisam variables
--echo ##############################################
OPTIMIZE /*+ SET_VAR(myisam_sort_buffer_size=abc) */  TABLE t1;

DROP TABLE t1;

--echo #################################################
--echo # Test SET_VAR hint with InnoDB session variables
--echo #################################################
CALL test_hint("SET_VAR(innodb_lock_wait_timeout=800)", "innodb_lock_wait_timeout");
SET innodb_lock_wait_timeout=200;
CALL test_hint("SET_VAR(innodb_lock_wait_timeout=600)", "innodb_lock_wait_timeout");
SET innodb_lock_wait_timeout=default;


--echo #############################################
--echo # Test SET_VAR hint ALTER TABLE innodb_tmpdir
--echo #############################################

let $MYSQLD_DATADIR= `select @@datadir`;
CREATE TABLE t1(a TEXT, b TEXT, FULLTEXT(a,b))ENGINE=INNODB;
INSERT INTO t1 VALUES('test1', 'test2');
INSERT INTO t1 VALUES('text1', 'text2');

--let $ALTER_DIR=$MYSQL_TMP_DIR/alter_dir
--mkdir $MYSQL_TMP_DIR/alter_dir
--replace_result $ALTER_DIR ALTER_DIR
--eval ALTER /*+ SET_VAR(innodb_tmpdir="$ALTER_DIR") */ TABLE t1 ADD FULLTEXT(b);
--force-rmdir $ALTER_DIR
ALTER /*+ SET_VAR(innodb_tmpdir=INVALID_DIR) */ TABLE t1 ADD INDEX(b(20));
SHOW CREATE TABLE t1;
DROP TABLE t1;

--echo #############################################
--echo # Test SET_VAR with innodb_lock_wait_timeout
--echo #############################################

CREATE TABLE t1(a INT PRIMARY KEY)ENGINE=INNODB;
BEGIN;
INSERT INTO t1 VALUES(1),(2),(3);

--source include/count_sessions.inc

connect (con1,localhost,root,,);
SET innodb_lock_wait_timeout=10000;
SELECT @@innodb_lock_wait_timeout;
--error ER_LOCK_WAIT_TIMEOUT
SELECT /*+ SET_VAR(innodb_lock_wait_timeout=1) */ * FROM t1 FOR UPDATE;
disconnect con1;

connection default;
COMMIT;

--source include/wait_until_count_sessions.inc
SELECT /*+ SET_VAR(innodb_lock_wait_timeout="abc") */ * FROM t1 FOR UPDATE;
DROP TABLE t1;

--echo ###########################################################
--echo # Test SET_VAR hint with stored procedure (CALL statement)
--echo ###########################################################
--disable_query_log
DELIMITER |;
              CREATE PROCEDURE p1() BEGIN
              SELECT @@myisam_sort_buffer_size,
                     @@sort_buffer_size,
                     @@max_join_size,
		     @@innodb_lock_wait_timeout;
              END|
DELIMITER ;|
--enable_query_log

--echo # check without hints
CALL p1();
--echo # check with hints
CALL /*+ SET_VAR(myisam_sort_buffer_size=16777216) SET_VAR(sort_buffer_size=524288) SET_VAR(max_join_size=461461461) SET_VAR(innodb_lock_wait_timeout=99) */ p1();
--echo # some with invalid values
CALL /*+ SET_VAR(myisam_sort_buffer_size=a216) SET_VAR(sort_buffer_size=524288b) SET_VAR(max_join_size=461461461) SET_VAR(innodb_lock_wait_timeout=99) */ p1();
DROP PROCEDURE p1;

--echo ###########################################################
--echo # Test SET_VAR hint with stored procedure (CALL statement)
--echo # and with the same hint at statement in stored procedure
--echo # The hint at statement should have higher preference to the
--echo # hint at CALL statement
--echo ###########################################################
--disable_query_log
DELIMITER |;
              CREATE PROCEDURE p1() BEGIN
	      CALL test_hint("SET_VAR(myisam_sort_buffer_size=600000)", "myisam_sort_buffer_size");
	      CALL test_hint("SET_VAR(sort_buffer_size=420000)", "sort_buffer_size");
	      CALL test_hint("SET_VAR(max_join_size=200200200)", "max_join_size");
	      CALL test_hint("SET_VAR(innodb_lock_wait_timeout=299)", "innodb_lock_wait_timeout");
	      CALL /*+ SET_VAR(innodb_lock_wait_timeout=499)*/ test_hint("SET_VAR(innodb_lock_wait_timeout=299)", "innodb_lock_wait_timeout");
              END|
DELIMITER ;|
--enable_query_log

--echo
--echo # test without hints to CALL statement
--echo
CALL p1();
--echo
--echo # test with hints to CALL statement
--echo
CALL /*+ SET_VAR(myisam_sort_buffer_size=16777216) SET_VAR(sort_buffer_size=524288) SET_VAR(max_join_size=461461461) SET_VAR(innodb_lock_wait_timeout=99) */ p1();
DROP PROCEDURE p1;

--echo #######################################
--echo #Test SET_VAR with block_encryption_mode
--echo ########################################

CALL test_hint("SET_VAR(block_encryption_mode=\"aes-256-ecb\")", "block_encryption_mode");

CREATE TABLE aes_ecb(a VARBINARY(16), b128 CHAR(16), b192 CHAR(16), b256 CHAR(16)) charset latin1;
INSERT INTO aes_ecb (a) VALUES ('a'), ('Жоро'), (REPEAT('a', 10));

UPDATE /*+ SET_VAR(block_encryption_mode='aes-128-ecb') */ aes_ecb SET b128 = AES_ENCRYPT(a, 'a');

UPDATE /*+ SET_VAR(block_encryption_mode='aes-192-ecb') */ aes_ecb SET b192 = AES_ENCRYPT(a, 'a');

UPDATE /*+ SET_VAR(block_encryption_mode='aes-256-ecb') */ aes_ecb SET b256 = AES_ENCRYPT(a, 'a');

--echo # must return 0
SELECT COUNT(*) FROM aes_ecb WHERE b128 = b192 OR B192 = b256 OR b128=b256;

--echo # must return 3
SELECT /*+ SET_VAR(block_encryption_mode='aes-256-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b256, 'a');

--echo # must return 0
SELECT /*+ SET_VAR(block_encryption_mode='aes-256-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b256, 'b');

--echo # must return 3
SELECT /*+ SET_VAR(block_encryption_mode='aes-192-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b192, 'a');

--echo # must return 0
SELECT /*+ SET_VAR(block_encryption_mode='aes-192-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b192, 'b');

--echo # must return 3
SELECT /*+ SET_VAR(block_encryption_mode='aes-128-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b128, 'a');

--echo # must return 0
SELECT /*+ SET_VAR(block_encryption_mode='aes-128-ecb') */ COUNT(*) FROM aes_ecb WHERE a = AES_DECRYPT(b128, 'b');

DROP TABLE aes_ecb;


--echo #####################################################
--echo # Test SET_VAR with histogram_generation_max_mem_size
--echo #####################################################

CALL test_hint("SET_VAR(histogram_generation_max_mem_size=1000000)", "histogram_generation_max_mem_size");

CREATE TABLE t1 (col1 VARCHAR(255));

--echo # Insert 10000 rows into the table t1 with random string data
INSERT INTO t1 (col1)
WITH RECURSIVE cte (n, val) AS
(
  SELECT 1, CONCAT(MD5(RAND()), MD5(RAND()))
  UNION ALL
  SELECT n + 1, CONCAT(MD5(RAND()), MD5(RAND())) FROM cte WHERE n < 10000
)
SELECT /*+ SET_VAR(cte_max_recursion_depth=10000) */ val FROM cte;

--echo # Set the amount of available memory as low as possible, so we are sure
--echo # that sampling will be used.
ANALYZE /*+ SET_VAR(histogram_generation_max_mem_size=1000000) */ TABLE t1 UPDATE HISTOGRAM ON col1 WITH 2 BUCKETS;

SELECT
  histogram->>'$."sampling-rate"' < 1.0 AS should_be_true
FROM
  INFORMATION_SCHEMA.COLUMN_STATISTICS;

DROP TABLE t1;

--echo ########################################
--echo # Test SET_VAR with myisam_stats_method
--echo ########################################

CALL test_hint("SET_VAR(myisam_stats_method=nulls_equal)", "myisam_stats_method");

CREATE TABLE t1 (a INT, KEY(a)) ENGINE=MYISAM;
INSERT INTO t1 VALUES (0),(1),(2),(3),(4);
INSERT INTO t1 SELECT NULL FROM t1;

--echo # default: NULLs considered inequal
ANALYZE TABLE t1;
SHOW INDEX FROM t1;
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;
CHECK TABLE t1;
ANALYZE TABLE t1;
SHOW INDEX FROM t1;

--echo # Set nulls to be equal
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;

ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_equal) */ TABLE t1;
SHOW INDEX FROM t1;

INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;

CHECK /*+ SET_VAR(myisam_stats_method=nulls_equal) */ TABLE t1;
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_equal) */ TABLE t1;
SHOW INDEX FROM t1;

--echo # Set nulls back to be unequal
INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;

ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_unequal) */ TABLE t1;
SHOW INDEX FROM t1;

INSERT INTO t1 VALUES (11);
DELETE FROM t1 WHERE a=11;

CHECK TABLE t1;
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_unequal) */ TABLE t1;
SHOW INDEX FROM t1;

DROP TABLE t1;

--echo # Set nulls to nulls_ignored

CREATE TABLE t1 (
  a CHAR(3), b CHAR(4), c CHAR(5), d CHAR(6),
  KEY(a,b,c,d)
) ENGINE=MyISAM;
INSERT INTO t1 VALUES ('bcd','def1', NULL, 'zz');
INSERT INTO t1 VALUES ('bcd','def2', NULL, 'zz');
INSERT INTO t1 VALUES ('bce','def1', 'yuu', NULL);
INSERT INTO t1 VALUES ('bce','def2', NULL, 'quux');
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_ignored) */ TABLE t1;
SHOW INDEX FROM t1;
DELETE FROM t1;
ANALYZE /*+ SET_VAR(myisam_stats_method=nulls_ignored) */ TABLE t1;
SHOW INDEX FROM t1;

DROP TABLE t1;

--echo ########################################
--echo # Test SET_VAR with preload_buffer_size
--echo ########################################

CALL test_hint("SET_VAR(preload_buffer_size=1024)", "preload_buffer_size");

CREATE TABLE t1 (
  a INT NOT NULL AUTO_INCREMENT,
  b CHAR(16) NOT NULL,
  PRIMARY KEY (a),
  KEY (b)
) ENGINE=MYISAM;

CREATE TABLE t2(
  a INT NOT NULL AUTO_INCREMENT,
  b CHAR(16) NOT NULL,
  PRIMARY KEY (a),
  KEY (b)
) ENGINE=MYISAM;

INSERT INTO t1(b) VALUES
  ('test0'),
  ('test1'),
  ('test2'),
  ('test3'),
  ('test4'),
  ('test5'),
  ('test6'),
  ('test7');

INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;
INSERT INTO t2(b) SELECT b FROM t1;
INSERT INTO t1(b) SELECT b FROM t2;

SELECT COUNT(*) FROM t1;
SELECT COUNT(*) FROM t2;

FLUSH TABLES; FLUSH STATUS;
SHOW STATUS LIKE "key_read%";

SELECT COUNT(*) FROM t1 WHERE b = 'test1';
SHOW STATUS LIKE "key_read%";
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
SHOW STATUS LIKE "key_read%";

FLUSH TABLES; FLUSH STATUS;
select @@preload_buffer_size;
LOAD INDEX INTO CACHE t1;
SHOW STATUS LIKE "key_read%";
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
SHOW STATUS LIKE "key_read%";

FLUSH TABLES; FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
LOAD /*+ SET_VAR(preload_buffer_size=262144) */ INDEX INTO CACHE t1 IGNORE LEAVES;
SHOW STATUS LIKE "key_read%";
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
SHOW STATUS LIKE "key_read%";

FLUSH TABLES; FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
LOAD /*+ SET_VAR(preload_buffer_size=1024) */ INDEX INTO CACHE t1, t2 KEY (primary,b) IGNORE LEAVES;
SHOW STATUS LIKE "key_read%";
SELECT COUNT(*) FROM t1 WHERE b = 'test1';
SELECT COUNT(*) FROM t2 WHERE b = 'test1';
SHOW STATUS LIKE "key_read%";

FLUSH TABLES; FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
LOAD /*+ SET_VAR(preload_buffer_size=1024) */ INDEX INTO CACHE t3, t2 KEY (primary,b) ;
SHOW STATUS LIKE "key_read%";

FLUSH TABLES; FLUSH STATUS;
SHOW STATUS LIKE "key_read%";
LOAD /*+ SET_VAR(preload_buffer_size=1024) */ INDEX INTO CACHE t3 KEY (b), t2 KEY (c) ;
SHOW STATUS LIKE "key_read%";

DROP TABLE t1, t2;

--echo #################################################
--echo # Test SET_VAR with innodb_ft_user_stopword_table
--echo #################################################

# Test session level stopword control "innodb_user_stopword_table"
CREATE TABLE user_stopword_session(value VARCHAR(30)) ENGINE = INNODB;

CALL test_hint("SET_VAR(innodb_ft_user_stopword_table=\"test/user_stopword_session\")", "innodb_ft_user_stopword_table");

INSERT INTO user_stopword_session VALUES("session");

CREATE /*+ SET_VAR(innodb_ft_user_stopword_table="test/user_stopword_session") */ TABLE articles_4 (
        id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
        title VARCHAR(200),
        body TEXT,
        FULLTEXT (title,body)
        ) ENGINE=InnoDB;

INSERT INTO articles_4 (title, body)
        VALUES ('test for session stopwords','this should also be excluded...');

--echo # "session" is excluded
SELECT * FROM articles_4 WHERE MATCH (title,body)
        AGAINST ('session' IN NATURAL LANGUAGE MODE);

--echo # But we can find record with "this"
SELECT * FROM articles_4 WHERE MATCH (title,body)
        AGAINST ('this' IN NATURAL LANGUAGE MODE);

DROP TABLE articles_4;

--echo #
--echo # Now enable stopword with ALTER (first without SET_VAR, then ALTER
--echo # with SET_VAR
--echo #

CREATE  TABLE articles_4 (
        id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
        title VARCHAR(200),
        body TEXT,
        FULLTEXT (title,body)
        ) ENGINE=InnoDB;

INSERT INTO articles_4 (title, body)
        VALUES ('test for session stopwords','this should also be excluded...');

--echo # "session" is NOT excluded
SELECT * FROM articles_4 WHERE MATCH (title,body)
        AGAINST ('session' IN NATURAL LANGUAGE MODE);

--echo # and we cannot find record with "this"
SELECT * FROM articles_4 WHERE MATCH (title,body)
        AGAINST ('this' IN NATURAL LANGUAGE MODE);

ALTER /*+ SET_VAR(innodb_ft_user_stopword_table="test/user_stopword_session") */ TABLE articles_4 ALGORITHM=COPY;

--echo # "session" is excluded
SELECT * FROM articles_4 WHERE MATCH (title,body)
        AGAINST ('session' IN NATURAL LANGUAGE MODE);

--echo # But we can find record with "this"
SELECT * FROM articles_4 WHERE MATCH (title,body)
        AGAINST ('this' IN NATURAL LANGUAGE MODE);

DROP TABLE articles_4;
DROP TABLE user_stopword_session;
DROP PROCEDURE test_hint;
