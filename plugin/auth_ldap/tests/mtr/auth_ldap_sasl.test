
# This testcase requires an LDAP server setup with SASL, and the following user:
# uid=john3,ou=People,dc=example,dc=com
# Password: "secret" (stored in cleartext, otherwise sasl doesn't work)
# SASL configured, SASL indetity "john3" should match the user!

--source include/count_sessions.inc

CREATE ROLE 'test_role';
CREATE ROLE 'test_role2';

SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'authentication_ldap_sasl';
--replace_result $MTR_LDAP_HOST <MTR_LDAP_HOST> $MTR_LDAP_PORT <MTR_LDAP_PORT> $MTR_LDAP_FALLBACK_HOST <MTR_LDAP_FALLBACK_HOST> $MTR_LDAP_FALLBACK_PORT <MTR_LDAP_FALLBACK_PORT>
SHOW GLOBAL VARIABLES LIKE 'authentication_ldap_sasl';
SET GLOBAL authentication_ldap_sasl_bind_base_dn = 'ou=People,dc=example,dc=com';

# For debugging:
# SET GLOBAL authentication_ldap_sasl_log_status = 6;

--replace_result $MTR_LDAP_HOST <MTR_LDAP_HOST> $MTR_LDAP_PORT <MTR_LDAP_PORT> $MTR_LDAP_FALLBACK_HOST <MTR_LDAP_FALLBACK_HOST> $MTR_LDAP_FALLBACK_PORT <MTR_LDAP_FALLBACK_PORT>
SHOW GLOBAL VARIABLES LIKE 'authentication_ldap_sasl';
CREATE USER john3 IDENTIFIED WITH authentication_ldap_sasl BY 'cn=john3,ou=People,dc=example,dc=com';
CREATE USER nonexistent IDENTIFIED WITH authentication_ldap_sasl BY 'uid=nonexistent';

--connect (con1,localhost,john3,secret,,,,)

SHOW GRANTS FOR 'john3';

--replace_result $MTR_LDAP_HOST <MTR_LDAP_HOST> $MTR_LDAP_PORT <MTR_LDAP_PORT> $MTR_LDAP_FALLBACK_HOST <MTR_LDAP_FALLBACK_HOST> $MTR_LDAP_FALLBACK_PORT <MTR_LDAP_FALLBACK_PORT>
SHOW GLOBAL VARIABLES LIKE 'authentication_ldap_sasl';

--disconnect con1
--connection default

--disable_query_log
--error 2000
--connect (con1,localhost,nonexistent,secret,,,,)
--enable_query_log

DROP USER john3;
DROP USER nonexistent;
DROP ROLE test_role;
DROP ROLE test_role2;
SET GLOBAL authentication_ldap_sasl_bind_base_dn = '';
SET GLOBAL authentication_ldap_sasl_log_status = 1;
SET GLOBAL authentication_ldap_sasl_group_role_mapping = '';

--source include/wait_until_count_sessions.inc
