# Wl8821 Testing
# This test will will check parser support for
# ALTER INSTANCE ROTATE <key_type> MASTER KEY statement
# and key rotation testing.

--source include/have_keyring_vault_plugin.inc
--source include/not_embedded.inc
--source include/no_valgrind_without_big.inc
--source include/have_innodb.inc
call mtr.add_suppression("\\[Error\\] InnoDB: Encryption can't find master key, please check the keyring plugin is loaded.");
call mtr.add_suppression("\\[Error\\] Plugin keyring_vault reported: 'keyring_vault initialization failure.");
call mtr.add_suppression("\\[Error\\] Function 'keyring_vault' already exists");
call mtr.add_suppression("\\[Error\\] Couldn't load plugin named 'keyring_vault' with soname 'keyring_vault.so'.");
call mtr.add_suppression("\\[Error\\] Couldn't load plugin named 'keyring_vault' with soname 'keyring_vault.dll'.");
call mtr.add_suppression("\\[Error\\] InnoDB: Can't generate new master key, please check the keyring plugin is loaded.");
call mtr.add_suppression("\\[Error\\] InnoDB: Encryption information in datafile");
call mtr.add_suppression("\\[Error\\] InnoDB: Operating system error number 2 in a file operation.");
call mtr.add_suppression("\\[Error\\] InnoDB: The error means the system cannot find the path specified.");
call mtr.add_suppression("\\[Error\\] InnoDB: Could not find a valid tablespace file for");
call mtr.add_suppression("\\[Error\\] InnoDB: If you are installing InnoDB, remember that you must create directories yourself, InnoDB does not create them.");
call mtr.add_suppression("\\[Error\\] InnoDB: Can't generate new master key for tablespace encryption, please check the keyring plugin is loaded.");
call mtr.add_suppression("\\[Warning\\] InnoDB: Ignoring tablespace `test/.*` because it could not be opened.");
call mtr.add_suppression("\\[Error\\] InnoDB: Failed to find tablespace for table");
call mtr.add_suppression("\\[Warning\\] InnoDB: Can't read encryption key from file");
call mtr.add_suppression("\\[Warning\\] InnoDB: Cannot open table .* from the internal data dictionary of InnoDB though the .frm file for the table exists.*");
call mtr.add_suppression("\\[ERROR\\] InnoDB: Failed to decrypt encryption information, please confirm the master key was not changed.");

--source generate_default_conf_files.inc
--source is_vault_server_up.inc

# Create mount points
--let MOUNT_POINT_SERVICE_OP=CREATE
--let $KEYRING_CONF_FILE=$KEYRING_CONF_FILE_1
--source mount_point_service.inc
--let $KEYRING_CONF_FILE=$KEYRING_CONF_FILE_2
--source mount_point_service.inc

# Invalid syntax
--error ER_PARSE_ERROR
ALTER INSTANCE ROTATE MYISAM MASTER KEY;
--error ER_PARSE_ERROR
ALTER INSTANCE ROTATE INNODB;
--error ER_PARSE_ERROR
ALTER INSTANCE STORE INNDB;
--error ER_PARSE_ERROR
ALTER INSTANCE ROTATE INNODB SLAVE KEY;

# When keyring_vault plugin not loaded.
--error ER_CANNOT_FIND_KEY_IN_KEYRING
ALTER INSTANCE ROTATE INNODB MASTER KEY;

--echo
# Restarting mysql server with keyring_vault plugin.
--let $restart_parameters="restart:--early-plugin-load="keyring_vault=$KEYRING_VAULT_PLUGIN" --loose-keyring_vault_config=$KEYRING_CONF_FILE_1 $KEYRING_VAULT_PLUGIN_OPT"
--let $restart_hide_args= 1
--source include/restart_mysqld.inc

--error ER_UDF_EXISTS
INSTALL PLUGIN keyring_vault SONAME 'keyring_vault.so';

--echo
SHOW GLOBAL variables LIKE 'early-plugin-load';
# Command-Line option.
--error ER_PARSE_ERROR
SET @@global.early-plugin-load="keyring_vault=keyring_vault.so";

--echo
# Check keyring_vault plugin.
query_vertical SELECT PLUGIN_NAME,PLUGIN_VERSION,PLUGIN_STATUS
FROM INFORMATION_SCHEMA.PLUGINS WHERE plugin_name='keyring_vault';

# Roating master key when keyring vault does not have master key for current server.
# It should genereate new master key.
ALTER INSTANCE ROTATE INNODB MASTER KEY;

# Creating table with encryption.
CREATE TABLE t1(c1 INT, c2 char(20)) ENCRYPTION="Y" ENGINE = InnoDB;
INSERT INTO t1 VALUES(0, "aaaaa");
INSERT INTO t1 VALUES(1, "bbbbb");
INSERT INTO t1 VALUES(2, "ccccc");
SELECT * FROM t1;

ALTER INSTANCE ROTATE INNODB MASTER KEY;

CREATE TABLE t2(c1 INT, c2 char(20)) ENCRYPTION="Y" ENGINE = InnoDB;
INSERT INTO t2 SELECT * FROM t1;
SELECT COUNT(*) FROM t2;

SELECT * FROM t1;

# Uninstalling keyring_vault plugin.
UNINSTALL PLUGIN keyring_vault;
query_vertical SELECT PLUGIN_NAME,PLUGIN_VERSION,PLUGIN_STATUS
FROM INFORMATION_SCHEMA.PLUGINS WHERE plugin_name='keyring_vault';

--echo # Try to access encrypted table.
# Cached the tablespace key in memory.
SELECT COUNT(*) FROM t1;
SELECT * FROM t2;

CREATE TABLE t10(c1 INT, c2 char(20)) ENGINE = InnoDB;

# Install keyring_vault plugin with different Vault. This means that InnoDB Master key will not be accessible
# and thus it will not be possible to create new encrypted tables

--replace_regex /\.dll/.so/
eval INSTALL PLUGIN keyring_vault SONAME '$KEYRING_VAULT_PLUGIN';
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config='$KEYRING_CONF_FILE_2';
query_vertical SELECT PLUGIN_NAME,PLUGIN_VERSION,PLUGIN_STATUS
FROM INFORMATION_SCHEMA.PLUGINS WHERE plugin_name='keyring_vault';

--error ER_CANNOT_FIND_KEY_IN_KEYRING
CREATE TABLE t6(c1 INT, c2 char(20)) ENCRYPTION="Y" ENGINE = InnoDB;

--error ER_CANNOT_FIND_KEY_IN_KEYRING
ALTER INSTANCE ROTATE INNODB MASTER KEY;

# Although InnoDB Master key is not accessible it should still be possible to select from encrypted tables
# for which tablespace key was already cached by InnoDB
SELECT * FROM t2;

UNINSTALL PLUGIN keyring_vault;

# After restart encrypted table/s should be accessible
# when using same Vault server.
let $restart_parameters = restart: --early-plugin-load="keyring_vault=$KEYRING_VAULT_PLUGIN" --keyring_vault_config=$KEYRING_CONF_FILE_1;
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR $KEYRING_PLUGIN keyring_vault.so
--source include/restart_mysqld.inc
SELECT * FROM t1;
SELECT * FROM t2;

# After restart old encrypted tables will not be not accessible,
# since we changed Vault we are connecting to
let $restart_parameters = restart: --early-plugin-load="keyring_vault=$KEYRING_VAULT_PLUGIN" --keyring_vault_config=$KEYRING_CONF_FILE_2;
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR $KEYRING_PLUGIN keyring_vault.so
--source include/restart_mysqld.inc
--error ER_CANNOT_FIND_KEY_IN_KEYRING
SELECT * FROM t1;

CREATE TABLE t12(c1 INT, c2 char(20)) ENCRYPTION="Y" ENGINE = InnoDB;
INSERT INTO t12 VALUES(2, "ccccchfc");

ALTER INSTANCE ROTATE INNODB MASTER KEY;

SELECT * FROM t12;

# Test keyring_file with early-plugin-load and plugin-load.
--let $restart_parameters="restart:--early-plugin-load="keyring_vault=$KEYRING_VAULT_PLUGIN" --plugin-load="keyring_vault=$KEYRING_VAULT_PLUGIN" --keyring_vault_config=$KEYRING_CONF_FILE_2"
--let $restart_hide_args= 1
--source include/restart_mysqld.inc

query_vertical SELECT PLUGIN_NAME,PLUGIN_VERSION,PLUGIN_STATUS
FROM INFORMATION_SCHEMA.PLUGINS WHERE plugin_name='keyring_vault';

CREATE TABLE t11(c1 INT, c2 char(20)) ENCRYPTION="Y" ENGINE = InnoDB;

# Table will not be accesiable,since we have changed the Vault
--error ER_CANNOT_FIND_KEY_IN_KEYRING
SELECT * FROM t2;

# Uninstalling keyring_vault plugin.
UNINSTALL PLUGIN keyring_vault;
query_vertical SELECT PLUGIN_NAME,PLUGIN_VERSION,PLUGIN_STATUS
FROM INFORMATION_SCHEMA.PLUGINS WHERE plugin_name='keyring_vault';

SELECT * FROM t11;
# Try to access encrypted table, Which are created before restart.
--error ER_CANNOT_FIND_KEY_IN_KEYRING
SELECT COUNT(*) FROM t1;

# Creating table after uninstalling keyring_vault plugin.
--error ER_CANNOT_FIND_KEY_IN_KEYRING
CREATE TABLE t4(c1 INT, c2 char(20)) ENCRYPTION="Y" ENGINE = InnoDB;

# ALTER INSTANCE ROTATE <key_type> MASTER KEY statement,after UNINSTALL.
--error ER_CANNOT_FIND_KEY_IN_KEYRING
ALTER INSTANCE ROTATE INNODB MASTER KEY;

# Creating table without encryption.
CREATE TABLE t5(c1 INT, c2 char(20)) ENGINE = InnoDB;
INSERT INTO t5 VALUES(100, "without_enc");

# Encrypted table DROP when keyring_vault plugin missing/removed.
DROP TABLE t11;

--echo
## Try to access non-encrypted table.
SELECT * FROM t5;

# Cleanup
DROP TABLE t1,t2,t5,t12,t10;

# Delete mount points
--let MOUNT_POINT_SERVICE_OP=DELETE
--let $KEYRING_CONF_FILE=$KEYRING_CONF_FILE_1
--source mount_point_service.inc
--let $KEYRING_CONF_FILE=$KEYRING_CONF_FILE_2
--source mount_point_service.inc
--echo #End:
