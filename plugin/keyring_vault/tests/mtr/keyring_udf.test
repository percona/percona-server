--source include/have_keyring_vault_plugin.inc
--source include/have_keyring_udf_plugin.inc

--let $vault_conf_mount_point_uuid = `SELECT UUID()`

--source parse_combination.inc

--let $conf_file1 = $MYSQLTEST_VARDIR/keyring_vault1.conf
--let $conf_file2 = $MYSQLTEST_VARDIR/keyring_vault2.conf

--let $mount_point_service_op = CREATE

--let $vault_conf_file = $conf_file1
--let $vault_conf_mount_point_suffix = _1
--source generate_conf_file.inc
--source mount_point_service.inc

--let $vault_conf_file = $conf_file2
--let $vault_conf_mount_point_suffix = _2
--source generate_conf_file.inc
if (!$vault_conf_mount_point_directory)
{
  --source mount_point_service.inc
}

--disable_query_log
call mtr.add_suppression("Error while fetching key: key_id cannot be empty");
call mtr.add_suppression("Error while removing key: key_id cannot be empty");
call mtr.add_suppression("Error while generating key: invalid key_type");
call mtr.add_suppression("Error while generating key: key_id cannot be empty");
call mtr.add_suppression("Error while storing key: invalid key_type");
call mtr.add_suppression("Error while storing key: key_id cannot be empty");
call mtr.add_suppression("Plugin keyring_vault reported: 'vault_ca is not specified but vault_url is https://");
call mtr.add_suppression("for being a mount point unsuccessful - skipped.");
call mtr.add_suppression("for being a mount point successful - identified kv-v2 secret engine.");
--enable_query_log

--let $server_uuid = query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo # Check what happens when we have not yet loaded keyring_udf or keyring_vault
--source include/keyring_udf_missing_plugin.inc

# We need both plugins - keyring_vault and keyring_udf in one place - to be able to load both plugins
if ($KEYRING_UDF_DIR != $KEYRING_PLUGIN_DIR)
{
  --replace_regex /\.dll/.so/
  --error 0,1
  --remove_file $KEYRING_UDF_DIR/$KEYRING_VAULT_PLUGIN
  --replace_regex /\.dll/.so/
  --copy_file $KEYRING_VAULT_PLUGIN_DIR/$KEYRING_VAULT_PLUGIN $KEYRING_UDF_DIR/$KEYRING_VAULT_PLUGIN
}
--echo # Re-starting mysql server with keyring_vault plugin.
--let $do_not_echo_parameters = 1
--let $restart_parameters = restart: $KEYRING_VAULT_PLUGIN_EARLY_LOAD --loose-keyring_vault_config=$conf_file1
--source include/restart_mysqld.inc

--echo # Check what happens when we have not yet loaded keyring_udf
--source include/keyring_udf_missing_plugin.inc

--replace_regex /\.dll/.so/
eval INSTALL PLUGIN keyring_udf SONAME '$KEYRING_UDF';
--echo # Check if keys are available after server restart
--replace_regex /\.dll/.so/
eval create function keyring_key_store returns integer soname '$KEYRING_UDF';
--replace_regex /\.dll/.so/
eval create function keyring_key_generate returns integer soname '$KEYRING_UDF';
--replace_regex /\.dll/.so/
eval create function keyring_key_remove returns integer soname '$KEYRING_UDF';
--replace_regex /\.dll/.so/
eval create function keyring_key_fetch returns string soname '$KEYRING_UDF';

--let $key_id = `select CONCAT('Rob_AES_128', '$server_uuid')`
--replace_result $key_id key_id
eval select keyring_key_generate('$key_id','AES',16);
--let $key_id = `select CONCAT('Rob_AES_128_store', '$server_uuid')`
--replace_result $key_id key_id
eval select keyring_key_store('$key_id','AES',"0123456789012345");

--echo # Check if checking keyring_vault configuration file works fine

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config='$conf_file2';
--replace_result $key_id key_id
eval select keyring_key_generate('$key_id','AES',16);
--replace_result $key_id key_id
eval select keyring_key_fetch('$key_id') into @x;
select LENGTH(@x);

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config='$conf_file1';
--replace_result $key_id key_id
eval select keyring_key_fetch('$key_id') into @x;
select LENGTH(@x);
--replace_result $key_id key_id
eval select keyring_key_remove('$key_id');

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config='$conf_file2';
--replace_result $key_id key_id
eval select keyring_key_fetch('$key_id') into @x;
select LENGTH(@x);
--replace_result $key_id key_id
eval select keyring_key_remove('$key_id');

drop function keyring_key_fetch;
drop function keyring_key_remove;
drop function keyring_key_generate;

--echo # Re-starting mysql server with keyring_vault plugin.
--let $do_not_echo_parameters=1
--let $restart_parameters = restart: $KEYRING_VAULT_PLUGIN_EARLY_LOAD --loose-keyring-vault-config=$conf_file1
--source include/restart_mysqld.inc

--replace_regex /\.dll/.so/
eval create function keyring_key_fetch returns string soname '$KEYRING_UDF';
--replace_regex /\.dll/.so/
eval create function keyring_key_type_fetch returns string soname '$KEYRING_UDF';
--replace_regex /\.dll/.so/
eval create function keyring_key_length_fetch returns integer soname '$KEYRING_UDF';
--replace_regex /\.dll/.so/
eval create function keyring_key_remove returns integer soname '$KEYRING_UDF';

--let $key_id = `select CONCAT('Rob_AES_128', '$server_uuid')`
--replace_result $key_id key_id
eval select keyring_key_fetch('$key_id') into @x;
select LENGTH(@x);
--replace_result $key_id key_id
eval select keyring_key_length_fetch('$key_id');
--replace_result $key_id key_id
eval select keyring_key_type_fetch('$key_id');
--replace_result $key_id key_id
eval select keyring_key_remove('$key_id');

drop function keyring_key_fetch;
drop function keyring_key_type_fetch;
drop function keyring_key_length_fetch;
drop function keyring_key_remove;
drop function keyring_key_store;

--echo # Test cases for keyring_udf and keyring_vault plugins loaded
--source include/keyring_udf_keyring_plugin_loaded.inc
--source include/keyring_udf_keyring_plugin_loaded_store_operations.inc

# Tests that are not available in main keyring_udf_keyring_plugin_loaded
# Generate AES_512
--let $key_id = `select CONCAT('Rob_AES_512', '$server_uuid')`
--replace_result $key_id key_id
eval select keyring_key_generate('$key_id','AES',64);
--replace_result $key_id key_id
eval set @x= keyring_key_fetch('$key_id');
eval select LENGTH(@x);
--replace_result $key_id key_id
eval select keyring_key_type_fetch('$key_id');
--replace_result $key_id key_id
eval select keyring_key_length_fetch('$key_id');
--replace_result $key_id key_id
eval select keyring_key_remove('$key_id');
# Generate DES 512
--let $key_id = `select CONCAT('Rob_DSA_4096', '$server_uuid')`
--replace_result $key_id key_id
eval select keyring_key_generate('$key_id','DSA',512);
--replace_result $key_id key_id
eval set @x= keyring_key_fetch('$key_id');
select LENGTH(@x);
--replace_result $key_id key_id
eval select keyring_key_type_fetch('$key_id');
--replace_result $key_id key_id
eval select keyring_key_length_fetch('$key_id');
--replace_result $key_id key_id
eval select keyring_key_remove('$key_id');

UNINSTALL PLUGIN keyring_vault;
--echo # Test cases for keyring_udf loaded and keyring_vault plugin not loaded
--source include/keyring_udf_keyring_plugin_not_loaded.inc

--replace_regex /\.dll/.so/
eval INSTALL PLUGIN keyring_vault SONAME '$KEYRING_VAULT_PLUGIN';

UNINSTALL PLUGIN keyring_udf;
--echo # Test cases for keyring_udf not loaded and keyring_vault plugin loaded
--source include/keyring_udf_keyring_udf_plugin_not_loaded.inc

drop function keyring_key_fetch;
drop function keyring_key_remove;
drop function keyring_key_generate;
drop function keyring_key_type_fetch;
drop function keyring_key_length_fetch;

# Delete mount points
--let $mount_point_service_op = DELETE
--let $vault_conf_mount_point_suffix = _1
--source mount_point_service.inc
if (!$vault_conf_mount_point_directory)
{
  --let $vault_conf_mount_point_suffix = _2
  --source mount_point_service.inc
}

# Removing .conf files
--remove_file $conf_file1
--remove_file $conf_file2
