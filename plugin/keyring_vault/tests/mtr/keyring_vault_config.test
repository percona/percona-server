--source include/have_keyring_vault_plugin.inc
--source include/not_embedded.inc

--let $vault_conf_mount_point_uuid = `SELECT UUID()`

--source parse_combination.inc

--let $conf_file1 = $MYSQLTEST_VARDIR/keyring_vault1.conf
--let $conf_file2 = $MYSQLTEST_VARDIR/keyring_vault2.conf

--let $vault_conf_file = $conf_file1
--let $vault_conf_mount_point_suffix = _1
--source generate_conf_file.inc

--let $vault_conf_file = $conf_file2
--let $vault_conf_mount_point_suffix = _2
--source generate_conf_file.inc

--let $mount_point_service_op = CREATE

--let $vault_conf_mount_point_suffix = _1
--source mount_point_service.inc

if (!$vault_conf_mount_point_directory)
{
--let $vault_conf_mount_point_suffix = _2
--source mount_point_service.inc
}

--disable_query_log
call mtr.add_suppression("\\[ERROR\\] Plugin keyring_vault reported: 'Could not open credentials file.'");
call mtr.add_suppression("\\[Warning\\] Plugin keyring_vault reported: 'vault_ca is not specified but vault_url is https://");
--enable_query_log

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR $KEYRING_PLUGIN keyring_vault.so $KEYRING_VAULT_PLUGIN_OPT KEYRING_VAULT_PLUGIN_OPT
--let $restart_parameters = restart: $KEYRING_VAULT_PLUGIN_OPT $KEYRING_VAULT_PLUGIN_LOAD --loose-keyring_vault_config=$conf_file1
--source include/restart_mysqld.inc

--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
SELECT @@global.keyring_vault_config;
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config= '$conf_file2';
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
SELECT @@global.keyring_vault_config;
--Error ER_WRONG_VALUE_FOR_VAR
SET @@global.keyring_vault_config= '../../../../../bad_dir/bad_keyring_vault.conf';
--Error ER_WRONG_VALUE_FOR_VAR
SET @@global.keyring_vault_config=NULL;
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
SELECT @@global.keyring_vault_config;

# cleanup
--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
eval SET @@global.keyring_vault_config= '$conf_file1';

# Delete mount points
--let $mount_point_service_op = DELETE

--let $vault_conf_mount_point_suffix = _1
--source mount_point_service.inc

if (!$vault_conf_mount_point_directory)
{
    --let $vault_conf_mount_point_suffix = _2
    --source mount_point_service.inc
}

# Removing .conf files
--remove_file $conf_file1
--remove_file $conf_file2
