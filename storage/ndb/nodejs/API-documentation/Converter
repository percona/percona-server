/*
   Copyright (c) 2013, 2021, Oracle and/or its affiliates.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License, version 2.0,
   as published by the Free Software Foundation.

   This program is also distributed with certain software (including
   but not limited to OpenSSL) that is licensed under separate terms,
   as designated in a particular file or component or in included license
   documentation.  The authors of MySQL hereby grant you an additional
   permission to link the program and your derivative works with the
   separately licensed software that they have included with MySQL.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License, version 2.0, for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
*/

/*   
   Converter classes convert between JavaScript types and MySQL types.
   If a user supplies a javascript converter, and it will be used to read 
   and write the database.

   Converters have several purposes:
    - To convert between MySQL DECIMAL types and a user's preferred JavaScript
      fixed-precision utility library
    - To convert between MySQL BIGINT types and a user's preferred JavaScript 
      big number utility library
    - To serialize arbitrary application objects into character or binary columns
    - To facilitate handling of DATETIME, TIME, DATE, and TIMESTAMP     
    - The emulate the MySQL server's handling of SET and ENUM columns in 
       non-SQL adapters
 
   A converter class implements two functions: 
      toDB(obj)  : convert obj, an application object, 
                   into the intermediate type representation of a column
      fromDB(val): convert val, an intermediate type,
                   into an application object form
   Each function returns the result of the conversion.   
   
   A TypeConverter registered by the user takes precedence over the adapter's 
   default converter for a type (if any).
   
   A fieldConverter registered as part of a TableMapping takes precedence over 
   any typeConverters.
*/ 

function Converter() {}:

Converter.prototype = {
  "toDB"    : function(obj) {  },
  "fromDB"  : function(val) {  }
};
