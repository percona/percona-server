/*
   Copyright (c) 2013, 2021, Oracle and/or its affiliates.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License, version 2.0,
   as published by the Free Software Foundation.

   This program is also distributed with certain software (including
   but not limited to OpenSSL) that is licensed under separate terms,
   as designated in a particular file or component or in included license
   documentation.  The authors of MySQL hereby grant you an additional
   permission to link the program and your derivative works with the
   separately licensed software that they have included with MySQL.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License, version 2.0, for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
*/

/* DBConnectionPool
   DBConnectionPool specifies a common SPI for a database connection.

   Each implementation is expected to require impl-specific properties 
   in the constructor.
*/


/* DBConnectionPool constructor.
   IMMEDIATE.
   Does not perform any IO. 
   Throws an exception if the Properties object is invalid.
*/   
DBConnectionPool(Properties connectionProperties); 


/* connect(function(error, DBConnectionPool) callback)
   ASYNC. 
   Connect to the database, using the properties supplied in the constructor.
*/
   connect(callback);


/* DBConnectionPool.isConnected() method.
   IMMEDIATE.

   Returns bool true/false
*/
   isConnected();


/* DBConnectionPool.close() method.
   ASYNC.
   Upon close, the user's callback function will be called with no arguments.
*/
   close(function() callback); 


/* getDBSession().
   ASYNC.
   Creates and opens a new DBSession.
*/
   getDBSession(session_index, function(error, DBSession) callback);


/* listTables(databaseName, callback(error, array))
   ASYNC
   List all tables in the schema.
   Returns an array of table names.
*/
  listTables(dbSession, databaseName, callback);


/* registerTypeConverter 
   IMMEDIATE
   Register a converter for a SQL data type 
   If converterObject is null, *unregister* the typeConverter for this 
   data type.

   @param typeName is a column type as defined in TableMetadata
   @param converterObject is as defined in Converter
*/
  registerTypeConverter(typeName, converterObject);

/* getTableMetadata
   ASYNC.
   Get metadata for a table. Return a TableMetadata object.
   @param databaseName database name
   @param tableName table name
   @param DBSession if null, get a session just for this function
*/
   getTableMetadata(databaseName, tableName, DBSession, function(err, TableMetadata) callback)
 
/* createTable
   ASYNC.
   Creates a table based on a table mapping.
*/
  createTable(tableMapping, function(err) callback);
