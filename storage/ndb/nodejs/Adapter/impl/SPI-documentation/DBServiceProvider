/*
   Copyright (c) 2013, 2021, Oracle and/or its affiliates.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License, version 2.0,
   as published by the Free Software Foundation.

   This program is also distributed with certain software (including
   but not limited to OpenSSL) that is licensed under separate terms,
   as designated in a particular file or component or in included license
   documentation.  The authors of MySQL hereby grant you an additional
   permission to link the program and your derivative works with the
   separately licensed software that they have included with MySQL.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License, version 2.0, for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
*/

/* This is the top level of the Database Storage Service Provider Interface.
   Its methods correspond to top-level methods in the API. 
*/


/* Object getDefaultConnectionProperties()
   IMMEDIATE
   RETURNS an object containing all of the valid properties 
   for this service provider, all set to their default values.
 */   
  function getDefaultConnectionProperties() {};


/* connect(Object properties, Function(err, DBConnectionPool) callback)
   ASYNC.
   Async connect.
*/
  function connect(properties, callback) {};


/* String getFactoryKey(Object properties)
   IMMEDIATE
   Create a SessionFactory key that will identify a DBConnectionPool 
   based on connection properties.
   RETURNS the String key
*/
  function getFactoryKey(properties) {};


/* Bool loadRequiredModules()
   IMMEDIATE
   The module should attempt to load all of its prerequisite modules.
   If succesful, return true.
   On failure, throw an excpetion with a message that describes the missing 
   component.
   Note that it must be possible to succesfully require the DBServiceProvider
   module itself even if the dependencies are missing.
*/
  function loadRequiredModules() {};


/* Object getDBMetadataManager()
   IMMEDIATE
   Returns a DBMetadataManager for this service provider
*/
  function getDBMetadataManager() {};
